"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cids";
exports.ids = ["vendor-chunks/cids"];
exports.modules = {

/***/ "(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/alloc.js":
/*!*********************************************************************!*\
  !*** ./node_modules/cids/node_modules/uint8arrays/cjs/src/alloc.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar asUint8array = __webpack_require__(/*! ./util/as-uint8array.js */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/util/as-uint8array.js\");\n\nfunction alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nfunction allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}\n\nexports.alloc = alloc;\nexports.allocUnsafe = allocUnsafe;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy9hbGxvYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELG1CQUFtQixtQkFBTyxDQUFDLGlIQUF5Qjs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYixtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy9jaWRzL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9janMvc3JjL2FsbG9jLmpzPzQwZWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgYXNVaW50OGFycmF5ID0gcmVxdWlyZSgnLi91dGlsL2FzLXVpbnQ4YXJyYXkuanMnKTtcblxuZnVuY3Rpb24gYWxsb2Moc2l6ZSA9IDApIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2MgIT0gbnVsbCkge1xuICAgIHJldHVybiBhc1VpbnQ4YXJyYXkuYXNVaW50OEFycmF5KGdsb2JhbFRoaXMuQnVmZmVyLmFsbG9jKHNpemUpKTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG59XG5mdW5jdGlvbiBhbGxvY1Vuc2FmZShzaXplID0gMCkge1xuICBpZiAoZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvY1Vuc2FmZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGFzVWludDhhcnJheS5hc1VpbnQ4QXJyYXkoZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSkpO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShzaXplKTtcbn1cblxuZXhwb3J0cy5hbGxvYyA9IGFsbG9jO1xuZXhwb3J0cy5hbGxvY1Vuc2FmZSA9IGFsbG9jVW5zYWZlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/alloc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/concat.js":
/*!**********************************************************************!*\
  !*** ./node_modules/cids/node_modules/uint8arrays/cjs/src/concat.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar alloc = __webpack_require__(/*! ./alloc.js */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/alloc.js\");\nvar asUint8array = __webpack_require__(/*! ./util/as-uint8array.js */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/util/as-uint8array.js\");\n\nfunction concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = alloc.allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8array.asUint8Array(output);\n}\n\nexports.concat = concat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy9jb25jYXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxZQUFZLG1CQUFPLENBQUMsdUZBQVk7QUFDaEMsbUJBQW1CLG1CQUFPLENBQUMsaUhBQXlCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1jdWx0Ly4vbm9kZV9tb2R1bGVzL2NpZHMvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2Nqcy9zcmMvY29uY2F0LmpzP2M3MWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgYWxsb2MgPSByZXF1aXJlKCcuL2FsbG9jLmpzJyk7XG52YXIgYXNVaW50OGFycmF5ID0gcmVxdWlyZSgnLi91dGlsL2FzLXVpbnQ4YXJyYXkuanMnKTtcblxuZnVuY3Rpb24gY29uY2F0KGFycmF5cywgbGVuZ3RoKSB7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gYXJyYXlzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyLmxlbmd0aCwgMCk7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0gYWxsb2MuYWxsb2NVbnNhZmUobGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgYXJyIG9mIGFycmF5cykge1xuICAgIG91dHB1dC5zZXQoYXJyLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBhcnIubGVuZ3RoO1xuICB9XG4gIHJldHVybiBhc1VpbnQ4YXJyYXkuYXNVaW50OEFycmF5KG91dHB1dCk7XG59XG5cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/concat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/equals.js":
/*!**********************************************************************!*\
  !*** ./node_modules/cids/node_modules/uint8arrays/cjs/src/equals.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction equals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexports.equals = equals;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy9lcXVhbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy9jaWRzL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9janMvc3JjL2VxdWFscy5qcz8wOGM3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnRzLmVxdWFscyA9IGVxdWFscztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/equals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/to-string.js":
/*!*************************************************************************!*\
  !*** ./node_modules/cids/node_modules/uint8arrays/cjs/src/to-string.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar bases = __webpack_require__(/*! ./util/bases.js */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/util/bases.js\");\n\nfunction toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  return base.encoder.encode(array).substring(1);\n}\n\nexports.toString = toString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy90by1zdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxZQUFZLG1CQUFPLENBQUMsaUdBQWlCOztBQUVyQztBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsVUFBVTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy90by1zdHJpbmcuanM/YWI3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBiYXNlcyA9IHJlcXVpcmUoJy4vdXRpbC9iYXNlcy5qcycpO1xuXG5mdW5jdGlvbiB0b1N0cmluZyhhcnJheSwgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNvZGluZyBcIiR7IGVuY29kaW5nIH1cImApO1xuICB9XG4gIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi04JykgJiYgZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGJhc2UuZW5jb2Rlci5lbmNvZGUoYXJyYXkpLnN1YnN0cmluZygxKTtcbn1cblxuZXhwb3J0cy50b1N0cmluZyA9IHRvU3RyaW5nO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/to-string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/util/as-uint8array.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/cids/node_modules/uint8arrays/cjs/src/util/as-uint8array.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return buf;\n}\n\nexports.asUint8Array = asUint8Array;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy91dGlsL2FzLXVpbnQ4YXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy91dGlsL2FzLXVpbnQ4YXJyYXkuanM/YWZiZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIGFzVWludDhBcnJheShidWYpIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlTGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gYnVmO1xufVxuXG5leHBvcnRzLmFzVWludDhBcnJheSA9IGFzVWludDhBcnJheTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/util/as-uint8array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/util/bases.js":
/*!**************************************************************************!*\
  !*** ./node_modules/cids/node_modules/uint8arrays/cjs/src/util/bases.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar basics = __webpack_require__(/*! multiformats/basics */ \"(ssr)/./node_modules/multiformats/cjs/src/basics.js\");\nvar alloc = __webpack_require__(/*! ../alloc.js */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/alloc.js\");\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = alloc.allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: basics.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...basics.bases\n};\n\nmodule.exports = BASES;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvY2pzL3NyYy91dGlsL2Jhc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQyxnRkFBcUI7QUFDMUMsWUFBWSxtQkFBTyxDQUFDLHdGQUFhOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy9jaWRzL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9janMvc3JjL3V0aWwvYmFzZXMuanM/MDdhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBiYXNpY3MgPSByZXF1aXJlKCdtdWx0aWZvcm1hdHMvYmFzaWNzJyk7XG52YXIgYWxsb2MgPSByZXF1aXJlKCcuLi9hbGxvYy5qcycpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb2RlYyhuYW1lLCBwcmVmaXgsIGVuY29kZSwgZGVjb2RlKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBwcmVmaXgsXG4gICAgZW5jb2Rlcjoge1xuICAgICAgbmFtZSxcbiAgICAgIHByZWZpeCxcbiAgICAgIGVuY29kZVxuICAgIH0sXG4gICAgZGVjb2RlcjogeyBkZWNvZGUgfVxuICB9O1xufVxuY29uc3Qgc3RyaW5nID0gY3JlYXRlQ29kZWMoJ3V0ZjgnLCAndScsIGJ1ZiA9PiB7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKTtcbiAgcmV0dXJuICd1JyArIGRlY29kZXIuZGVjb2RlKGJ1Zik7XG59LCBzdHIgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIHJldHVybiBlbmNvZGVyLmVuY29kZShzdHIuc3Vic3RyaW5nKDEpKTtcbn0pO1xuY29uc3QgYXNjaWkgPSBjcmVhdGVDb2RlYygnYXNjaWknLCAnYScsIGJ1ZiA9PiB7XG4gIGxldCBzdHJpbmcgPSAnYSc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufSwgc3RyID0+IHtcbiAgc3RyID0gc3RyLnN1YnN0cmluZygxKTtcbiAgY29uc3QgYnVmID0gYWxsb2MuYWxsb2NVbnNhZmUoc3RyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIGJ1Zjtcbn0pO1xuY29uc3QgQkFTRVMgPSB7XG4gIHV0Zjg6IHN0cmluZyxcbiAgJ3V0Zi04Jzogc3RyaW5nLFxuICBoZXg6IGJhc2ljcy5iYXNlcy5iYXNlMTYsXG4gIGxhdGluMTogYXNjaWksXG4gIGFzY2lpOiBhc2NpaSxcbiAgYmluYXJ5OiBhc2NpaSxcbiAgLi4uYmFzaWNzLmJhc2VzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJBU0VTO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/util/bases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/src/cid-util.js":
/*!*******************************************!*\
  !*** ./node_modules/cids/src/cid-util.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst mh = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\n\nconst CIDUtil = {\n  /**\n   * Test if the given input is a valid CID object.\n   * Returns an error message if it is not.\n   * Returns undefined if it is a valid CID.\n   *\n   * @param {any} other\n   * @returns {string|undefined}\n   */\n  checkCIDComponents: function (other) {\n    if (other == null) {\n      return 'null values are not valid CIDs'\n    }\n\n    if (!(other.version === 0 || other.version === 1)) {\n      return 'Invalid version, must be a number equal to 1 or 0'\n    }\n\n    if (typeof other.codec !== 'string') {\n      return 'codec must be string'\n    }\n\n    if (other.version === 0) {\n      if (other.codec !== 'dag-pb') {\n        return \"codec must be 'dag-pb' for CIDv0\"\n      }\n      if (other.multibaseName !== 'base58btc') {\n        return \"multibaseName must be 'base58btc' for CIDv0\"\n      }\n    }\n\n    if (!(other.multihash instanceof Uint8Array)) {\n      return 'multihash must be a Uint8Array'\n    }\n\n    try {\n      mh.validate(other.multihash)\n    } catch (err) {\n      let errorMsg = err.message\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\n        errorMsg = 'Multihash validation failed'\n      }\n      return errorMsg\n    }\n  }\n}\n\nmodule.exports = CIDUtil\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkcy9zcmMvY2lkLXV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosV0FBVyxtQkFBTyxDQUFDLGtFQUFhOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1jdWx0Ly4vbm9kZV9tb2R1bGVzL2NpZHMvc3JjL2NpZC11dGlsLmpzP2Y5NzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IG1oID0gcmVxdWlyZSgnbXVsdGloYXNoZXMnKVxuXG5jb25zdCBDSURVdGlsID0ge1xuICAvKipcbiAgICogVGVzdCBpZiB0aGUgZ2l2ZW4gaW5wdXQgaXMgYSB2YWxpZCBDSUQgb2JqZWN0LlxuICAgKiBSZXR1cm5zIGFuIGVycm9yIG1lc3NhZ2UgaWYgaXQgaXMgbm90LlxuICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiBpdCBpcyBhIHZhbGlkIENJRC5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IG90aGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKi9cbiAgY2hlY2tDSURDb21wb25lbnRzOiBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICBpZiAob3RoZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdudWxsIHZhbHVlcyBhcmUgbm90IHZhbGlkIENJRHMnXG4gICAgfVxuXG4gICAgaWYgKCEob3RoZXIudmVyc2lvbiA9PT0gMCB8fCBvdGhlci52ZXJzaW9uID09PSAxKSkge1xuICAgICAgcmV0dXJuICdJbnZhbGlkIHZlcnNpb24sIG11c3QgYmUgYSBudW1iZXIgZXF1YWwgdG8gMSBvciAwJ1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3RoZXIuY29kZWMgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gJ2NvZGVjIG11c3QgYmUgc3RyaW5nJ1xuICAgIH1cblxuICAgIGlmIChvdGhlci52ZXJzaW9uID09PSAwKSB7XG4gICAgICBpZiAob3RoZXIuY29kZWMgIT09ICdkYWctcGInKSB7XG4gICAgICAgIHJldHVybiBcImNvZGVjIG11c3QgYmUgJ2RhZy1wYicgZm9yIENJRHYwXCJcbiAgICAgIH1cbiAgICAgIGlmIChvdGhlci5tdWx0aWJhc2VOYW1lICE9PSAnYmFzZTU4YnRjJykge1xuICAgICAgICByZXR1cm4gXCJtdWx0aWJhc2VOYW1lIG11c3QgYmUgJ2Jhc2U1OGJ0YycgZm9yIENJRHYwXCJcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIShvdGhlci5tdWx0aWhhc2ggaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgcmV0dXJuICdtdWx0aWhhc2ggbXVzdCBiZSBhIFVpbnQ4QXJyYXknXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIG1oLnZhbGlkYXRlKG90aGVyLm11bHRpaGFzaClcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxldCBlcnJvck1zZyA9IGVyci5tZXNzYWdlXG4gICAgICBpZiAoIWVycm9yTXNnKSB7IC8vIEp1c3QgaW4gY2FzZSBtaC52YWxpZGF0ZSgpIHRocm93cyBhbiBlcnJvciB3aXRoIGVtcHR5IGVycm9yIG1lc3NhZ2VcbiAgICAgICAgZXJyb3JNc2cgPSAnTXVsdGloYXNoIHZhbGlkYXRpb24gZmFpbGVkJ1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVycm9yTXNnXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ0lEVXRpbFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/src/cid-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cids/src/index.js":
/*!****************************************!*\
  !*** ./node_modules/cids/src/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst mh = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\")\nconst multicodec = __webpack_require__(/*! multicodec */ \"(ssr)/./node_modules/multicodec/src/index.js\")\nconst CIDUtil = __webpack_require__(/*! ./cid-util */ \"(ssr)/./node_modules/cids/src/cid-util.js\")\nconst { concat: uint8ArrayConcat } = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/concat.js\")\nconst { toString: uint8ArrayToString } = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/to-string.js\")\nconst { equals: uint8ArrayEquals } = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/cids/node_modules/uint8arrays/cjs/src/equals.js\")\n\nconst codecs = multicodec.nameToCode\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\n  p[codecs[name]] = name\n  return p\n}, /** @type {Record<CodecCode, CodecName>} */({}))\n\nconst symbol = Symbol.for('@ipld/js-cid/CID')\n\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor (version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version\n\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.codec\n\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.multihash\n\n    Object.defineProperty(this, symbol, { value: true })\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid = /** @type {CID} */(version)\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = cid.multihash\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\n      return\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version)\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version)\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = baseName\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      Object.defineProperty(this, 'string', { value: version })\n      return\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16)\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = 'base32'\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      return\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    this.version = version\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec]\n    }\n\n    this.codec = /** @type {CodecName} */ (codec)\n\n    this.multihash = /** @type {Uint8Array} */ (multihash)\n\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n  get bytes () {\n    // @ts-ignore\n    let bytes = this._bytes\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec)\n        bytes = uint8ArrayConcat([\n          [1], codec, this.multihash\n        ], 1 + codec.byteLength + this.multihash.byteLength)\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this Uint8Array so it doesn't have to be recreated\n      Object.defineProperty(this, '_bytes', { value: bytes })\n    }\n\n    return bytes\n  }\n\n  /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */\n  get prefix () {\n    const codec = multicodec.getCodeVarint(this.codec)\n    const multihash = mh.prefix(this.multihash)\n    const prefix = uint8ArrayConcat([\n      [this.version], codec, multihash\n    ], 1 + codec.byteLength + multihash.byteLength)\n\n    return prefix\n  }\n\n  /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */\n  get code () {\n    return codecs[this.codec]\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new CID(1, this.codec, this.multihash, this.multibaseName)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base = this.multibaseName) {\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string\n    }\n    let str\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n      }\n      str = mh.toB58String(this.multihash)\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\n    } else {\n      throw new Error('unsupported version')\n    }\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', { value: str })\n    }\n    return str\n  }\n\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return 'CID(' + this.toString() + ')'\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      uint8ArrayEquals(this.multihash, other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */\n  static validateCID (other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */\n  static isCID (value) {\n    return value instanceof CID || Boolean(value && value[symbol])\n  }\n}\n\nCID.codecs = codecs\n\nmodule.exports = CID\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cids/src/index.js\n");

/***/ })

};
;