"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cid-tool";
exports.ids = ["vendor-chunks/cid-tool"];
exports.modules = {

/***/ "(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js":
/*!*********************************************************************!*\
  !*** ./node_modules/cid-tool/node_modules/uint8arrays/to-string.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst bases = __webpack_require__(/*! ./util/bases */ \"(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js\")\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n\nmodule.exports = toString\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3RvLXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixjQUFjLG1CQUFPLENBQUMsMEZBQWM7O0FBRXBDO0FBQ0EsYUFBYSwyQ0FBMkM7QUFDeEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxvQkFBb0I7QUFDL0IsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZDQUE2QyxTQUFTO0FBQ3REOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1jdWx0Ly4vbm9kZV9tb2R1bGVzL2NpZC10b29sL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy90by1zdHJpbmcuanM/Yjc1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZXMgPSByZXF1aXJlKCcuL3V0aWwvYmFzZXMnKVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdXRpbC9iYXNlcycpLlN1cHBvcnRlZEVuY29kaW5nc30gU3VwcG9ydGVkRW5jb2RpbmdzXG4gKi9cblxuLyoqXG4gKiBUdXJucyBhIGBVaW50OEFycmF5YCBpbnRvIGEgc3RyaW5nLlxuICpcbiAqIFN1cHBvcnRzIGB1dGY4YCwgYHV0Zi04YCBhbmQgYW55IGVuY29kaW5nIHN1cHBvcnRlZCBieSB0aGUgbXVsdGliYXNlIG1vZHVsZS5cbiAqXG4gKiBBbHNvIGBhc2NpaWAgd2hpY2ggaXMgc2ltaWxhciB0byBub2RlJ3MgJ2JpbmFyeScgZW5jb2RpbmcuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBhcnJheSAtIFRoZSBhcnJheSB0byB0dXJuIGludG8gYSBzdHJpbmdcbiAqIEBwYXJhbSB7U3VwcG9ydGVkRW5jb2RpbmdzfSBbZW5jb2Rpbmc9dXRmOF0gLSBUaGUgZW5jb2RpbmcgdG8gdXNlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAoYXJyYXksIGVuY29kaW5nID0gJ3V0ZjgnKSB7XG4gIGNvbnN0IGJhc2UgPSBiYXNlc1tlbmNvZGluZ11cblxuICBpZiAoIWJhc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGVuY29kaW5nIFwiJHtlbmNvZGluZ31cImApXG4gIH1cblxuICAvLyBzdHJpcCBtdWx0aWJhc2UgcHJlZml4XG4gIHJldHVybiBiYXNlLmVuY29kZXIuZW5jb2RlKGFycmF5KS5zdWJzdHJpbmcoMSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZ1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js":
/*!**********************************************************************!*\
  !*** ./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("  \n\nconst { bases } = __webpack_require__(/*! multiformats/basics */ \"(ssr)/./node_modules/multiformats/cjs/src/basics.js\")\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL3V0aWwvYmFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsRUFBYzs7QUFFZCxRQUFRLFFBQVEsRUFBRSxtQkFBTyxDQUFDLGdGQUFxQjs7QUFFL0M7QUFDQSxhQUFhLDREQUE0RDtBQUN6RTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyw2QkFBNkI7QUFDeEMsV0FBVyw2QkFBNkI7QUFDeEMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLGFBQWEseUVBQXlFO0FBQ3RGOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1jdWx0Ly4vbm9kZV9tb2R1bGVzL2NpZC10b29sL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy91dGlsL2Jhc2VzLmpzPzViOGYiXSwic291cmNlc0NvbnRlbnQiOlsiICAndXNlIHN0cmljdCdcblxuY29uc3QgeyBiYXNlcyB9ID0gcmVxdWlyZSgnbXVsdGlmb3JtYXRzL2Jhc2ljcycpXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbXVsdGlmb3JtYXRzL2Jhc2VzL2ludGVyZmFjZScpLk11bHRpYmFzZUNvZGVjPGFueT59IE11bHRpYmFzZUNvZGVjXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeFxuICogQHBhcmFtIHsoYnVmOiBVaW50OEFycmF5KSA9PiBzdHJpbmd9IGVuY29kZVxuICogQHBhcmFtIHsoc3RyOiBzdHJpbmcpID0+IFVpbnQ4QXJyYXl9IGRlY29kZVxuICogQHJldHVybnMge011bHRpYmFzZUNvZGVjfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDb2RlYyAobmFtZSwgcHJlZml4LCBlbmNvZGUsIGRlY29kZSkge1xuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgcHJlZml4LFxuICAgIGVuY29kZXI6IHtcbiAgICAgIG5hbWUsXG4gICAgICBwcmVmaXgsXG4gICAgICBlbmNvZGVcbiAgICB9LFxuICAgIGRlY29kZXI6IHtcbiAgICAgIGRlY29kZVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBzdHJpbmcgPSBjcmVhdGVDb2RlYygndXRmOCcsICd1JywgKGJ1ZikgPT4ge1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGY4JylcbiAgcmV0dXJuICd1JyArIGRlY29kZXIuZGVjb2RlKGJ1Zilcbn0sIChzdHIpID0+IHtcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpXG4gIHJldHVybiBlbmNvZGVyLmVuY29kZShzdHIuc3Vic3RyaW5nKDEpKVxufSlcblxuY29uc3QgYXNjaWkgPSBjcmVhdGVDb2RlYygnYXNjaWknLCAnYScsIChidWYpID0+IHtcbiAgbGV0IHN0cmluZyA9ICdhJ1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiBzdHJpbmdcbn0sIChzdHIpID0+IHtcbiAgc3RyID0gc3RyLnN1YnN0cmluZygxKVxuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmW2ldID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgfVxuXG4gIHJldHVybiBidWZcbn0pXG5cbi8qKlxuICogQHR5cGVkZWYgeyd1dGY4JyB8ICd1dGYtOCcgfCAnaGV4JyB8ICdsYXRpbjEnIHwgJ2FzY2lpJyB8ICdiaW5hcnknIHwga2V5b2YgYmFzZXMgfSBTdXBwb3J0ZWRFbmNvZGluZ3NcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtSZWNvcmQ8U3VwcG9ydGVkRW5jb2RpbmdzLCBNdWx0aWJhc2VDb2RlYz59XG4gKi9cbmNvbnN0IEJBU0VTID0ge1xuICAndXRmOCc6IHN0cmluZyxcbiAgJ3V0Zi04Jzogc3RyaW5nLFxuICAnaGV4JzogYmFzZXMuYmFzZTE2LFxuICAnbGF0aW4xJzogYXNjaWksXG4gICdhc2NpaSc6IGFzY2lpLFxuICAnYmluYXJ5JzogYXNjaWksXG5cbiAgLi4uYmFzZXNcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCQVNFU1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/util/bases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/base32.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/base32.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\")\n// @ts-ignore no types\nconst explain = __webpack_require__(/*! explain-error */ \"(ssr)/./node_modules/explain-error/index.js\")\n\n/**\n * @param {CID | string | Uint8Array} cid\n */\nmodule.exports = function base32 (cid) {\n  try {\n    cid = new CID(cid)\n  } catch (err) {\n    throw explain(err, `invalid cid: ${cid}`)\n  }\n\n  if (cid.version !== 1) {\n    cid = cid.toV1()\n  }\n\n  return cid.toBaseEncodedString('base32')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZTMyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLFlBQVksbUJBQU8sQ0FBQyxvREFBTTtBQUMxQjtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFlOztBQUV2QztBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLHVDQUF1QyxJQUFJO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZTMyLmpzPzgwNjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IENJRCA9IHJlcXVpcmUoJ2NpZHMnKVxuLy8gQHRzLWlnbm9yZSBubyB0eXBlc1xuY29uc3QgZXhwbGFpbiA9IHJlcXVpcmUoJ2V4cGxhaW4tZXJyb3InKVxuXG4vKipcbiAqIEBwYXJhbSB7Q0lEIHwgc3RyaW5nIHwgVWludDhBcnJheX0gY2lkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmFzZTMyIChjaWQpIHtcbiAgdHJ5IHtcbiAgICBjaWQgPSBuZXcgQ0lEKGNpZClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgZXhwbGFpbihlcnIsIGBpbnZhbGlkIGNpZDogJHtjaWR9YClcbiAgfVxuXG4gIGlmIChjaWQudmVyc2lvbiAhPT0gMSkge1xuICAgIGNpZCA9IGNpZC50b1YxKClcbiAgfVxuXG4gIHJldHVybiBjaWQudG9CYXNlRW5jb2RlZFN0cmluZygnYmFzZTMyJylcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/base32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/bases.js":
/*!*************************************************!*\
  !*** ./node_modules/cid-tool/src/core/bases.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\")\n\nmodule.exports = function bases () {\n  const output = []\n\n  for (const base of Object.values(multibase.names)) {\n    output.push({ name: base.name, code: base.code })\n  }\n\n  return output\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvYmFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosa0JBQWtCLG1CQUFPLENBQUMsOERBQVc7O0FBRXJDO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BEOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy9jaWQtdG9vbC9zcmMvY29yZS9iYXNlcy5qcz9iMWEwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBtdWx0aWJhc2UgPSByZXF1aXJlKCdtdWx0aWJhc2UnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJhc2VzICgpIHtcbiAgY29uc3Qgb3V0cHV0ID0gW11cblxuICBmb3IgKGNvbnN0IGJhc2Ugb2YgT2JqZWN0LnZhbHVlcyhtdWx0aWJhc2UubmFtZXMpKSB7XG4gICAgb3V0cHV0LnB1c2goeyBuYW1lOiBiYXNlLm5hbWUsIGNvZGU6IGJhc2UuY29kZSB9KVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/bases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/codecs.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/codecs.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\")\n\nmodule.exports = function codecs () {\n  const output = []\n\n  for (const [key, value] of Object.entries(CID.codecs)) {\n    output.push({ name: key, code: value })\n  }\n\n  return output\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvY29kZWNzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLFlBQVksbUJBQU8sQ0FBQyxvREFBTTs7QUFFMUI7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQix3QkFBd0I7QUFDMUM7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1jdWx0Ly4vbm9kZV9tb2R1bGVzL2NpZC10b29sL3NyYy9jb3JlL2NvZGVjcy5qcz82ZDViIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBDSUQgPSByZXF1aXJlKCdjaWRzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb2RlY3MgKCkge1xuICBjb25zdCBvdXRwdXQgPSBbXVxuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENJRC5jb2RlY3MpKSB7XG4gICAgb3V0cHV0LnB1c2goeyBuYW1lOiBrZXksIGNvZGU6IHZhbHVlIH0pXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/codecs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/format.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/format.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst CID = __webpack_require__(/*! cids */ \"(ssr)/./node_modules/cids/src/index.js\")\nconst bases = __webpack_require__(/*! ./bases */ \"(ssr)/./node_modules/cid-tool/src/core/bases.js\")\nconst codecs = __webpack_require__(/*! ./codecs */ \"(ssr)/./node_modules/cid-tool/src/core/codecs.js\")\n// @ts-ignore no types\nconst explain = __webpack_require__(/*! explain-error */ \"(ssr)/./node_modules/explain-error/index.js\")\nconst multibase = __webpack_require__(/*! multibase */ \"(ssr)/./node_modules/multibase/src/index.js\")\nconst multihash = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\nconst uint8ArrayToString = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/cid-tool/node_modules/uint8arrays/to-string.js\")\n\n/**\n * @typedef {import('multibase').BaseName} BaseName\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n */\n\n/**\n * @param {CID | string | Uint8Array} cid\n * @param {import('./types').FormatOptions} options\n */\nmodule.exports = function format (cid, options) {\n  options = options || {}\n\n  let formatStr = options.format || '%s'\n\n  if (formatStr === 'prefix') {\n    formatStr = '%P'\n  }\n\n  if (!isString(formatStr) || formatStr.indexOf('%') === -1) {\n    throw new Error(`invalid format string: ${formatStr}`)\n  }\n\n  const originalCid = cid\n\n  try {\n    cid = new CID(cid)\n  } catch (err) {\n    throw explain(err, `invalid cid: ${cid}`)\n  }\n\n  if (options.cidVersion != null && cid.version !== options.cidVersion) {\n    if (options.cidVersion === 0) {\n      cid = cid.toV0()\n    } else if (options.cidVersion === 1) {\n      cid = cid.toV1()\n    } else {\n      throw new Error(`invalid cid version: ${options.cidVersion}`)\n    }\n  }\n\n  /**\n   * @type {BaseName}\n   */\n  let base = 'base58btc'\n\n  if (options.base) {\n    // Validate passed base name/code\n    base = findBase(options.base).name\n  } else if (isString(originalCid)) {\n    // Use base of input CID if string\n    base = multibase.isEncoded(originalCid) || base\n  }\n\n  return formatStr.replace(/%([a-zA-Z%])/g, replacer(cid, base))\n}\n\n/**\n * @param {*} obj\n * @returns {obj is String}\n */\nfunction isString (obj) {\n  return Object.prototype.toString.call(obj) === '[object String]'\n}\n\n/**\n * @param {CID} cid\n * @param {BaseName} base\n * @returns {(match: any, specifier: string) => string}\n */\nfunction replacer (cid, base) {\n  /**\n   * @param {*} match\n   * @param {string} specifier\n   */\n  const replace = (match, specifier) => {\n    switch (specifier) {\n      case '%':\n        return '%'\n      case 'b': // base name\n        return base\n      case 'B': // base code\n        return findBase(base).code\n      case 'v': // version string\n        return `cidv${cid.version}`\n      case 'V': // version num\n        return cid.version.toString()\n      case 'c': // codec name\n        return cid.codec\n      case 'C': // codec code\n        return findCodec(cid).toString()\n      case 'h': // hash fun name\n        return multihash.decode(cid.multihash).name\n      case 'H': // hash fun code\n        return multihash.decode(cid.multihash).code.toString()\n      case 'L': // hash length\n        return multihash.decode(cid.multihash).length.toString()\n      case 'm': // multihash encoded in base %b\n        return uint8ArrayToString(multibase.encode(base, cid.multihash))\n      case 'M': // multihash encoded in base %b without base prefix\n        return uint8ArrayToString(cid.multihash, base)\n      case 'd': // hash digest encoded in base %b\n        return uint8ArrayToString(multibase.encode(base, multihash.decode(cid.multihash).digest))\n      case 'D': // hash digest encoded in base %b without base prefix\n        return uint8ArrayToString(multihash.decode(cid.multihash).digest, base)\n      case 's': // cid string encoded in base %b\n        return cid.toString(base)\n      case 'S': // cid string without base prefix\n        return cid.version === 1\n          ? cid.toString(base).slice(1)\n          : uint8ArrayToString(cid.bytes, base)\n      case 'P': // prefix\n        return prefix(cid)\n\n      default:\n        throw new Error(`unrecognized specifier in format string: ${specifier}`)\n    }\n  }\n\n  return replace\n}\n\n/**\n * @param {BaseNameOrCode} nameOrCode\n */\nfunction findBase (nameOrCode) {\n  const baseNameCode = bases().find(b => (b.code === nameOrCode) || b.name === nameOrCode)\n\n  if (!baseNameCode) {\n    throw new Error(`invalid multibase: ${nameOrCode}`)\n  }\n\n  return baseNameCode\n}\n\n/**\n * @param {CID} cid\n */\nfunction findCodec (cid) {\n  const codec = codecs().find(c => c.name === cid.codec)\n\n  if (!codec) {\n    throw new Error(`invalid codec: ${cid.codec}`)\n  }\n\n  return codec.code\n}\n\n/**\n * @param {CID} cid\n */\nfunction prefix (cid) {\n  const { name, length } = multihash.decode(cid.multihash)\n  return `cidv${cid.version}-${cid.codec}-${name}-${length}`\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLFlBQVksbUJBQU8sQ0FBQyxvREFBTTtBQUMxQixjQUFjLG1CQUFPLENBQUMsZ0VBQVM7QUFDL0IsZUFBZSxtQkFBTyxDQUFDLGtFQUFVO0FBQ2pDO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsa0VBQWU7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsOERBQVc7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMsa0VBQWE7QUFDdkMsMkJBQTJCLG1CQUFPLENBQUMsa0dBQXVCOztBQUUxRDtBQUNBLGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsb0NBQW9DO0FBQ2pEOztBQUVBO0FBQ0EsV0FBVywyQkFBMkI7QUFDdEMsV0FBVyxpQ0FBaUM7QUFDNUM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxVQUFVO0FBQ3hEOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osdUNBQXVDLElBQUk7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOLDhDQUE4QyxtQkFBbUI7QUFDakU7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLFVBQVU7QUFDckIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWEsR0FBRztBQUNoQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9FQUFvRSxVQUFVO0FBQzlFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyxXQUFXO0FBQ3JEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDLFVBQVU7QUFDaEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0EsVUFBVSxlQUFlO0FBQ3pCLGdCQUFnQixZQUFZLEdBQUcsVUFBVSxHQUFHLEtBQUssR0FBRyxPQUFPO0FBQzNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvZm9ybWF0LmpzPzY4OTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IENJRCA9IHJlcXVpcmUoJ2NpZHMnKVxuY29uc3QgYmFzZXMgPSByZXF1aXJlKCcuL2Jhc2VzJylcbmNvbnN0IGNvZGVjcyA9IHJlcXVpcmUoJy4vY29kZWNzJylcbi8vIEB0cy1pZ25vcmUgbm8gdHlwZXNcbmNvbnN0IGV4cGxhaW4gPSByZXF1aXJlKCdleHBsYWluLWVycm9yJylcbmNvbnN0IG11bHRpYmFzZSA9IHJlcXVpcmUoJ211bHRpYmFzZScpXG5jb25zdCBtdWx0aWhhc2ggPSByZXF1aXJlKCdtdWx0aWhhc2hlcycpXG5jb25zdCB1aW50OEFycmF5VG9TdHJpbmcgPSByZXF1aXJlKCd1aW50OGFycmF5cy90by1zdHJpbmcnKVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ211bHRpYmFzZScpLkJhc2VOYW1lfSBCYXNlTmFtZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbXVsdGliYXNlJykuQmFzZU5hbWVPckNvZGV9IEJhc2VOYW1lT3JDb2RlXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0NJRCB8IHN0cmluZyB8IFVpbnQ4QXJyYXl9IGNpZFxuICogQHBhcmFtIHtpbXBvcnQoJy4vdHlwZXMnKS5Gb3JtYXRPcHRpb25zfSBvcHRpb25zXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9ybWF0IChjaWQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBsZXQgZm9ybWF0U3RyID0gb3B0aW9ucy5mb3JtYXQgfHwgJyVzJ1xuXG4gIGlmIChmb3JtYXRTdHIgPT09ICdwcmVmaXgnKSB7XG4gICAgZm9ybWF0U3RyID0gJyVQJ1xuICB9XG5cbiAgaWYgKCFpc1N0cmluZyhmb3JtYXRTdHIpIHx8IGZvcm1hdFN0ci5pbmRleE9mKCclJykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGZvcm1hdCBzdHJpbmc6ICR7Zm9ybWF0U3RyfWApXG4gIH1cblxuICBjb25zdCBvcmlnaW5hbENpZCA9IGNpZFxuXG4gIHRyeSB7XG4gICAgY2lkID0gbmV3IENJRChjaWQpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IGV4cGxhaW4oZXJyLCBgaW52YWxpZCBjaWQ6ICR7Y2lkfWApXG4gIH1cblxuICBpZiAob3B0aW9ucy5jaWRWZXJzaW9uICE9IG51bGwgJiYgY2lkLnZlcnNpb24gIT09IG9wdGlvbnMuY2lkVmVyc2lvbikge1xuICAgIGlmIChvcHRpb25zLmNpZFZlcnNpb24gPT09IDApIHtcbiAgICAgIGNpZCA9IGNpZC50b1YwKClcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuY2lkVmVyc2lvbiA9PT0gMSkge1xuICAgICAgY2lkID0gY2lkLnRvVjEoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgY2lkIHZlcnNpb246ICR7b3B0aW9ucy5jaWRWZXJzaW9ufWApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtCYXNlTmFtZX1cbiAgICovXG4gIGxldCBiYXNlID0gJ2Jhc2U1OGJ0YydcblxuICBpZiAob3B0aW9ucy5iYXNlKSB7XG4gICAgLy8gVmFsaWRhdGUgcGFzc2VkIGJhc2UgbmFtZS9jb2RlXG4gICAgYmFzZSA9IGZpbmRCYXNlKG9wdGlvbnMuYmFzZSkubmFtZVxuICB9IGVsc2UgaWYgKGlzU3RyaW5nKG9yaWdpbmFsQ2lkKSkge1xuICAgIC8vIFVzZSBiYXNlIG9mIGlucHV0IENJRCBpZiBzdHJpbmdcbiAgICBiYXNlID0gbXVsdGliYXNlLmlzRW5jb2RlZChvcmlnaW5hbENpZCkgfHwgYmFzZVxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdFN0ci5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgcmVwbGFjZXIoY2lkLCBiYXNlKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybnMge29iaiBpcyBTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q0lEfSBjaWRcbiAqIEBwYXJhbSB7QmFzZU5hbWV9IGJhc2VcbiAqIEByZXR1cm5zIHsobWF0Y2g6IGFueSwgc3BlY2lmaWVyOiBzdHJpbmcpID0+IHN0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZXIgKGNpZCwgYmFzZSkge1xuICAvKipcbiAgICogQHBhcmFtIHsqfSBtYXRjaFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3BlY2lmaWVyXG4gICAqL1xuICBjb25zdCByZXBsYWNlID0gKG1hdGNoLCBzcGVjaWZpZXIpID0+IHtcbiAgICBzd2l0Y2ggKHNwZWNpZmllcikge1xuICAgICAgY2FzZSAnJSc6XG4gICAgICAgIHJldHVybiAnJSdcbiAgICAgIGNhc2UgJ2InOiAvLyBiYXNlIG5hbWVcbiAgICAgICAgcmV0dXJuIGJhc2VcbiAgICAgIGNhc2UgJ0InOiAvLyBiYXNlIGNvZGVcbiAgICAgICAgcmV0dXJuIGZpbmRCYXNlKGJhc2UpLmNvZGVcbiAgICAgIGNhc2UgJ3YnOiAvLyB2ZXJzaW9uIHN0cmluZ1xuICAgICAgICByZXR1cm4gYGNpZHYke2NpZC52ZXJzaW9ufWBcbiAgICAgIGNhc2UgJ1YnOiAvLyB2ZXJzaW9uIG51bVxuICAgICAgICByZXR1cm4gY2lkLnZlcnNpb24udG9TdHJpbmcoKVxuICAgICAgY2FzZSAnYyc6IC8vIGNvZGVjIG5hbWVcbiAgICAgICAgcmV0dXJuIGNpZC5jb2RlY1xuICAgICAgY2FzZSAnQyc6IC8vIGNvZGVjIGNvZGVcbiAgICAgICAgcmV0dXJuIGZpbmRDb2RlYyhjaWQpLnRvU3RyaW5nKClcbiAgICAgIGNhc2UgJ2gnOiAvLyBoYXNoIGZ1biBuYW1lXG4gICAgICAgIHJldHVybiBtdWx0aWhhc2guZGVjb2RlKGNpZC5tdWx0aWhhc2gpLm5hbWVcbiAgICAgIGNhc2UgJ0gnOiAvLyBoYXNoIGZ1biBjb2RlXG4gICAgICAgIHJldHVybiBtdWx0aWhhc2guZGVjb2RlKGNpZC5tdWx0aWhhc2gpLmNvZGUudG9TdHJpbmcoKVxuICAgICAgY2FzZSAnTCc6IC8vIGhhc2ggbGVuZ3RoXG4gICAgICAgIHJldHVybiBtdWx0aWhhc2guZGVjb2RlKGNpZC5tdWx0aWhhc2gpLmxlbmd0aC50b1N0cmluZygpXG4gICAgICBjYXNlICdtJzogLy8gbXVsdGloYXNoIGVuY29kZWQgaW4gYmFzZSAlYlxuICAgICAgICByZXR1cm4gdWludDhBcnJheVRvU3RyaW5nKG11bHRpYmFzZS5lbmNvZGUoYmFzZSwgY2lkLm11bHRpaGFzaCkpXG4gICAgICBjYXNlICdNJzogLy8gbXVsdGloYXNoIGVuY29kZWQgaW4gYmFzZSAlYiB3aXRob3V0IGJhc2UgcHJlZml4XG4gICAgICAgIHJldHVybiB1aW50OEFycmF5VG9TdHJpbmcoY2lkLm11bHRpaGFzaCwgYmFzZSlcbiAgICAgIGNhc2UgJ2QnOiAvLyBoYXNoIGRpZ2VzdCBlbmNvZGVkIGluIGJhc2UgJWJcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb1N0cmluZyhtdWx0aWJhc2UuZW5jb2RlKGJhc2UsIG11bHRpaGFzaC5kZWNvZGUoY2lkLm11bHRpaGFzaCkuZGlnZXN0KSlcbiAgICAgIGNhc2UgJ0QnOiAvLyBoYXNoIGRpZ2VzdCBlbmNvZGVkIGluIGJhc2UgJWIgd2l0aG91dCBiYXNlIHByZWZpeFxuICAgICAgICByZXR1cm4gdWludDhBcnJheVRvU3RyaW5nKG11bHRpaGFzaC5kZWNvZGUoY2lkLm11bHRpaGFzaCkuZGlnZXN0LCBiYXNlKVxuICAgICAgY2FzZSAncyc6IC8vIGNpZCBzdHJpbmcgZW5jb2RlZCBpbiBiYXNlICViXG4gICAgICAgIHJldHVybiBjaWQudG9TdHJpbmcoYmFzZSlcbiAgICAgIGNhc2UgJ1MnOiAvLyBjaWQgc3RyaW5nIHdpdGhvdXQgYmFzZSBwcmVmaXhcbiAgICAgICAgcmV0dXJuIGNpZC52ZXJzaW9uID09PSAxXG4gICAgICAgICAgPyBjaWQudG9TdHJpbmcoYmFzZSkuc2xpY2UoMSlcbiAgICAgICAgICA6IHVpbnQ4QXJyYXlUb1N0cmluZyhjaWQuYnl0ZXMsIGJhc2UpXG4gICAgICBjYXNlICdQJzogLy8gcHJlZml4XG4gICAgICAgIHJldHVybiBwcmVmaXgoY2lkKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVucmVjb2duaXplZCBzcGVjaWZpZXIgaW4gZm9ybWF0IHN0cmluZzogJHtzcGVjaWZpZXJ9YClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVwbGFjZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QmFzZU5hbWVPckNvZGV9IG5hbWVPckNvZGVcbiAqL1xuZnVuY3Rpb24gZmluZEJhc2UgKG5hbWVPckNvZGUpIHtcbiAgY29uc3QgYmFzZU5hbWVDb2RlID0gYmFzZXMoKS5maW5kKGIgPT4gKGIuY29kZSA9PT0gbmFtZU9yQ29kZSkgfHwgYi5uYW1lID09PSBuYW1lT3JDb2RlKVxuXG4gIGlmICghYmFzZU5hbWVDb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG11bHRpYmFzZTogJHtuYW1lT3JDb2RlfWApXG4gIH1cblxuICByZXR1cm4gYmFzZU5hbWVDb2RlXG59XG5cbi8qKlxuICogQHBhcmFtIHtDSUR9IGNpZFxuICovXG5mdW5jdGlvbiBmaW5kQ29kZWMgKGNpZCkge1xuICBjb25zdCBjb2RlYyA9IGNvZGVjcygpLmZpbmQoYyA9PiBjLm5hbWUgPT09IGNpZC5jb2RlYylcblxuICBpZiAoIWNvZGVjKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGNvZGVjOiAke2NpZC5jb2RlY31gKVxuICB9XG5cbiAgcmV0dXJuIGNvZGVjLmNvZGVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NJRH0gY2lkXG4gKi9cbmZ1bmN0aW9uIHByZWZpeCAoY2lkKSB7XG4gIGNvbnN0IHsgbmFtZSwgbGVuZ3RoIH0gPSBtdWx0aWhhc2guZGVjb2RlKGNpZC5tdWx0aWhhc2gpXG4gIHJldHVybiBgY2lkdiR7Y2lkLnZlcnNpb259LSR7Y2lkLmNvZGVjfS0ke25hbWV9LSR7bGVuZ3RofWBcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/hashes.js":
/*!**************************************************!*\
  !*** ./node_modules/cid-tool/src/core/hashes.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst multihash = __webpack_require__(/*! multihashes */ \"(ssr)/./node_modules/multihashes/src/index.js\")\n\n// TODO: list only safe hashes https://github.com/ipfs/go-verifcid\nmodule.exports = function hashes () {\n  const output = []\n\n  for (const [name, code] of Object.entries(multihash.names)) {\n    output.push({ name, code })\n  }\n\n  return output\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaGFzaGVzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQixtQkFBTyxDQUFDLGtFQUFhOztBQUV2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsWUFBWTtBQUM5Qjs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaGFzaGVzLmpzP2JhMTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IG11bHRpaGFzaCA9IHJlcXVpcmUoJ211bHRpaGFzaGVzJylcblxuLy8gVE9ETzogbGlzdCBvbmx5IHNhZmUgaGFzaGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9pcGZzL2dvLXZlcmlmY2lkXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc2hlcyAoKSB7XG4gIGNvbnN0IG91dHB1dCA9IFtdXG5cbiAgZm9yIChjb25zdCBbbmFtZSwgY29kZV0gb2YgT2JqZWN0LmVudHJpZXMobXVsdGloYXNoLm5hbWVzKSkge1xuICAgIG91dHB1dC5wdXNoKHsgbmFtZSwgY29kZSB9KVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/hashes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/core/index.js":
/*!*************************************************!*\
  !*** ./node_modules/cid-tool/src/core/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nexports.base32 = __webpack_require__(/*! ./base32 */ \"(ssr)/./node_modules/cid-tool/src/core/base32.js\")\nexports.bases = __webpack_require__(/*! ./bases */ \"(ssr)/./node_modules/cid-tool/src/core/bases.js\")\nexports.codecs = __webpack_require__(/*! ./codecs */ \"(ssr)/./node_modules/cid-tool/src/core/codecs.js\")\nexports.format = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/cid-tool/src/core/format.js\")\nexports.hashes = __webpack_require__(/*! ./hashes */ \"(ssr)/./node_modules/cid-tool/src/core/hashes.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2NvcmUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosd0dBQW9DO0FBQ3BDLHFHQUFrQztBQUNsQyx3R0FBb0M7QUFDcEMsd0dBQW9DO0FBQ3BDLHdHQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1jdWx0Ly4vbm9kZV9tb2R1bGVzL2NpZC10b29sL3NyYy9jb3JlL2luZGV4LmpzPzEwMGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYmFzZTMyID0gcmVxdWlyZSgnLi9iYXNlMzInKVxuZXhwb3J0cy5iYXNlcyA9IHJlcXVpcmUoJy4vYmFzZXMnKVxuZXhwb3J0cy5jb2RlY3MgPSByZXF1aXJlKCcuL2NvZGVjcycpXG5leHBvcnRzLmZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0JylcbmV4cG9ydHMuaGFzaGVzID0gcmVxdWlyZSgnLi9oYXNoZXMnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cid-tool/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/cid-tool/src/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\n * @typedef {import('./core/types').FormatOptions} FormatOptions\n */\n\nmodule.exports = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/cid-tool/src/core/index.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0EsYUFBYSxzQ0FBc0M7QUFDbkQ7O0FBRUEscUdBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvY2lkLXRvb2wvc3JjL2luZGV4LmpzPzMxMmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlL3R5cGVzJykuRm9ybWF0T3B0aW9uc30gRm9ybWF0T3B0aW9uc1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb3JlJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cid-tool/src/index.js\n");

/***/ })

};
;