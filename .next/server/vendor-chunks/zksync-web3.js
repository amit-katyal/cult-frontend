"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zksync-web3";
exports.ids = ["vendor-chunks/zksync-web3"];
exports.modules = {

/***/ "(ssr)/./node_modules/zksync-web3/build/src/adapters.js":
/*!********************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/adapters.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AdapterL2 = exports.AdapterL1 = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst typechain_1 = __webpack_require__(/*! ../typechain */ \"(ssr)/./node_modules/zksync-web3/build/typechain/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-web3/build/src/utils.js\");\nfunction AdapterL1(Base) {\n    return class Adapter extends Base {\n        _providerL2() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        _providerL1() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        _signerL1() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        async getMainContract() {\n            const address = await this._providerL2().getMainContractAddress();\n            return typechain_1.IZkSyncFactory.connect(address, this._signerL1());\n        }\n        async getL1BridgeContracts() {\n            const addresses = await this._providerL2().getDefaultBridgeAddresses();\n            return {\n                erc20: typechain_1.IL1BridgeFactory.connect(addresses.erc20L1, this._signerL1())\n            };\n        }\n        async getBalanceL1(token, blockTag) {\n            token !== null && token !== void 0 ? token : (token = utils_1.ETH_ADDRESS);\n            if ((0, utils_1.isETH)(token)) {\n                return await this._providerL1().getBalance(await this.getAddress(), blockTag);\n            }\n            else {\n                const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._providerL1());\n                return await erc20contract.balanceOf(await this.getAddress());\n            }\n        }\n        async l2TokenAddress(token) {\n            if (token == utils_1.ETH_ADDRESS) {\n                return utils_1.ETH_ADDRESS;\n            }\n            else {\n                const erc20Bridge = (await this.getL1BridgeContracts()).erc20;\n                return await erc20Bridge.l2TokenAddress(token);\n            }\n        }\n        async approveERC20(token, amount, overrides) {\n            if ((0, utils_1.isETH)(token)) {\n                throw new Error(\"ETH token can't be approved. The address of the token does not exist on L1.\");\n            }\n            let bridgeAddress = overrides === null || overrides === void 0 ? void 0 : overrides.bridgeAddress;\n            const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._signerL1());\n            if (bridgeAddress == null) {\n                bridgeAddress = (await this._providerL2().getDefaultBridgeAddresses()).erc20L1;\n            }\n            else {\n                delete overrides.bridgeAddress;\n            }\n            return await erc20contract.approve(bridgeAddress, amount, overrides);\n        }\n        async getBaseCost(params) {\n            var _a, _b;\n            const zksyncContract = await this.getMainContract();\n            const parameters = { ...(0, utils_1.layer1TxDefaults)(), ...params };\n            (_a = parameters.gasPrice) !== null && _a !== void 0 ? _a : (parameters.gasPrice = await this._providerL1().getGasPrice());\n            (_b = parameters.gasPerPubdataByte) !== null && _b !== void 0 ? _b : (parameters.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            return ethers_1.BigNumber.from(await zksyncContract.l2TransactionBaseCost(parameters.gasPrice, parameters.gasLimit, parameters.gasPerPubdataByte));\n        }\n        async deposit(transaction) {\n            var _a;\n            const depositTx = await this.getDepositTx(transaction);\n            if (transaction.token == utils_1.ETH_ADDRESS) {\n                return this.requestExecute(depositTx);\n            }\n            else {\n                const bridgeContracts = await this.getL1BridgeContracts();\n                if (transaction.approveERC20) {\n                    const approveTx = await this.approveERC20(transaction.token, transaction.amount, {\n                        bridgeAddress: (_a = transaction.bridgeAddress) !== null && _a !== void 0 ? _a : bridgeContracts.erc20.address,\n                        ...transaction.approveOverrides\n                    });\n                    await approveTx.wait();\n                }\n                return await this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(depositTx));\n            }\n        }\n        async estimateGasDeposit(transaction) {\n            const depositTx = await this.getDepositTx(transaction);\n            if (transaction.token == utils_1.ETH_ADDRESS) {\n                return await this.estimateGasRequestExecute(depositTx);\n            }\n            else {\n                return await this._providerL1().estimateGas(depositTx);\n            }\n        }\n        async getDepositTx(transaction) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            const bridgeContracts = await this.getL1BridgeContracts();\n            if (transaction.bridgeAddress) {\n                bridgeContracts.erc20.attach(transaction.bridgeAddress);\n            }\n            const { ...tx } = transaction;\n            (_a = tx.to) !== null && _a !== void 0 ? _a : (tx.to = await this.getAddress());\n            (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : (tx.operatorTip = ethers_1.BigNumber.from(0));\n            (_c = tx.overrides) !== null && _c !== void 0 ? _c : (tx.overrides = {});\n            (_d = tx.gasPerPubdataByte) !== null && _d !== void 0 ? _d : (tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            (_e = tx.l2GasLimit) !== null && _e !== void 0 ? _e : (tx.l2GasLimit = await (0, utils_1.estimateDefaultBridgeDepositL2Gas)(this._providerL1(), this._providerL2(), tx.token, tx.amount, tx.to, await this.getAddress(), tx.gasPerPubdataByte));\n            const { to, token, amount, operatorTip, overrides } = tx;\n            await insertGasPrice(this._providerL1(), overrides);\n            const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;\n            const zksyncContract = await this.getMainContract();\n            const baseCost = await zksyncContract.l2TransactionBaseCost(await gasPriceForEstimation, tx.l2GasLimit, tx.gasPerPubdataByte);\n            if (token == utils_1.ETH_ADDRESS) {\n                (_f = overrides.value) !== null && _f !== void 0 ? _f : (overrides.value = baseCost.add(operatorTip).add(amount));\n                return {\n                    contractAddress: to,\n                    calldata: '0x',\n                    l2Value: amount,\n                    // For some reason typescript can not deduce that we've already set the\n                    // tx.l2GasLimit\n                    l2GasLimit: tx.l2GasLimit,\n                    ...tx\n                };\n            }\n            else {\n                const args = [\n                    to,\n                    token,\n                    amount,\n                    tx.l2GasLimit,\n                    tx.gasPerPubdataByte\n                ];\n                (_g = overrides.value) !== null && _g !== void 0 ? _g : (overrides.value = baseCost.add(operatorTip));\n                await (0, utils_1.checkBaseCost)(baseCost, overrides.value);\n                // TODO: compatibility layer: using the old API which uses msg.sender as the\n                // refund recipient, to make the SDK compatible with the old contracts.\n                // const contract = bridgeContracts.erc20 as ethers.Contract;\n                return await bridgeContracts.erc20.populateTransaction.deposit(...args, overrides);\n            }\n        }\n        async _getWithdrawalLog(withdrawalHash, index = 0) {\n            const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);\n            const receipt = await this._providerL2().getTransactionReceipt(hash);\n            const log = receipt.logs.filter((log) => log.address == utils_1.L1_MESSENGER_ADDRESS &&\n                log.topics[0] == ethers_1.ethers.utils.id('L1MessageSent(address,bytes32,bytes)'))[index];\n            return {\n                log,\n                l1BatchTxId: receipt.l1BatchTxIndex\n            };\n        }\n        async _getWithdrawalL2ToL1Log(withdrawalHash, index = 0) {\n            const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);\n            const receipt = await this._providerL2().getTransactionReceipt(hash);\n            const messages = Array.from(receipt.l2ToL1Logs.entries()).filter(([_, log]) => log.sender == utils_1.L1_MESSENGER_ADDRESS);\n            const [l2ToL1LogIndex, l2ToL1Log] = messages[index];\n            return {\n                l2ToL1LogIndex,\n                l2ToL1Log\n            };\n        }\n        async finalizeWithdrawalParams(withdrawalHash, index = 0) {\n            const { log, l1BatchTxId } = await this._getWithdrawalLog(withdrawalHash, index);\n            const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);\n            const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);\n            const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);\n            const message = ethers_1.ethers.utils.defaultAbiCoder.decode(['bytes'], log.data)[0];\n            return {\n                l1BatchNumber: log.l1BatchNumber,\n                l2MessageIndex: proof.id,\n                l2TxNumberInBlock: l1BatchTxId,\n                message,\n                sender,\n                proof: proof.proof\n            };\n        }\n        async finalizeWithdrawal(withdrawalHash, index = 0, overrides) {\n            const { l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, sender, proof } = await this.finalizeWithdrawalParams(withdrawalHash, index);\n            if ((0, utils_1.isETH)(sender)) {\n                const contractAddress = await this._providerL2().getMainContractAddress();\n                const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());\n                return await zksync.finalizeEthWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});\n            }\n            const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());\n            const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._signerL1());\n            return await l1Bridge.finalizeWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});\n        }\n        async isWithdrawalFinalized(withdrawalHash, index = 0) {\n            const { log } = await this._getWithdrawalLog(withdrawalHash, index);\n            const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);\n            const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);\n            // `getLogProof` is called not to get proof but\n            // to get the index of the corresponding L2->L1 log,\n            // which is returned as `proof.id`.\n            const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);\n            if ((0, utils_1.isETH)(sender)) {\n                const contractAddress = await this._providerL2().getMainContractAddress();\n                const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());\n                return await zksync.isEthWithdrawalFinalized(log.l1BatchNumber, proof.id);\n            }\n            const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());\n            const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._providerL1());\n            return await l1Bridge.isWithdrawalFinalized(log.l1BatchNumber, proof.id);\n        }\n        async claimFailedDeposit(depositHash, overrides) {\n            const receipt = await this._providerL2().getTransactionReceipt(ethers_1.ethers.utils.hexlify(depositHash));\n            const successL2ToL1LogIndex = receipt.l2ToL1Logs.findIndex((l2ToL1log) => l2ToL1log.sender == utils_1.BOOTLOADER_FORMAL_ADDRESS && l2ToL1log.key == depositHash);\n            const successL2ToL1Log = receipt.l2ToL1Logs[successL2ToL1LogIndex];\n            if (successL2ToL1Log.value != ethers_1.ethers.constants.HashZero) {\n                throw new Error('Cannot claim successful deposit');\n            }\n            const tx = await this._providerL2().getTransaction(ethers_1.ethers.utils.hexlify(depositHash));\n            // Undo the aliasing, since the Mailbox contract set it as for contract address.\n            const l1BridgeAddress = (0, utils_1.undoL1ToL2Alias)(receipt.from);\n            const l2BridgeAddress = receipt.to;\n            const l1Bridge = typechain_1.IL1BridgeFactory.connect(l1BridgeAddress, this._signerL1());\n            const l2Bridge = typechain_1.IL2BridgeFactory.connect(l2BridgeAddress, this._providerL2());\n            const calldata = l2Bridge.interface.decodeFunctionData('finalizeDeposit', tx.data);\n            const proof = await this._providerL2().getLogProof(depositHash, successL2ToL1LogIndex);\n            return await l1Bridge.claimFailedDeposit(calldata['_l1Sender'], calldata['_l1Token'], depositHash, receipt.l1BatchNumber, proof.id, receipt.l1BatchTxIndex, proof.proof, overrides !== null && overrides !== void 0 ? overrides : {});\n        }\n        async requestExecute(transaction) {\n            const requestExecuteTx = await this.getRequestExecuteTx(transaction);\n            return this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(requestExecuteTx));\n        }\n        async estimateGasRequestExecute(transaction) {\n            const requestExecuteTx = await this.getRequestExecuteTx(transaction);\n            return this._providerL1().estimateGas(requestExecuteTx);\n        }\n        async getRequestExecuteTx(transaction) {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            const zksyncContract = await this.getMainContract();\n            const { ...tx } = transaction;\n            (_a = tx.l2Value) !== null && _a !== void 0 ? _a : (tx.l2Value = ethers_1.BigNumber.from(0));\n            (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : (tx.operatorTip = ethers_1.BigNumber.from(0));\n            (_c = tx.factoryDeps) !== null && _c !== void 0 ? _c : (tx.factoryDeps = []);\n            (_d = tx.overrides) !== null && _d !== void 0 ? _d : (tx.overrides = {});\n            (_e = tx.gasPerPubdataByte) !== null && _e !== void 0 ? _e : (tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            (_f = tx.refundRecipient) !== null && _f !== void 0 ? _f : (tx.refundRecipient = await this.getAddress());\n            (_g = tx.l2GasLimit) !== null && _g !== void 0 ? _g : (tx.l2GasLimit = await this._providerL2().estimateL1ToL2Execute(transaction));\n            const { contractAddress, l2Value, calldata, l2GasLimit, factoryDeps, operatorTip, overrides, gasPerPubdataByte, refundRecipient } = tx;\n            await insertGasPrice(this._providerL1(), overrides);\n            const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;\n            const baseCost = await this.getBaseCost({\n                gasPrice: await gasPriceForEstimation,\n                gasPerPubdataByte,\n                gasLimit: l2GasLimit\n            });\n            (_h = overrides.value) !== null && _h !== void 0 ? _h : (overrides.value = baseCost.add(operatorTip).add(l2Value));\n            await (0, utils_1.checkBaseCost)(baseCost, overrides.value);\n            return await zksyncContract.populateTransaction.requestL2Transaction(contractAddress, l2Value, calldata, l2GasLimit, utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT, factoryDeps, refundRecipient, overrides);\n        }\n    };\n}\nexports.AdapterL1 = AdapterL1;\nfunction AdapterL2(Base) {\n    return class Adapter extends Base {\n        _providerL2() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        _signerL2() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        async getBalance(token, blockTag = 'committed') {\n            return await this._providerL2().getBalance(await this.getAddress(), blockTag, token);\n        }\n        async getAllBalances() {\n            return await this._providerL2().getAllAccountBalances(await this.getAddress());\n        }\n        async getL2BridgeContracts() {\n            const addresses = await this._providerL2().getDefaultBridgeAddresses();\n            return {\n                erc20: typechain_1.IL2BridgeFactory.connect(addresses.erc20L2, this._signerL2())\n            };\n        }\n        _fillCustomData(data) {\n            var _a, _b;\n            const customData = { ...data };\n            (_a = customData.gasPerPubdata) !== null && _a !== void 0 ? _a : (customData.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);\n            (_b = customData.factoryDeps) !== null && _b !== void 0 ? _b : (customData.factoryDeps = []);\n            return customData;\n        }\n        async withdraw(transaction) {\n            const withdrawTx = await this._providerL2().getWithdrawTx({\n                from: await this.getAddress(),\n                ...transaction\n            });\n            const txResponse = await this.sendTransaction(withdrawTx);\n            return this._providerL2()._wrapTransaction(txResponse);\n        }\n        async transfer(transaction) {\n            const transferTx = await this._providerL2().getTransferTx({\n                from: await this.getAddress(),\n                ...transaction\n            });\n            const txResponse = await this.sendTransaction(transferTx);\n            return this._providerL2()._wrapTransaction(txResponse);\n        }\n    };\n}\nexports.AdapterL2 = AdapterL2;\n/// @dev This method checks if the overrides contain a gasPrice (or maxFeePerGas), if not it will insert\n/// the maxFeePerGas\nasync function insertGasPrice(l1Provider, overrides) {\n    if (!overrides.gasPrice && !overrides.maxFeePerGas) {\n        const l1FeeData = await l1Provider.getFeeData();\n        // Sometimes baseFeePerGas is not available, so we use gasPrice instead.\n        const baseFee = l1FeeData.lastBaseFeePerGas || l1FeeData.gasPrice;\n        // ethers.js by default uses multiplcation by 2, but since the price for the L2 part\n        // will depend on the L1 part, doubling base fee is typically too much.\n        const maxFeePerGas = baseFee.mul(3).div(2).add(l1FeeData.maxPriorityFeePerGas);\n        overrides.maxFeePerGas = maxFeePerGas;\n        overrides.maxPriorityFeePerGas = l1FeeData.maxPriorityFeePerGas;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/adapters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/contract.js":
/*!********************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/contract.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractFactory = exports.Contract = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-web3/build/src/utils.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-web3/build/src/types.js\");\nvar ethers_2 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nObject.defineProperty(exports, \"Contract\", ({ enumerable: true, get: function () { return ethers_2.Contract; } }));\nclass ContractFactory extends ethers_1.ethers.ContractFactory {\n    constructor(abi, bytecode, signer, deploymentType) {\n        super(abi, bytecode, signer);\n        this.deploymentType = deploymentType || 'create';\n    }\n    encodeCalldata(salt, bytecodeHash, constructorCalldata) {\n        if (this.deploymentType == 'create') {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('create', [salt, bytecodeHash, constructorCalldata]);\n        }\n        else if (this.deploymentType == 'createAccount') {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('createAccount', [\n                salt,\n                bytecodeHash,\n                constructorCalldata,\n                types_1.AccountAbstractionVersion.Version1\n            ]);\n        }\n        else {\n            throw new Error(`Unsupported deployment type ${this.deploymentType}`);\n        }\n    }\n    getDeployTransaction(...args) {\n        var _a, _b, _c;\n        var _d, _e;\n        // TODO (SMA-1585): Users should be able to provide the salt.\n        let salt = '0x0000000000000000000000000000000000000000000000000000000000000000';\n        // The overrides will be popped out in this call:\n        const txRequest = super.getDeployTransaction(...args);\n        // Removing overrides\n        if (this.interface.deploy.inputs.length + 1 == args.length) {\n            args.pop();\n        }\n        // Salt argument is not used, so we provide a placeholder value.\n        const bytecodeHash = (0, utils_1.hashBytecode)(this.bytecode);\n        const constructorCalldata = ethers_1.utils.arrayify(this.interface.encodeDeploy(args));\n        const deployCalldata = this.encodeCalldata(salt, bytecodeHash, constructorCalldata);\n        txRequest.type = utils_1.EIP712_TX_TYPE;\n        txRequest.to = utils_1.CONTRACT_DEPLOYER_ADDRESS;\n        txRequest.data = deployCalldata;\n        (_a = txRequest.customData) !== null && _a !== void 0 ? _a : (txRequest.customData = {});\n        (_b = (_d = txRequest.customData).factoryDeps) !== null && _b !== void 0 ? _b : (_d.factoryDeps = []);\n        (_c = (_e = txRequest.customData).gasPerPubdata) !== null && _c !== void 0 ? _c : (_e.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);\n        // The number of factory deps is relatively low, so it is efficient enough.\n        if (!txRequest.customData.factoryDeps.includes(this.bytecode)) {\n            txRequest.customData.factoryDeps.push(this.bytecode);\n        }\n        return txRequest;\n    }\n    async deploy(...args) {\n        const contract = await super.deploy(...args);\n        const deployTxReceipt = await contract.deployTransaction.wait();\n        const deployedAddresses = (0, utils_1.getDeployedContracts)(deployTxReceipt).map((info) => info.deployedAddress);\n        const contractWithCorrectAddress = new ethers_1.ethers.Contract(deployedAddresses[deployedAddresses.length - 1], contract.interface, contract.signer);\n        ethers_1.utils.defineReadOnly(contractWithCorrectAddress, 'deployTransaction', contract.deployTransaction);\n        return contractWithCorrectAddress;\n    }\n}\nexports.ContractFactory = ContractFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvc3JjL2NvbnRyYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLGdCQUFnQjtBQUMxQyxpQkFBaUIsbUJBQU8sQ0FBQyw0REFBUTtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvRUFBUztBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvRUFBUztBQUNqQyxlQUFlLG1CQUFPLENBQUMsNERBQVE7QUFDL0IsNENBQTJDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxvQkFBb0I7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtGQUErRjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvc3JjL2NvbnRyYWN0LmpzP2Q2NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbnRyYWN0RmFjdG9yeSA9IGV4cG9ydHMuQ29udHJhY3QgPSB2b2lkIDA7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG52YXIgZXRoZXJzXzIgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV0aGVyc18yLkNvbnRyYWN0OyB9IH0pO1xuY2xhc3MgQ29udHJhY3RGYWN0b3J5IGV4dGVuZHMgZXRoZXJzXzEuZXRoZXJzLkNvbnRyYWN0RmFjdG9yeSB7XG4gICAgY29uc3RydWN0b3IoYWJpLCBieXRlY29kZSwgc2lnbmVyLCBkZXBsb3ltZW50VHlwZSkge1xuICAgICAgICBzdXBlcihhYmksIGJ5dGVjb2RlLCBzaWduZXIpO1xuICAgICAgICB0aGlzLmRlcGxveW1lbnRUeXBlID0gZGVwbG95bWVudFR5cGUgfHwgJ2NyZWF0ZSc7XG4gICAgfVxuICAgIGVuY29kZUNhbGxkYXRhKHNhbHQsIGJ5dGVjb2RlSGFzaCwgY29uc3RydWN0b3JDYWxsZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5kZXBsb3ltZW50VHlwZSA9PSAnY3JlYXRlJykge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxzXzEuQ09OVFJBQ1RfREVQTE9ZRVIuZW5jb2RlRnVuY3Rpb25EYXRhKCdjcmVhdGUnLCBbc2FsdCwgYnl0ZWNvZGVIYXNoLCBjb25zdHJ1Y3RvckNhbGxkYXRhXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZXBsb3ltZW50VHlwZSA9PSAnY3JlYXRlQWNjb3VudCcpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlsc18xLkNPTlRSQUNUX0RFUExPWUVSLmVuY29kZUZ1bmN0aW9uRGF0YSgnY3JlYXRlQWNjb3VudCcsIFtcbiAgICAgICAgICAgICAgICBzYWx0LFxuICAgICAgICAgICAgICAgIGJ5dGVjb2RlSGFzaCxcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhLFxuICAgICAgICAgICAgICAgIHR5cGVzXzEuQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbi5WZXJzaW9uMVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRlcGxveW1lbnQgdHlwZSAke3RoaXMuZGVwbG95bWVudFR5cGV9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RGVwbG95VHJhbnNhY3Rpb24oLi4uYXJncykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgdmFyIF9kLCBfZTtcbiAgICAgICAgLy8gVE9ETyAoU01BLTE1ODUpOiBVc2VycyBzaG91bGQgYmUgYWJsZSB0byBwcm92aWRlIHRoZSBzYWx0LlxuICAgICAgICBsZXQgc2FsdCA9ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnO1xuICAgICAgICAvLyBUaGUgb3ZlcnJpZGVzIHdpbGwgYmUgcG9wcGVkIG91dCBpbiB0aGlzIGNhbGw6XG4gICAgICAgIGNvbnN0IHR4UmVxdWVzdCA9IHN1cGVyLmdldERlcGxveVRyYW5zYWN0aW9uKC4uLmFyZ3MpO1xuICAgICAgICAvLyBSZW1vdmluZyBvdmVycmlkZXNcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJmYWNlLmRlcGxveS5pbnB1dHMubGVuZ3RoICsgMSA9PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgYXJncy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTYWx0IGFyZ3VtZW50IGlzIG5vdCB1c2VkLCBzbyB3ZSBwcm92aWRlIGEgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICAgIGNvbnN0IGJ5dGVjb2RlSGFzaCA9ICgwLCB1dGlsc18xLmhhc2hCeXRlY29kZSkodGhpcy5ieXRlY29kZSk7XG4gICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yQ2FsbGRhdGEgPSBldGhlcnNfMS51dGlscy5hcnJheWlmeSh0aGlzLmludGVyZmFjZS5lbmNvZGVEZXBsb3koYXJncykpO1xuICAgICAgICBjb25zdCBkZXBsb3lDYWxsZGF0YSA9IHRoaXMuZW5jb2RlQ2FsbGRhdGEoc2FsdCwgYnl0ZWNvZGVIYXNoLCBjb25zdHJ1Y3RvckNhbGxkYXRhKTtcbiAgICAgICAgdHhSZXF1ZXN0LnR5cGUgPSB1dGlsc18xLkVJUDcxMl9UWF9UWVBFO1xuICAgICAgICB0eFJlcXVlc3QudG8gPSB1dGlsc18xLkNPTlRSQUNUX0RFUExPWUVSX0FERFJFU1M7XG4gICAgICAgIHR4UmVxdWVzdC5kYXRhID0gZGVwbG95Q2FsbGRhdGE7XG4gICAgICAgIChfYSA9IHR4UmVxdWVzdC5jdXN0b21EYXRhKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAodHhSZXF1ZXN0LmN1c3RvbURhdGEgPSB7fSk7XG4gICAgICAgIChfYiA9IChfZCA9IHR4UmVxdWVzdC5jdXN0b21EYXRhKS5mYWN0b3J5RGVwcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKF9kLmZhY3RvcnlEZXBzID0gW10pO1xuICAgICAgICAoX2MgPSAoX2UgPSB0eFJlcXVlc3QuY3VzdG9tRGF0YSkuZ2FzUGVyUHViZGF0YSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKF9lLmdhc1BlclB1YmRhdGEgPSB1dGlsc18xLkRFRkFVTFRfR0FTX1BFUl9QVUJEQVRBX0xJTUlUKTtcbiAgICAgICAgLy8gVGhlIG51bWJlciBvZiBmYWN0b3J5IGRlcHMgaXMgcmVsYXRpdmVseSBsb3csIHNvIGl0IGlzIGVmZmljaWVudCBlbm91Z2guXG4gICAgICAgIGlmICghdHhSZXF1ZXN0LmN1c3RvbURhdGEuZmFjdG9yeURlcHMuaW5jbHVkZXModGhpcy5ieXRlY29kZSkpIHtcbiAgICAgICAgICAgIHR4UmVxdWVzdC5jdXN0b21EYXRhLmZhY3RvcnlEZXBzLnB1c2godGhpcy5ieXRlY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR4UmVxdWVzdDtcbiAgICB9XG4gICAgYXN5bmMgZGVwbG95KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29udHJhY3QgPSBhd2FpdCBzdXBlci5kZXBsb3koLi4uYXJncyk7XG4gICAgICAgIGNvbnN0IGRlcGxveVR4UmVjZWlwdCA9IGF3YWl0IGNvbnRyYWN0LmRlcGxveVRyYW5zYWN0aW9uLndhaXQoKTtcbiAgICAgICAgY29uc3QgZGVwbG95ZWRBZGRyZXNzZXMgPSAoMCwgdXRpbHNfMS5nZXREZXBsb3llZENvbnRyYWN0cykoZGVwbG95VHhSZWNlaXB0KS5tYXAoKGluZm8pID0+IGluZm8uZGVwbG95ZWRBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgY29udHJhY3RXaXRoQ29ycmVjdEFkZHJlc3MgPSBuZXcgZXRoZXJzXzEuZXRoZXJzLkNvbnRyYWN0KGRlcGxveWVkQWRkcmVzc2VzW2RlcGxveWVkQWRkcmVzc2VzLmxlbmd0aCAtIDFdLCBjb250cmFjdC5pbnRlcmZhY2UsIGNvbnRyYWN0LnNpZ25lcik7XG4gICAgICAgIGV0aGVyc18xLnV0aWxzLmRlZmluZVJlYWRPbmx5KGNvbnRyYWN0V2l0aENvcnJlY3RBZGRyZXNzLCAnZGVwbG95VHJhbnNhY3Rpb24nLCBjb250cmFjdC5kZXBsb3lUcmFuc2FjdGlvbik7XG4gICAgICAgIHJldHVybiBjb250cmFjdFdpdGhDb3JyZWN0QWRkcmVzcztcbiAgICB9XG59XG5leHBvcnRzLkNvbnRyYWN0RmFjdG9yeSA9IENvbnRyYWN0RmFjdG9yeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Contract = exports.ContractFactory = exports.Provider = exports.Web3Provider = exports.Wallet = exports.L1Signer = exports.Signer = exports.EIP712Signer = exports.types = exports.utils = void 0;\nexports.utils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-web3/build/src/utils.js\"));\nexports.types = __importStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-web3/build/src/types.js\"));\nvar signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-web3/build/src/signer.js\");\nObject.defineProperty(exports, \"EIP712Signer\", ({ enumerable: true, get: function () { return signer_1.EIP712Signer; } }));\nObject.defineProperty(exports, \"Signer\", ({ enumerable: true, get: function () { return signer_1.Signer; } }));\nObject.defineProperty(exports, \"L1Signer\", ({ enumerable: true, get: function () { return signer_1.L1Signer; } }));\nvar wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/zksync-web3/build/src/wallet.js\");\nObject.defineProperty(exports, \"Wallet\", ({ enumerable: true, get: function () { return wallet_1.Wallet; } }));\nvar provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/zksync-web3/build/src/provider.js\");\nObject.defineProperty(exports, \"Web3Provider\", ({ enumerable: true, get: function () { return provider_1.Web3Provider; } }));\nObject.defineProperty(exports, \"Provider\", ({ enumerable: true, get: function () { return provider_1.Provider; } }));\nvar contract_1 = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/zksync-web3/build/src/contract.js\");\nObject.defineProperty(exports, \"ContractFactory\", ({ enumerable: true, get: function () { return contract_1.ContractFactory; } }));\nObject.defineProperty(exports, \"Contract\", ({ enumerable: true, get: function () { return contract_1.Contract; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyx1QkFBdUIsR0FBRyxnQkFBZ0IsR0FBRyxvQkFBb0IsR0FBRyxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsY0FBYyxHQUFHLG9CQUFvQixHQUFHLGFBQWEsR0FBRyxhQUFhO0FBQ2hNLGFBQWEsZ0JBQWdCLG1CQUFPLENBQUMsb0VBQVM7QUFDOUMsYUFBYSxnQkFBZ0IsbUJBQU8sQ0FBQyxvRUFBUztBQUM5QyxlQUFlLG1CQUFPLENBQUMsc0VBQVU7QUFDakMsZ0RBQStDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3hILDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1Ryw0Q0FBMkMsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDaEgsZUFBZSxtQkFBTyxDQUFDLHNFQUFVO0FBQ2pDLDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1RyxpQkFBaUIsbUJBQU8sQ0FBQywwRUFBWTtBQUNyQyxnREFBK0MsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDMUgsNENBQTJDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2xILGlCQUFpQixtQkFBTyxDQUFDLDBFQUFZO0FBQ3JDLG1EQUFrRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNoSSw0Q0FBMkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy96a3N5bmMtd2ViMy9idWlsZC9zcmMvaW5kZXguanM/NjY4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db250cmFjdCA9IGV4cG9ydHMuQ29udHJhY3RGYWN0b3J5ID0gZXhwb3J0cy5Qcm92aWRlciA9IGV4cG9ydHMuV2ViM1Byb3ZpZGVyID0gZXhwb3J0cy5XYWxsZXQgPSBleHBvcnRzLkwxU2lnbmVyID0gZXhwb3J0cy5TaWduZXIgPSBleHBvcnRzLkVJUDcxMlNpZ25lciA9IGV4cG9ydHMudHlwZXMgPSBleHBvcnRzLnV0aWxzID0gdm9pZCAwO1xuZXhwb3J0cy51dGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSk7XG5leHBvcnRzLnR5cGVzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpKTtcbnZhciBzaWduZXJfMSA9IHJlcXVpcmUoXCIuL3NpZ25lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVJUDcxMlNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmVyXzEuRUlQNzEyU2lnbmVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2lnbmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaWduZXJfMS5TaWduZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMMVNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmVyXzEuTDFTaWduZXI7IH0gfSk7XG52YXIgd2FsbGV0XzEgPSByZXF1aXJlKFwiLi93YWxsZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXYWxsZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdhbGxldF8xLldhbGxldDsgfSB9KTtcbnZhciBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXZWIzUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyXzEuV2ViM1Byb3ZpZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3ZpZGVyXzEuUHJvdmlkZXI7IH0gfSk7XG52YXIgY29udHJhY3RfMSA9IHJlcXVpcmUoXCIuL2NvbnRyYWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3RGYWN0b3J5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cmFjdF8xLkNvbnRyYWN0RmFjdG9yeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnRyYWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cmFjdF8xLkNvbnRyYWN0OyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/paymaster-utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/paymaster-utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPaymasterParams = exports.getGeneralPaymasterInput = exports.getApprovalBasedPaymasterInput = exports.IPaymasterFlow = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nexports.IPaymasterFlow = new ethers_1.ethers.utils.Interface((__webpack_require__(/*! ../../abi/IPaymasterFlow.json */ \"(ssr)/./node_modules/zksync-web3/abi/IPaymasterFlow.json\").abi));\nfunction getApprovalBasedPaymasterInput(paymasterInput) {\n    return exports.IPaymasterFlow.encodeFunctionData('approvalBased', [\n        paymasterInput.token,\n        paymasterInput.minimalAllowance,\n        paymasterInput.innerInput\n    ]);\n}\nexports.getApprovalBasedPaymasterInput = getApprovalBasedPaymasterInput;\nfunction getGeneralPaymasterInput(paymasterInput) {\n    return exports.IPaymasterFlow.encodeFunctionData('general', [paymasterInput.innerInput]);\n}\nexports.getGeneralPaymasterInput = getGeneralPaymasterInput;\nfunction getPaymasterParams(paymasterAddress, paymasterInput) {\n    if (paymasterInput.type == 'General') {\n        return {\n            paymaster: paymasterAddress,\n            paymasterInput: getGeneralPaymasterInput(paymasterInput)\n        };\n    }\n    else {\n        return {\n            paymaster: paymasterAddress,\n            paymasterInput: getApprovalBasedPaymasterInput(paymasterInput)\n        };\n    }\n}\nexports.getPaymasterParams = getPaymasterParams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvc3JjL3BheW1hc3Rlci11dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxnQ0FBZ0MsR0FBRyxzQ0FBc0MsR0FBRyxzQkFBc0I7QUFDL0gsaUJBQWlCLG1CQUFPLENBQUMsNERBQVE7QUFDakMsc0JBQXNCLHVDQUF1QywwSEFBNEM7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy96a3N5bmMtd2ViMy9idWlsZC9zcmMvcGF5bWFzdGVyLXV0aWxzLmpzPzg4ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFBheW1hc3RlclBhcmFtcyA9IGV4cG9ydHMuZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0ID0gZXhwb3J0cy5nZXRBcHByb3ZhbEJhc2VkUGF5bWFzdGVySW5wdXQgPSBleHBvcnRzLklQYXltYXN0ZXJGbG93ID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuZXhwb3J0cy5JUGF5bWFzdGVyRmxvdyA9IG5ldyBldGhlcnNfMS5ldGhlcnMudXRpbHMuSW50ZXJmYWNlKHJlcXVpcmUoJy4uLy4uL2FiaS9JUGF5bWFzdGVyRmxvdy5qc29uJykuYWJpKTtcbmZ1bmN0aW9uIGdldEFwcHJvdmFsQmFzZWRQYXltYXN0ZXJJbnB1dChwYXltYXN0ZXJJbnB1dCkge1xuICAgIHJldHVybiBleHBvcnRzLklQYXltYXN0ZXJGbG93LmVuY29kZUZ1bmN0aW9uRGF0YSgnYXBwcm92YWxCYXNlZCcsIFtcbiAgICAgICAgcGF5bWFzdGVySW5wdXQudG9rZW4sXG4gICAgICAgIHBheW1hc3RlcklucHV0Lm1pbmltYWxBbGxvd2FuY2UsXG4gICAgICAgIHBheW1hc3RlcklucHV0LmlubmVySW5wdXRcbiAgICBdKTtcbn1cbmV4cG9ydHMuZ2V0QXBwcm92YWxCYXNlZFBheW1hc3RlcklucHV0ID0gZ2V0QXBwcm92YWxCYXNlZFBheW1hc3RlcklucHV0O1xuZnVuY3Rpb24gZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0KHBheW1hc3RlcklucHV0KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuSVBheW1hc3RlckZsb3cuZW5jb2RlRnVuY3Rpb25EYXRhKCdnZW5lcmFsJywgW3BheW1hc3RlcklucHV0LmlubmVySW5wdXRdKTtcbn1cbmV4cG9ydHMuZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0ID0gZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0O1xuZnVuY3Rpb24gZ2V0UGF5bWFzdGVyUGFyYW1zKHBheW1hc3RlckFkZHJlc3MsIHBheW1hc3RlcklucHV0KSB7XG4gICAgaWYgKHBheW1hc3RlcklucHV0LnR5cGUgPT0gJ0dlbmVyYWwnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXltYXN0ZXI6IHBheW1hc3RlckFkZHJlc3MsXG4gICAgICAgICAgICBwYXltYXN0ZXJJbnB1dDogZ2V0R2VuZXJhbFBheW1hc3RlcklucHV0KHBheW1hc3RlcklucHV0KVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBheW1hc3RlcjogcGF5bWFzdGVyQWRkcmVzcyxcbiAgICAgICAgICAgIHBheW1hc3RlcklucHV0OiBnZXRBcHByb3ZhbEJhc2VkUGF5bWFzdGVySW5wdXQocGF5bWFzdGVySW5wdXQpXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5nZXRQYXltYXN0ZXJQYXJhbXMgPSBnZXRQYXltYXN0ZXJQYXJhbXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/paymaster-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/provider.js":
/*!********************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/provider.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Web3Provider = exports.Provider = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nvar Formatter = ethers_1.providers.Formatter;\nconst web_1 = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib.esm/index.js\");\nconst typechain_1 = __webpack_require__(/*! ../typechain */ \"(ssr)/./node_modules/zksync-web3/build/typechain/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-web3/build/src/types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-web3/build/src/utils.js\");\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-web3/build/src/signer.js\");\nlet defaultFormatter = null;\nclass Provider extends ethers_1.ethers.providers.JsonRpcProvider {\n    async getTransactionReceipt(transactionHash) {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n        const params = {\n            transactionHash: this.formatter.hash(transactionHash, true)\n        };\n        return (0, web_1.poll)(async ()=>{\n            const result = await this.perform(\"getTransactionReceipt\", params);\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n            if (result.blockNumber == null && result.status != null && ethers_1.BigNumber.from(result.status).isZero()) {\n                // transaction is rejected in the state-keeper\n                return {\n                    ...this.formatter.receipt({\n                        ...result,\n                        confirmations: 1,\n                        blockNumber: 0,\n                        blockHash: ethers_1.ethers.constants.HashZero\n                    }),\n                    blockNumber: null,\n                    blockHash: null,\n                    l1BatchNumber: null,\n                    l1BatchTxIndex: null\n                };\n            }\n            if (result.blockHash == null) {\n                // receipt is not ready\n                return undefined;\n            } else {\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                } else if (receipt.confirmations == null) {\n                    const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = blockNumber - receipt.blockNumber + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }\n        }, {\n            oncePoll: this\n        });\n    }\n    async getBlock(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, false);\n    }\n    async getBlockWithTransactions(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, true);\n    }\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n            const number = defaultFormatter.number.bind(defaultFormatter);\n            const boolean = defaultFormatter.boolean.bind(defaultFormatter);\n            const hash = defaultFormatter.hash.bind(defaultFormatter);\n            const address = defaultFormatter.address.bind(defaultFormatter);\n            defaultFormatter.formats.receiptLog.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.l2Tol1Log = {\n                blockNumber: number,\n                blockHash: hash,\n                l1BatchNumber: Formatter.allowNull(number),\n                transactionIndex: number,\n                shardId: number,\n                isService: boolean,\n                sender: address,\n                key: hash,\n                value: hash,\n                transactionHash: hash,\n                logIndex: number\n            };\n            defaultFormatter.formats.receipt.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.receipt.l1BatchTxIndex = Formatter.allowNull(number);\n            defaultFormatter.formats.receipt.l2ToL1Logs = Formatter.arrayOf((value)=>Formatter.check(defaultFormatter.formats.l2Tol1Log, value));\n            defaultFormatter.formats.block.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.block.l1BatchTimestamp = Formatter.allowNull(number);\n            defaultFormatter.formats.blockWithTransactions.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.blockWithTransactions.l1BatchTimestamp = Formatter.allowNull(number);\n            defaultFormatter.formats.transaction.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.transaction.l1BatchTxIndex = Formatter.allowNull(number);\n            defaultFormatter.formats.filterLog.l1BatchNumber = Formatter.allowNull(number);\n        }\n        return defaultFormatter;\n    }\n    async getBalance(address, blockTag, tokenAddress) {\n        const tag = this.formatter.blockTag(blockTag);\n        if (tokenAddress == null || (0, utils_1.isETH)(tokenAddress)) {\n            // requesting ETH balance\n            return await super.getBalance(address, tag);\n        } else {\n            try {\n                let token = typechain_1.IERC20MetadataFactory.connect(tokenAddress, this);\n                return await token.balanceOf(address, {\n                    blockTag: tag\n                });\n            } catch  {\n                return ethers_1.BigNumber.from(0);\n            }\n        }\n    }\n    async l2TokenAddress(token) {\n        if (token == utils_1.ETH_ADDRESS) {\n            return utils_1.ETH_ADDRESS;\n        } else {\n            const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;\n            const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);\n            return await erc20Bridge.l2TokenAddress(token);\n        }\n    }\n    async l1TokenAddress(token) {\n        if (token == utils_1.ETH_ADDRESS) {\n            return utils_1.ETH_ADDRESS;\n        } else {\n            const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;\n            const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);\n            return await erc20Bridge.l1TokenAddress(token);\n        }\n    }\n    // This function is used when formatting requests for\n    // eth_call and eth_estimateGas. We override it here\n    // because we have extra stuff to serialize (customData).\n    // This function is for internal use only.\n    static hexlifyTransaction(transaction, allowExtra) {\n        var _a;\n        const result = ethers_1.ethers.providers.JsonRpcProvider.hexlifyTransaction(transaction, {\n            ...allowExtra,\n            customData: true,\n            from: true\n        });\n        if (transaction.customData == null) {\n            return result;\n        }\n        result.eip712Meta = {\n            gasPerPubdata: ethers_1.utils.hexValue((_a = transaction.customData.gasPerPubdata) !== null && _a !== void 0 ? _a : 0)\n        };\n        transaction.type = utils_1.EIP712_TX_TYPE;\n        if (transaction.customData.factoryDeps) {\n            // @ts-ignore\n            result.eip712Meta.factoryDeps = transaction.customData.factoryDeps.map((dep)=>// TODO (SMA-1605): we arraify instead of hexlifying because server expects Vec<u8>.\n                //  We should change deserialization there.\n                Array.from(ethers_1.utils.arrayify(dep)));\n        }\n        if (transaction.customData.paymasterParams) {\n            // @ts-ignore\n            result.eip712Meta.paymasterParams = {\n                paymaster: ethers_1.utils.hexlify(transaction.customData.paymasterParams.paymaster),\n                paymasterInput: Array.from(ethers_1.utils.arrayify(transaction.customData.paymasterParams.paymasterInput))\n            };\n        }\n        return result;\n    }\n    async estimateGas(transaction) {\n        await this.getNetwork();\n        const params = await ethers_1.utils.resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n        if (transaction.customData != null) {\n            // @ts-ignore\n            params.transaction.customData = transaction.customData;\n        }\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return ethers_1.BigNumber.from(result);\n        } catch (error) {\n            throw new Error(`bad result from backend (estimateGas): ${result}`);\n        }\n    }\n    async estimateGasL1(transaction) {\n        await this.getNetwork();\n        const params = await ethers_1.utils.resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n        if (transaction.customData != null) {\n            // @ts-ignore\n            params.transaction.customData = transaction.customData;\n        }\n        const result = await this.send(\"zks_estimateGasL1ToL2\", [\n            Provider.hexlifyTransaction(params.transaction, {\n                from: true\n            })\n        ]);\n        try {\n            return ethers_1.BigNumber.from(result);\n        } catch (error) {\n            throw new Error(`bad result from backend (zks_estimateGasL1ToL2): ${result}`);\n        }\n    }\n    async getGasPrice(token) {\n        const params = token ? [\n            token\n        ] : [];\n        const price = await this.send(\"eth_gasPrice\", params);\n        return ethers_1.BigNumber.from(price);\n    }\n    constructor(url, network){\n        super(url, network);\n        this.pollingInterval = 500;\n        const blockTag = this.formatter.blockTag.bind(this.formatter);\n        this.formatter.blockTag = (tag)=>{\n            if (tag == \"committed\" || tag == \"finalized\") {\n                return tag;\n            }\n            return blockTag(tag);\n        };\n        this.contractAddresses = {};\n        this.formatter.transaction = utils_1.parseTransaction;\n    }\n    async getMessageProof(blockNumber, sender, messageHash, logIndex) {\n        return await this.send(\"zks_getL2ToL1MsgProof\", [\n            ethers_1.BigNumber.from(blockNumber).toNumber(),\n            sender,\n            ethers_1.ethers.utils.hexlify(messageHash),\n            logIndex\n        ]);\n    }\n    async getLogProof(txHash, index) {\n        return await this.send(\"zks_getL2ToL1LogProof\", [\n            ethers_1.ethers.utils.hexlify(txHash),\n            index\n        ]);\n    }\n    async getL1BatchBlockRange(l1BatchNumber) {\n        const range = await this.send(\"zks_getL1BatchBlockRange\", [\n            l1BatchNumber\n        ]);\n        if (range == null) {\n            return null;\n        }\n        return [\n            parseInt(range[0], 16),\n            parseInt(range[1], 16)\n        ];\n    }\n    async getMainContractAddress() {\n        if (!this.contractAddresses.mainContract) {\n            this.contractAddresses.mainContract = await this.send(\"zks_getMainContract\", []);\n        }\n        return this.contractAddresses.mainContract;\n    }\n    async getTestnetPaymasterAddress() {\n        // Unlike contract's addresses, the testnet paymaster is not cached, since it can be trivially changed\n        // on the fly by the server and should not be relied to be constant\n        return await this.send(\"zks_getTestnetPaymaster\", []);\n    }\n    async getDefaultBridgeAddresses() {\n        if (!this.contractAddresses.erc20BridgeL1) {\n            let addresses = await this.send(\"zks_getBridgeContracts\", []);\n            this.contractAddresses.erc20BridgeL1 = addresses.l1Erc20DefaultBridge;\n            this.contractAddresses.erc20BridgeL2 = addresses.l2Erc20DefaultBridge;\n        }\n        return {\n            erc20L1: this.contractAddresses.erc20BridgeL1,\n            erc20L2: this.contractAddresses.erc20BridgeL2\n        };\n    }\n    async getConfirmedTokens(start = 0, limit = 255) {\n        const tokens = await this.send(\"zks_getConfirmedTokens\", [\n            start,\n            limit\n        ]);\n        return tokens.map((token)=>({\n                address: token.l2Address,\n                ...token\n            }));\n    }\n    async getTokenPrice(token) {\n        return await this.send(\"zks_getTokenPrice\", [\n            token\n        ]);\n    }\n    async getAllAccountBalances(address) {\n        let balances = await this.send(\"zks_getAllAccountBalances\", [\n            address\n        ]);\n        for(let token in balances){\n            balances[token] = ethers_1.BigNumber.from(balances[token]);\n        }\n        return balances;\n    }\n    async l1ChainId() {\n        const res = await this.send(\"zks_L1ChainId\", []);\n        return ethers_1.BigNumber.from(res).toNumber();\n    }\n    async getL1BatchNumber() {\n        const number = await this.send(\"zks_L1BatchNumber\", []);\n        return ethers_1.BigNumber.from(number).toNumber();\n    }\n    async getL1BatchDetails(number) {\n        return await this.send(\"zks_getL1BatchDetails\", [\n            number\n        ]);\n    }\n    async getBlockDetails(number) {\n        return await this.send(\"zks_getBlockDetails\", [\n            number\n        ]);\n    }\n    async getTransactionDetails(txHash) {\n        return await this.send(\"zks_getTransactionDetails\", [\n            txHash\n        ]);\n    }\n    async getWithdrawTx(transaction) {\n        var _a, _b, _c;\n        var _d;\n        const { ...tx } = transaction;\n        if (tx.to == null && tx.from == null) {\n            throw new Error(\"withdrawal target address is undefined\");\n        }\n        (_a = tx.to) !== null && _a !== void 0 ? _a : tx.to = tx.from;\n        (_b = tx.overrides) !== null && _b !== void 0 ? _b : tx.overrides = {};\n        (_c = (_d = tx.overrides).from) !== null && _c !== void 0 ? _c : _d.from = tx.from;\n        if ((0, utils_1.isETH)(tx.token)) {\n            if (!tx.overrides.value) {\n                tx.overrides.value = tx.amount;\n            }\n            const passedValue = ethers_1.BigNumber.from(tx.overrides.value);\n            if (!passedValue.eq(tx.amount)) {\n                // To avoid users shooting themselves into the foot, we will always use the amount to withdraw\n                // as the value\n                throw new Error(\"The tx.value is not equal to the value withdrawn\");\n            }\n            const ethL2Token = typechain_1.IEthTokenFactory.connect(utils_1.L2_ETH_TOKEN_ADDRESS, this);\n            return ethL2Token.populateTransaction.withdraw(tx.to, tx.overrides);\n        }\n        if (tx.bridgeAddress == null) {\n            const bridges = await this.getDefaultBridgeAddresses();\n            tx.bridgeAddress = bridges.erc20L2;\n        }\n        const bridge = typechain_1.IL2BridgeFactory.connect(tx.bridgeAddress, this);\n        return bridge.populateTransaction.withdraw(tx.to, tx.token, tx.amount, tx.overrides);\n    }\n    async estimateGasWithdraw(transaction) {\n        const withdrawTx = await this.getWithdrawTx(transaction);\n        return await this.estimateGas(withdrawTx);\n    }\n    async getTransferTx(transaction) {\n        var _a, _b;\n        var _c;\n        const { ...tx } = transaction;\n        (_a = tx.overrides) !== null && _a !== void 0 ? _a : tx.overrides = {};\n        (_b = (_c = tx.overrides).from) !== null && _b !== void 0 ? _b : _c.from = tx.from;\n        if (tx.token == null || tx.token == utils_1.ETH_ADDRESS) {\n            return {\n                ...await ethers_1.ethers.utils.resolveProperties(tx.overrides),\n                to: tx.to,\n                value: tx.amount\n            };\n        } else {\n            const token = typechain_1.IERC20MetadataFactory.connect(tx.token, this);\n            return await token.populateTransaction.transfer(tx.to, tx.amount, tx.overrides);\n        }\n    }\n    async estimateGasTransfer(transaction) {\n        const transferTx = await this.getTransferTx(transaction);\n        return await this.estimateGas(transferTx);\n    }\n    static getDefaultProvider() {\n        // TODO (SMA-1606): Add different urls for different networks.\n        return new Provider(process.env.ZKSYNC_WEB3_API_URL || \"http://localhost:3050\");\n    }\n    async newFilter(filter) {\n        filter = await filter;\n        const id = await this.send(\"eth_newFilter\", [\n            this._prepareFilter(filter)\n        ]);\n        return ethers_1.BigNumber.from(id);\n    }\n    async newBlockFilter() {\n        const id = await this.send(\"eth_newBlockFilter\", []);\n        return ethers_1.BigNumber.from(id);\n    }\n    async newPendingTransactionsFilter() {\n        const id = await this.send(\"eth_newPendingTransactionFilter\", []);\n        return ethers_1.BigNumber.from(id);\n    }\n    async getFilterChanges(idx) {\n        const logs = await this.send(\"eth_getFilterChanges\", [\n            idx.toHexString()\n        ]);\n        return typeof logs[0] === \"string\" ? logs : this._parseLogs(logs);\n    }\n    async getLogs(filter = {}) {\n        filter = await filter;\n        const logs = await this.send(\"eth_getLogs\", [\n            this._prepareFilter(filter)\n        ]);\n        return this._parseLogs(logs);\n    }\n    _parseLogs(logs) {\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n    _prepareFilter(filter) {\n        return {\n            ...filter,\n            fromBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.fromBlock),\n            toBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.toBlock)\n        };\n    }\n    _wrapTransaction(tx, hash) {\n        const response = super._wrapTransaction(tx, hash);\n        response.waitFinalize = async ()=>{\n            const receipt = await response.wait();\n            while(true){\n                const block = await this.getBlock(\"finalized\");\n                if (receipt.blockNumber <= block.number) {\n                    return await this.getTransactionReceipt(receipt.transactionHash);\n                } else {\n                    await (0, utils_1.sleep)(this.pollingInterval);\n                }\n            }\n        };\n        return response;\n    }\n    // This is inefficient. Status should probably be indicated in the transaction receipt.\n    async getTransactionStatus(txHash) {\n        const tx = await this.getTransaction(txHash);\n        if (tx == null) {\n            return types_1.TransactionStatus.NotFound;\n        }\n        if (tx.blockNumber == null) {\n            return types_1.TransactionStatus.Processing;\n        }\n        const verifiedBlock = await this.getBlock(\"finalized\");\n        if (tx.blockNumber <= verifiedBlock.number) {\n            return types_1.TransactionStatus.Finalized;\n        }\n        return types_1.TransactionStatus.Committed;\n    }\n    async getTransaction(hash) {\n        hash = await hash;\n        const tx = await super.getTransaction(hash);\n        return tx ? this._wrapTransaction(tx, hash) : null;\n    }\n    async sendTransaction(transaction) {\n        return await super.sendTransaction(transaction);\n    }\n    async getL2TransactionFromPriorityOp(l1TxResponse) {\n        const receipt = await l1TxResponse.wait();\n        const l2Hash = (0, utils_1.getL2HashFromPriorityOp)(receipt, await this.getMainContractAddress());\n        let status = null;\n        do {\n            status = await this.getTransactionStatus(l2Hash);\n            await (0, utils_1.sleep)(this.pollingInterval);\n        }while (status == types_1.TransactionStatus.NotFound);\n        return await this.getTransaction(l2Hash);\n    }\n    async getPriorityOpResponse(l1TxResponse) {\n        const l2Response = {\n            ...l1TxResponse\n        };\n        l2Response.waitL1Commit = l2Response.wait;\n        l2Response.wait = async ()=>{\n            const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);\n            return await l2Tx.wait();\n        };\n        l2Response.waitFinalize = async ()=>{\n            const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);\n            return await l2Tx.waitFinalize();\n        };\n        return l2Response;\n    }\n    async getContractAccountInfo(address) {\n        const deployerContract = new ethers_1.Contract(utils_1.CONTRACT_DEPLOYER_ADDRESS, utils_1.CONTRACT_DEPLOYER, this);\n        const data = await deployerContract.getAccountInfo(address);\n        return {\n            supportedAAVersion: data.supportedAAVersion,\n            nonceOrdering: data.nonceOrdering\n        };\n    }\n    // TODO (EVM-3): support refundRecipient for fee estimation\n    async estimateL1ToL2Execute(transaction) {\n        var _a, _b;\n        (_a = transaction.gasPerPubdataByte) !== null && _a !== void 0 ? _a : transaction.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;\n        // If the `from` address is not provided, we use a random address, because\n        // due to storage slot aggregation, the gas estimation will depend on the address\n        // and so estimation for the zero address may be smaller than for the sender.\n        (_b = transaction.caller) !== null && _b !== void 0 ? _b : transaction.caller = ethers_1.ethers.Wallet.createRandom().address;\n        const customData = {\n            gasPerPubdataByte: transaction.gasPerPubdataByte\n        };\n        if (transaction.factoryDeps) {\n            Object.assign(customData, {\n                factoryDeps: transaction.factoryDeps\n            });\n        }\n        const fee = await this.estimateGasL1({\n            from: transaction.caller,\n            data: transaction.calldata,\n            to: transaction.contractAddress,\n            value: transaction.l2Value,\n            customData\n        });\n        return fee;\n    }\n}\nexports.Provider = Provider;\nclass Web3Provider extends Provider {\n    constructor(provider, network){\n        if (provider == null) {\n            throw new Error(\"missing provider\");\n        }\n        if (!provider.request) {\n            throw new Error(\"provider must implement eip-1193\");\n        }\n        let path = provider.host || provider.path || (provider.isMetaMask ? \"metamask\" : \"eip-1193:\");\n        super(path, network);\n        this.provider = provider;\n    }\n    async send(method, params) {\n        params !== null && params !== void 0 ? params : params = [];\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && (this.provider.isMetaMask || this.provider.isStatus)) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = \"personal_sign\";\n            params = [\n                params[1],\n                params[0]\n            ];\n        }\n        return await this.provider.request({\n            method,\n            params\n        });\n    }\n    getSigner(addressOrIndex) {\n        return signer_1.Signer.from(super.getSigner(addressOrIndex));\n    }\n    async estimateGas(transaction) {\n        const gas = await super.estimateGas(transaction);\n        const metamaskMinimum = ethers_1.BigNumber.from(21000);\n        const isEIP712 = transaction.customData != null || transaction.type == utils_1.EIP712_TX_TYPE;\n        return gas.gt(metamaskMinimum) || isEIP712 ? gas : metamaskMinimum;\n    }\n}\nexports.Web3Provider = Web3Provider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/signer.js":
/*!******************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/signer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.L1Signer = exports.Signer = exports.EIP712Signer = exports.eip712Types = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-web3/build/src/utils.js\");\nconst hash_1 = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib.esm/index.js\");\nconst adapters_1 = __webpack_require__(/*! ./adapters */ \"(ssr)/./node_modules/zksync-web3/build/src/adapters.js\");\nexports.eip712Types = {\n    Transaction: [\n        { name: 'txType', type: 'uint256' },\n        { name: 'from', type: 'uint256' },\n        { name: 'to', type: 'uint256' },\n        { name: 'gasLimit', type: 'uint256' },\n        { name: 'gasPerPubdataByteLimit', type: 'uint256' },\n        { name: 'maxFeePerGas', type: 'uint256' },\n        { name: 'maxPriorityFeePerGas', type: 'uint256' },\n        { name: 'paymaster', type: 'uint256' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'value', type: 'uint256' },\n        { name: 'data', type: 'bytes' },\n        { name: 'factoryDeps', type: 'bytes32[]' },\n        { name: 'paymasterInput', type: 'bytes' }\n    ]\n};\nclass EIP712Signer {\n    constructor(ethSigner, chainId) {\n        this.ethSigner = ethSigner;\n        this.eip712Domain = Promise.resolve(chainId).then((chainId) => ({\n            name: 'zkSync',\n            version: '2',\n            chainId\n        }));\n    }\n    static getSignInput(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice;\n        const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n        const gasPerPubdataByteLimit = ((_a = transaction.customData) === null || _a === void 0 ? void 0 : _a.gasPerPubdata) || utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;\n        const signInput = {\n            txType: transaction.type,\n            from: transaction.from,\n            to: transaction.to,\n            gasLimit: transaction.gasLimit,\n            gasPerPubdataByteLimit: gasPerPubdataByteLimit,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            paymaster: ((_c = (_b = transaction.customData) === null || _b === void 0 ? void 0 : _b.paymasterParams) === null || _c === void 0 ? void 0 : _c.paymaster) || ethers_1.ethers.constants.AddressZero,\n            nonce: transaction.nonce,\n            value: transaction.value,\n            data: transaction.data,\n            factoryDeps: ((_e = (_d = transaction.customData) === null || _d === void 0 ? void 0 : _d.factoryDeps) === null || _e === void 0 ? void 0 : _e.map((dep) => (0, utils_1.hashBytecode)(dep))) || [],\n            paymasterInput: ((_g = (_f = transaction.customData) === null || _f === void 0 ? void 0 : _f.paymasterParams) === null || _g === void 0 ? void 0 : _g.paymasterInput) || '0x'\n        };\n        return signInput;\n    }\n    async sign(transaction) {\n        return await this.ethSigner._signTypedData(await this.eip712Domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n    }\n    static getSignedDigest(transaction) {\n        if (!transaction.chainId) {\n            throw Error(\"Transaction chainId isn't set\");\n        }\n        const domain = {\n            name: 'zkSync',\n            version: '2',\n            chainId: transaction.chainId\n        };\n        return hash_1._TypedDataEncoder.hash(domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n    }\n}\nexports.EIP712Signer = EIP712Signer;\n// This class is to be used on the frontend, with metamask injection.\n// It only contains L2 operations. For L1 operations, see L1Signer.\n// Sample usage:\n// const provider = new zkweb3.Web3Provider(window.ethereum);\n// const signer = provider.getSigner();\n// const tx = await signer.sendTransaction({ ... });\nclass Signer extends (0, adapters_1.AdapterL2)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _signerL2() {\n        return this;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    static from(signer) {\n        const newSigner = Object.setPrototypeOf(signer, Signer.prototype);\n        // @ts-ignore\n        newSigner.eip712 = new EIP712Signer(newSigner, newSigner.getChainId());\n        return newSigner;\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    async sendTransaction(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (transaction.customData == null && transaction.type == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return (await super.sendTransaction(transaction));\n        }\n        else {\n            const address = await this.getAddress();\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = address);\n            if (transaction.from.toLowerCase() != address.toLowerCase()) {\n                throw new Error('Transaction `from` address mismatch');\n            }\n            transaction.type = utils_1.EIP712_TX_TYPE;\n            (_b = transaction.value) !== null && _b !== void 0 ? _b : (transaction.value = 0);\n            (_c = transaction.data) !== null && _c !== void 0 ? _c : (transaction.data = '0x');\n            (_d = transaction.nonce) !== null && _d !== void 0 ? _d : (transaction.nonce = await this.getNonce());\n            transaction.customData = this._fillCustomData(transaction.customData);\n            (_e = transaction.gasPrice) !== null && _e !== void 0 ? _e : (transaction.gasPrice = await this.provider.getGasPrice());\n            (_f = transaction.gasLimit) !== null && _f !== void 0 ? _f : (transaction.gasLimit = await this.provider.estimateGas(transaction));\n            (_g = transaction.chainId) !== null && _g !== void 0 ? _g : (transaction.chainId = (await this.provider.getNetwork()).chainId);\n            transaction.customData.customSignature = await this.eip712.sign(transaction);\n            const txBytes = (0, utils_1.serialize)(transaction);\n            return await this.provider.sendTransaction(txBytes);\n        }\n    }\n}\nexports.Signer = Signer;\n// This class is to be used on the frontend with metamask injection.\n// It only contains L1 operations. For L2 operations, see Signer.\n// Sample usage:\n// const provider = new ethers.Web3Provider(window.ethereum);\n// const zksyncProvider = new zkweb3.Provider('<rpc_url>');\n// const signer = zkweb3.L1Signer.from(provider.getSigner(), zksyncProvider);\n// const tx = await signer.deposit({ ... });\nclass L1Signer extends (0, adapters_1.AdapterL1)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _providerL2() {\n        return this.providerL2;\n    }\n    _providerL1() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this;\n    }\n    static from(signer, zksyncProvider) {\n        const newSigner = Object.setPrototypeOf(signer, L1Signer.prototype);\n        newSigner.providerL2 = zksyncProvider;\n        return newSigner;\n    }\n    connectToL2(provider) {\n        this.providerL2 = provider;\n        return this;\n    }\n}\nexports.L1Signer = L1Signer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountNonceOrdering = exports.AccountAbstractionVersion = exports.TransactionStatus = exports.PriorityOpTree = exports.PriorityQueueType = exports.Network = void 0;\n// Ethereum network\nvar Network;\n(function (Network) {\n    Network[Network[\"Mainnet\"] = 1] = \"Mainnet\";\n    Network[Network[\"Ropsten\"] = 3] = \"Ropsten\";\n    Network[Network[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Network[Network[\"Goerli\"] = 5] = \"Goerli\";\n    Network[Network[\"Localhost\"] = 9] = \"Localhost\";\n})(Network = exports.Network || (exports.Network = {}));\nvar PriorityQueueType;\n(function (PriorityQueueType) {\n    PriorityQueueType[PriorityQueueType[\"Deque\"] = 0] = \"Deque\";\n    PriorityQueueType[PriorityQueueType[\"HeapBuffer\"] = 1] = \"HeapBuffer\";\n    PriorityQueueType[PriorityQueueType[\"Heap\"] = 2] = \"Heap\";\n})(PriorityQueueType = exports.PriorityQueueType || (exports.PriorityQueueType = {}));\nvar PriorityOpTree;\n(function (PriorityOpTree) {\n    PriorityOpTree[PriorityOpTree[\"Full\"] = 0] = \"Full\";\n    PriorityOpTree[PriorityOpTree[\"Rollup\"] = 1] = \"Rollup\";\n})(PriorityOpTree = exports.PriorityOpTree || (exports.PriorityOpTree = {}));\nvar TransactionStatus;\n(function (TransactionStatus) {\n    TransactionStatus[\"NotFound\"] = \"not-found\";\n    TransactionStatus[\"Processing\"] = \"processing\";\n    TransactionStatus[\"Committed\"] = \"committed\";\n    TransactionStatus[\"Finalized\"] = \"finalized\";\n})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));\nvar AccountAbstractionVersion;\n(function (AccountAbstractionVersion) {\n    AccountAbstractionVersion[AccountAbstractionVersion[\"None\"] = 0] = \"None\";\n    AccountAbstractionVersion[AccountAbstractionVersion[\"Version1\"] = 1] = \"Version1\";\n})(AccountAbstractionVersion = exports.AccountAbstractionVersion || (exports.AccountAbstractionVersion = {}));\nvar AccountNonceOrdering;\n(function (AccountNonceOrdering) {\n    AccountNonceOrdering[AccountNonceOrdering[\"Sequential\"] = 0] = \"Sequential\";\n    AccountNonceOrdering[AccountNonceOrdering[\"Arbitrary\"] = 1] = \"Arbitrary\";\n})(AccountNonceOrdering = exports.AccountNonceOrdering || (exports.AccountNonceOrdering = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvc3JjL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLGlDQUFpQyxHQUFHLHlCQUF5QixHQUFHLHNCQUFzQixHQUFHLHlCQUF5QixHQUFHLGVBQWU7QUFDbks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDLGVBQWUsS0FBSztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0QseUJBQXlCLEtBQUs7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9EQUFvRCx5QkFBeUIsS0FBSztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0VBQW9FLGlDQUFpQyxLQUFLO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwREFBMEQsNEJBQTRCLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy96a3N5bmMtd2ViMy9idWlsZC9zcmMvdHlwZXMuanM/YjliNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWNjb3VudE5vbmNlT3JkZXJpbmcgPSBleHBvcnRzLkFjY291bnRBYnN0cmFjdGlvblZlcnNpb24gPSBleHBvcnRzLlRyYW5zYWN0aW9uU3RhdHVzID0gZXhwb3J0cy5Qcmlvcml0eU9wVHJlZSA9IGV4cG9ydHMuUHJpb3JpdHlRdWV1ZVR5cGUgPSBleHBvcnRzLk5ldHdvcmsgPSB2b2lkIDA7XG4vLyBFdGhlcmV1bSBuZXR3b3JrXG52YXIgTmV0d29yaztcbihmdW5jdGlvbiAoTmV0d29yaykge1xuICAgIE5ldHdvcmtbTmV0d29ya1tcIk1haW5uZXRcIl0gPSAxXSA9IFwiTWFpbm5ldFwiO1xuICAgIE5ldHdvcmtbTmV0d29ya1tcIlJvcHN0ZW5cIl0gPSAzXSA9IFwiUm9wc3RlblwiO1xuICAgIE5ldHdvcmtbTmV0d29ya1tcIlJpbmtlYnlcIl0gPSA0XSA9IFwiUmlua2VieVwiO1xuICAgIE5ldHdvcmtbTmV0d29ya1tcIkdvZXJsaVwiXSA9IDVdID0gXCJHb2VybGlcIjtcbiAgICBOZXR3b3JrW05ldHdvcmtbXCJMb2NhbGhvc3RcIl0gPSA5XSA9IFwiTG9jYWxob3N0XCI7XG59KShOZXR3b3JrID0gZXhwb3J0cy5OZXR3b3JrIHx8IChleHBvcnRzLk5ldHdvcmsgPSB7fSkpO1xudmFyIFByaW9yaXR5UXVldWVUeXBlO1xuKGZ1bmN0aW9uIChQcmlvcml0eVF1ZXVlVHlwZSkge1xuICAgIFByaW9yaXR5UXVldWVUeXBlW1ByaW9yaXR5UXVldWVUeXBlW1wiRGVxdWVcIl0gPSAwXSA9IFwiRGVxdWVcIjtcbiAgICBQcmlvcml0eVF1ZXVlVHlwZVtQcmlvcml0eVF1ZXVlVHlwZVtcIkhlYXBCdWZmZXJcIl0gPSAxXSA9IFwiSGVhcEJ1ZmZlclwiO1xuICAgIFByaW9yaXR5UXVldWVUeXBlW1ByaW9yaXR5UXVldWVUeXBlW1wiSGVhcFwiXSA9IDJdID0gXCJIZWFwXCI7XG59KShQcmlvcml0eVF1ZXVlVHlwZSA9IGV4cG9ydHMuUHJpb3JpdHlRdWV1ZVR5cGUgfHwgKGV4cG9ydHMuUHJpb3JpdHlRdWV1ZVR5cGUgPSB7fSkpO1xudmFyIFByaW9yaXR5T3BUcmVlO1xuKGZ1bmN0aW9uIChQcmlvcml0eU9wVHJlZSkge1xuICAgIFByaW9yaXR5T3BUcmVlW1ByaW9yaXR5T3BUcmVlW1wiRnVsbFwiXSA9IDBdID0gXCJGdWxsXCI7XG4gICAgUHJpb3JpdHlPcFRyZWVbUHJpb3JpdHlPcFRyZWVbXCJSb2xsdXBcIl0gPSAxXSA9IFwiUm9sbHVwXCI7XG59KShQcmlvcml0eU9wVHJlZSA9IGV4cG9ydHMuUHJpb3JpdHlPcFRyZWUgfHwgKGV4cG9ydHMuUHJpb3JpdHlPcFRyZWUgPSB7fSkpO1xudmFyIFRyYW5zYWN0aW9uU3RhdHVzO1xuKGZ1bmN0aW9uIChUcmFuc2FjdGlvblN0YXR1cykge1xuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1wiTm90Rm91bmRcIl0gPSBcIm5vdC1mb3VuZFwiO1xuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1wiUHJvY2Vzc2luZ1wiXSA9IFwicHJvY2Vzc2luZ1wiO1xuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1wiQ29tbWl0dGVkXCJdID0gXCJjb21taXR0ZWRcIjtcbiAgICBUcmFuc2FjdGlvblN0YXR1c1tcIkZpbmFsaXplZFwiXSA9IFwiZmluYWxpemVkXCI7XG59KShUcmFuc2FjdGlvblN0YXR1cyA9IGV4cG9ydHMuVHJhbnNhY3Rpb25TdGF0dXMgfHwgKGV4cG9ydHMuVHJhbnNhY3Rpb25TdGF0dXMgPSB7fSkpO1xudmFyIEFjY291bnRBYnN0cmFjdGlvblZlcnNpb247XG4oZnVuY3Rpb24gKEFjY291bnRBYnN0cmFjdGlvblZlcnNpb24pIHtcbiAgICBBY2NvdW50QWJzdHJhY3Rpb25WZXJzaW9uW0FjY291bnRBYnN0cmFjdGlvblZlcnNpb25bXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICBBY2NvdW50QWJzdHJhY3Rpb25WZXJzaW9uW0FjY291bnRBYnN0cmFjdGlvblZlcnNpb25bXCJWZXJzaW9uMVwiXSA9IDFdID0gXCJWZXJzaW9uMVwiO1xufSkoQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbiA9IGV4cG9ydHMuQWNjb3VudEFic3RyYWN0aW9uVmVyc2lvbiB8fCAoZXhwb3J0cy5BY2NvdW50QWJzdHJhY3Rpb25WZXJzaW9uID0ge30pKTtcbnZhciBBY2NvdW50Tm9uY2VPcmRlcmluZztcbihmdW5jdGlvbiAoQWNjb3VudE5vbmNlT3JkZXJpbmcpIHtcbiAgICBBY2NvdW50Tm9uY2VPcmRlcmluZ1tBY2NvdW50Tm9uY2VPcmRlcmluZ1tcIlNlcXVlbnRpYWxcIl0gPSAwXSA9IFwiU2VxdWVudGlhbFwiO1xuICAgIEFjY291bnROb25jZU9yZGVyaW5nW0FjY291bnROb25jZU9yZGVyaW5nW1wiQXJiaXRyYXJ5XCJdID0gMV0gPSBcIkFyYml0cmFyeVwiO1xufSkoQWNjb3VudE5vbmNlT3JkZXJpbmcgPSBleHBvcnRzLkFjY291bnROb25jZU9yZGVyaW5nIHx8IChleHBvcnRzLkFjY291bnROb25jZU9yZGVyaW5nID0ge30pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/utils.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.estimateDefaultBridgeDepositL2Gas = exports.isTypedDataSignatureCorrect = exports.isMessageSignatureCorrect = exports.getERC20BridgeCalldata = exports.undoL1ToL2Alias = exports.applyL1ToL2Alias = exports.getL2HashFromPriorityOp = exports.parseTransaction = exports.hashBytecode = exports.serialize = exports.checkBaseCost = exports.createAddress = exports.create2Address = exports.getDeployedContracts = exports.getHashedL2ToL1Msg = exports.layer1TxDefaults = exports.sleep = exports.isETH = exports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = exports.DEFAULT_GAS_PER_PUBDATA_LIMIT = exports.MAX_BYTECODE_LEN_BYTES = exports.PRIORITY_OPERATION_L2_TX_TYPE = exports.EIP712_TX_TYPE = exports.EIP1271_MAGIC_VALUE = exports.L1_TO_L2_ALIAS_OFFSET = exports.L2_ETH_TOKEN_ADDRESS = exports.L1_MESSENGER_ADDRESS = exports.CONTRACT_DEPLOYER_ADDRESS = exports.BOOTLOADER_FORMAL_ADDRESS = exports.L2_BRIDGE_ABI = exports.L1_BRIDGE_ABI = exports.IERC1271 = exports.IERC20 = exports.L1_MESSENGER = exports.CONTRACT_DEPLOYER = exports.ZKSYNC_MAIN_ABI = exports.ETH_ADDRESS = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/zksync-web3/build/src/types.js\");\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-web3/build/src/signer.js\");\nconst typechain_1 = __webpack_require__(/*! ../typechain */ \"(ssr)/./node_modules/zksync-web3/build/typechain/index.js\");\nconst utils_1 = __webpack_require__(/*! ethers/lib/utils */ \"(ssr)/./node_modules/ethers/lib/utils.js\");\n__exportStar(__webpack_require__(/*! ./paymaster-utils */ \"(ssr)/./node_modules/zksync-web3/build/src/paymaster-utils.js\"), exports);\nexports.ETH_ADDRESS = '0x0000000000000000000000000000000000000000';\nexports.ZKSYNC_MAIN_ABI = new ethers_1.utils.Interface((__webpack_require__(/*! ../../abi/IZkSync.json */ \"(ssr)/./node_modules/zksync-web3/abi/IZkSync.json\").abi));\nexports.CONTRACT_DEPLOYER = new ethers_1.utils.Interface((__webpack_require__(/*! ../../abi/ContractDeployer.json */ \"(ssr)/./node_modules/zksync-web3/abi/ContractDeployer.json\").abi));\nexports.L1_MESSENGER = new ethers_1.utils.Interface((__webpack_require__(/*! ../../abi/IL1Messenger.json */ \"(ssr)/./node_modules/zksync-web3/abi/IL1Messenger.json\").abi));\nexports.IERC20 = new ethers_1.utils.Interface((__webpack_require__(/*! ../../abi/IERC20.json */ \"(ssr)/./node_modules/zksync-web3/abi/IERC20.json\").abi));\nexports.IERC1271 = new ethers_1.utils.Interface((__webpack_require__(/*! ../../abi/IERC1271.json */ \"(ssr)/./node_modules/zksync-web3/abi/IERC1271.json\").abi));\nexports.L1_BRIDGE_ABI = new ethers_1.utils.Interface((__webpack_require__(/*! ../../abi/IL1Bridge.json */ \"(ssr)/./node_modules/zksync-web3/abi/IL1Bridge.json\").abi));\nexports.L2_BRIDGE_ABI = new ethers_1.utils.Interface((__webpack_require__(/*! ../../abi/IL2Bridge.json */ \"(ssr)/./node_modules/zksync-web3/abi/IL2Bridge.json\").abi));\nexports.BOOTLOADER_FORMAL_ADDRESS = '0x0000000000000000000000000000000000008001';\nexports.CONTRACT_DEPLOYER_ADDRESS = '0x0000000000000000000000000000000000008006';\nexports.L1_MESSENGER_ADDRESS = '0x0000000000000000000000000000000000008008';\nexports.L2_ETH_TOKEN_ADDRESS = '0x000000000000000000000000000000000000800a';\nexports.L1_TO_L2_ALIAS_OFFSET = '0x1111000000000000000000000000000000001111';\nexports.EIP1271_MAGIC_VALUE = '0x1626ba7e';\nexports.EIP712_TX_TYPE = 0x71;\nexports.PRIORITY_OPERATION_L2_TX_TYPE = 0xff;\nexports.MAX_BYTECODE_LEN_BYTES = ((1 << 16) - 1) * 32;\n// The large L2 gas per pubdata to sign. This gas is enough to ensure that\n// any reasonable limit will be accepted. Note, that the operator is NOT required to\n// use the honest value of gas per pubdata and it can use any value up to the one signed by the user.\n// In the future releases, we will provide a way to estimate the current gasPerPubdata.\nexports.DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;\n// It is possible to provide practically any gasPerPubdataByte for L1->L2 transactions, since\n// the cost per gas will be adjusted respectively. We will use 800 as an relatively optimal value for now.\nexports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = 800;\nfunction isETH(token) {\n    return token.toLowerCase() == exports.ETH_ADDRESS || token.toLowerCase() == exports.L2_ETH_TOKEN_ADDRESS;\n}\nexports.isETH = isETH;\nfunction sleep(millis) {\n    return new Promise((resolve) => setTimeout(resolve, millis));\n}\nexports.sleep = sleep;\nfunction layer1TxDefaults() {\n    return {\n        queueType: types_1.PriorityQueueType.Deque,\n        opTree: types_1.PriorityOpTree.Full\n    };\n}\nexports.layer1TxDefaults = layer1TxDefaults;\nfunction getHashedL2ToL1Msg(sender, msg, txNumberInBlock) {\n    const encodedMsg = new Uint8Array([\n        0,\n        1,\n        ...ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(txNumberInBlock), 2),\n        ...ethers_1.ethers.utils.arrayify(exports.L1_MESSENGER_ADDRESS),\n        ...ethers_1.ethers.utils.zeroPad(sender, 32),\n        ...ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.keccak256(msg))\n    ]);\n    return ethers_1.ethers.utils.keccak256(encodedMsg);\n}\nexports.getHashedL2ToL1Msg = getHashedL2ToL1Msg;\nfunction getDeployedContracts(receipt) {\n    const addressBytesLen = 40;\n    const deployedContracts = receipt.logs\n        .filter((log) => log.topics[0] == ethers_1.utils.id('ContractDeployed(address,bytes32,address)') &&\n        log.address == exports.CONTRACT_DEPLOYER_ADDRESS)\n        // Take the last topic (deployed contract address as U256) and extract address from it (U160).\n        .map((log) => {\n        const sender = `0x${log.topics[1].slice(log.topics[1].length - addressBytesLen)}`;\n        const bytesCodehash = log.topics[2];\n        const address = `0x${log.topics[3].slice(log.topics[3].length - addressBytesLen)}`;\n        return {\n            sender: ethers_1.utils.getAddress(sender),\n            bytecodeHash: bytesCodehash,\n            deployedAddress: ethers_1.utils.getAddress(address)\n        };\n    });\n    return deployedContracts;\n}\nexports.getDeployedContracts = getDeployedContracts;\nfunction create2Address(sender, bytecodeHash, salt, input) {\n    const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes('zksyncCreate2'));\n    const inputHash = ethers_1.ethers.utils.keccak256(input);\n    const addressBytes = ethers_1.ethers.utils\n        .keccak256(ethers_1.ethers.utils.concat([prefix, ethers_1.ethers.utils.zeroPad(sender, 32), salt, bytecodeHash, inputHash]))\n        .slice(26);\n    return ethers_1.ethers.utils.getAddress(addressBytes);\n}\nexports.create2Address = create2Address;\nfunction createAddress(sender, senderNonce) {\n    const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes('zksyncCreate'));\n    const addressBytes = ethers_1.ethers.utils\n        .keccak256(ethers_1.ethers.utils.concat([\n        prefix,\n        ethers_1.ethers.utils.zeroPad(sender, 32),\n        ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(senderNonce), 32)\n    ]))\n        .slice(26);\n    return ethers_1.ethers.utils.getAddress(addressBytes);\n}\nexports.createAddress = createAddress;\nasync function checkBaseCost(baseCost, value) {\n    if (baseCost.gt(await value)) {\n        throw new Error(`The base cost of performing the priority operation is higher than the provided value parameter ` +\n            `for the transaction: baseCost: ${baseCost}, provided value: ${value}`);\n    }\n}\nexports.checkBaseCost = checkBaseCost;\nfunction serialize(transaction, signature) {\n    var _a;\n    if (transaction.customData == null && transaction.type != exports.EIP712_TX_TYPE) {\n        return ethers_1.utils.serializeTransaction(transaction, signature);\n    }\n    if (!transaction.chainId) {\n        throw Error(\"Transaction chainId isn't set\");\n    }\n    function formatNumber(value, name) {\n        const result = ethers_1.utils.stripZeros(ethers_1.BigNumber.from(value).toHexString());\n        if (result.length > 32) {\n            throw new Error('invalid length for ' + name);\n        }\n        return result;\n    }\n    if (!transaction.from) {\n        throw new Error('Explicitly providing `from` field is reqiured for EIP712 transactions');\n    }\n    const from = transaction.from;\n    const meta = transaction.customData;\n    let maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;\n    let maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const fields = [\n        formatNumber(transaction.nonce || 0, 'nonce'),\n        formatNumber(maxPriorityFeePerGas, 'maxPriorityFeePerGas'),\n        formatNumber(maxFeePerGas, 'maxFeePerGas'),\n        formatNumber(transaction.gasLimit || 0, 'gasLimit'),\n        transaction.to != null ? ethers_1.utils.getAddress(transaction.to) : '0x',\n        formatNumber(transaction.value || 0, 'value'),\n        transaction.data || '0x'\n    ];\n    if (signature) {\n        const sig = ethers_1.utils.splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, 'recoveryParam'));\n        fields.push(ethers_1.utils.stripZeros(sig.r));\n        fields.push(ethers_1.utils.stripZeros(sig.s));\n    }\n    else {\n        fields.push(formatNumber(transaction.chainId, 'chainId'));\n        fields.push('0x');\n        fields.push('0x');\n    }\n    fields.push(formatNumber(transaction.chainId, 'chainId'));\n    fields.push(ethers_1.utils.getAddress(from));\n    // Add meta\n    fields.push(formatNumber(meta.gasPerPubdata || exports.DEFAULT_GAS_PER_PUBDATA_LIMIT, 'gasPerPubdata'));\n    fields.push(((_a = meta.factoryDeps) !== null && _a !== void 0 ? _a : []).map((dep) => ethers_1.utils.hexlify(dep)));\n    if (meta.customSignature && ethers_1.ethers.utils.arrayify(meta.customSignature).length == 0) {\n        throw new Error('Empty signatures are not supported');\n    }\n    fields.push(meta.customSignature || '0x');\n    if (meta.paymasterParams) {\n        fields.push([meta.paymasterParams.paymaster, ethers_1.ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);\n    }\n    else {\n        fields.push([]);\n    }\n    return ethers_1.utils.hexConcat([[exports.EIP712_TX_TYPE], ethers_1.utils.RLP.encode(fields)]);\n}\nexports.serialize = serialize;\nfunction hashBytecode(bytecode) {\n    // For getting the consistent length we first convert the bytecode to UInt8Array\n    const bytecodeAsArray = ethers_1.ethers.utils.arrayify(bytecode);\n    if (bytecodeAsArray.length % 32 != 0) {\n        throw new Error('The bytecode length in bytes must be divisible by 32');\n    }\n    if (bytecodeAsArray.length > exports.MAX_BYTECODE_LEN_BYTES) {\n        throw new Error(`Bytecode can not be longer than ${exports.MAX_BYTECODE_LEN_BYTES} bytes`);\n    }\n    const hashStr = ethers_1.ethers.utils.sha256(bytecodeAsArray);\n    const hash = ethers_1.ethers.utils.arrayify(hashStr);\n    // Note that the length of the bytecode\n    // should be provided in 32-byte words.\n    const bytecodeLengthInWords = bytecodeAsArray.length / 32;\n    if (bytecodeLengthInWords % 2 == 0) {\n        throw new Error('Bytecode length in 32-byte words must be odd');\n    }\n    const bytecodeLength = ethers_1.ethers.utils.arrayify(bytecodeLengthInWords);\n    // The bytecode should always take the first 2 bytes of the bytecode hash,\n    // so we pad it from the left in case the length is smaller than 2 bytes.\n    const bytecodeLengthPadded = ethers_1.ethers.utils.zeroPad(bytecodeLength, 2);\n    const codeHashVersion = new Uint8Array([1, 0]);\n    hash.set(codeHashVersion, 0);\n    hash.set(bytecodeLengthPadded, 2);\n    return hash;\n}\nexports.hashBytecode = hashBytecode;\nfunction parseTransaction(payload) {\n    function handleAddress(value) {\n        if (value === '0x') {\n            return null;\n        }\n        return ethers_1.utils.getAddress(value);\n    }\n    function handleNumber(value) {\n        if (value === '0x') {\n            return ethers_1.BigNumber.from(0);\n        }\n        return ethers_1.BigNumber.from(value);\n    }\n    function arrayToPaymasterParams(arr) {\n        if (arr.length == 0) {\n            return undefined;\n        }\n        if (arr.length != 2) {\n            throw new Error(`Invalid paymaster parameters, expected to have length of 2, found ${arr.length}`);\n        }\n        return {\n            paymaster: ethers_1.utils.getAddress(arr[0]),\n            paymasterInput: ethers_1.utils.arrayify(arr[1])\n        };\n    }\n    const bytes = ethers_1.utils.arrayify(payload);\n    if (bytes[0] != exports.EIP712_TX_TYPE) {\n        return ethers_1.utils.parseTransaction(bytes);\n    }\n    const raw = ethers_1.utils.RLP.decode(bytes.slice(1));\n    const transaction = {\n        type: exports.EIP712_TX_TYPE,\n        nonce: handleNumber(raw[0]).toNumber(),\n        maxPriorityFeePerGas: handleNumber(raw[1]),\n        maxFeePerGas: handleNumber(raw[2]),\n        gasLimit: handleNumber(raw[3]),\n        to: handleAddress(raw[4]),\n        value: handleNumber(raw[5]),\n        data: raw[6],\n        chainId: handleNumber(raw[10]),\n        from: handleAddress(raw[11]),\n        customData: {\n            gasPerPubdata: handleNumber(raw[12]),\n            factoryDeps: raw[13],\n            customSignature: raw[14],\n            paymasterParams: arrayToPaymasterParams(raw[15])\n        }\n    };\n    const ethSignature = {\n        v: handleNumber(raw[7]).toNumber(),\n        r: raw[8],\n        s: raw[9]\n    };\n    if ((ethers_1.utils.hexlify(ethSignature.r) == '0x' || ethers_1.utils.hexlify(ethSignature.s) == '0x') &&\n        !transaction.customData.customSignature) {\n        return transaction;\n    }\n    if (ethSignature.v !== 0 && ethSignature.v !== 1 && !transaction.customData.customSignature) {\n        throw new Error('Failed to parse signature');\n    }\n    if (!transaction.customData.customSignature) {\n        transaction.v = ethSignature.v;\n        transaction.s = ethSignature.s;\n        transaction.r = ethSignature.r;\n    }\n    transaction.hash = eip712TxHash(transaction, ethSignature);\n    return transaction;\n}\nexports.parseTransaction = parseTransaction;\nfunction getSignature(transaction, ethSignature) {\n    var _a;\n    if (((_a = transaction === null || transaction === void 0 ? void 0 : transaction.customData) === null || _a === void 0 ? void 0 : _a.customSignature) && transaction.customData.customSignature.length) {\n        return ethers_1.ethers.utils.arrayify(transaction.customData.customSignature);\n    }\n    if (!ethSignature) {\n        throw new Error('No signature provided');\n    }\n    const r = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.r), 32);\n    const s = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.s), 32);\n    const v = ethSignature.v;\n    return new Uint8Array([...r, ...s, v]);\n}\nfunction eip712TxHash(transaction, ethSignature) {\n    const signedDigest = signer_1.EIP712Signer.getSignedDigest(transaction);\n    const hashedSignature = ethers_1.ethers.utils.keccak256(getSignature(transaction, ethSignature));\n    return ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.hexConcat([signedDigest, hashedSignature]));\n}\nfunction getL2HashFromPriorityOp(txReceipt, zkSyncAddress) {\n    let txHash = null;\n    for (const log of txReceipt.logs) {\n        if (log.address.toLowerCase() != zkSyncAddress.toLowerCase()) {\n            continue;\n        }\n        try {\n            const priorityQueueLog = exports.ZKSYNC_MAIN_ABI.parseLog(log);\n            if (priorityQueueLog && priorityQueueLog.args.txHash != null) {\n                txHash = priorityQueueLog.args.txHash;\n            }\n        }\n        catch { }\n    }\n    if (!txHash) {\n        throw new Error('Failed to parse tx logs');\n    }\n    return txHash;\n}\nexports.getL2HashFromPriorityOp = getL2HashFromPriorityOp;\nconst ADDRESS_MODULO = ethers_1.BigNumber.from(2).pow(160);\nfunction applyL1ToL2Alias(address) {\n    return ethers_1.ethers.utils.hexlify(ethers_1.ethers.BigNumber.from(address).add(exports.L1_TO_L2_ALIAS_OFFSET).mod(ADDRESS_MODULO));\n}\nexports.applyL1ToL2Alias = applyL1ToL2Alias;\nfunction undoL1ToL2Alias(address) {\n    let result = ethers_1.ethers.BigNumber.from(address).sub(exports.L1_TO_L2_ALIAS_OFFSET);\n    if (result.lt(ethers_1.BigNumber.from(0))) {\n        result = result.add(ADDRESS_MODULO);\n    }\n    return ethers_1.ethers.utils.hexlify(result);\n}\nexports.undoL1ToL2Alias = undoL1ToL2Alias;\n/// Getters data used to correctly initialize the L1 token counterpart on L2\nasync function getERC20GettersData(l1TokenAddress, provider) {\n    const token = typechain_1.IERC20MetadataFactory.connect(l1TokenAddress, provider);\n    const name = await token.name();\n    const symbol = await token.symbol();\n    const decimals = await token.decimals();\n    const coder = new utils_1.AbiCoder();\n    const nameBytes = coder.encode(['string'], [name]);\n    const symbolBytes = coder.encode(['string'], [symbol]);\n    const decimalsBytes = coder.encode(['uint256'], [decimals]);\n    return coder.encode(['bytes', 'bytes', 'bytes'], [nameBytes, symbolBytes, decimalsBytes]);\n}\n/// The method that returns the calldata that will be sent by an L1 ERC20 bridge to its L2 counterpart\n/// during bridging of a token.\nasync function getERC20BridgeCalldata(l1TokenAddress, l1Sender, l2Receiver, amount, provider) {\n    const gettersData = await getERC20GettersData(l1TokenAddress, provider);\n    return exports.L2_BRIDGE_ABI.encodeFunctionData('finalizeDeposit', [\n        l1Sender,\n        l2Receiver,\n        l1TokenAddress,\n        amount,\n        gettersData\n    ]);\n}\nexports.getERC20BridgeCalldata = getERC20BridgeCalldata;\n// The method with similar functionality is already available in ethers.js,\n// the only difference is that we provide additional `try { } catch { }`\n// for error-resilience.\n//\n// It will also pave the road for allowing future EIP-1271 signature verification, by\n// letting our SDK have functionality to verify signatures.\nfunction isECDSASignatureCorrect(address, msgHash, signature) {\n    try {\n        return address == ethers_1.ethers.utils.recoverAddress(msgHash, signature);\n    }\n    catch {\n        // In case ECDSA signature verification has thrown an error,\n        // we simply consider the signature as incorrect.\n        return false;\n    }\n}\nasync function isEIP1271SignatureCorrect(provider, address, msgHash, signature) {\n    const accountContract = new ethers_1.ethers.Contract(address, exports.IERC1271, provider);\n    // This line may throw an exception if the contract does not implement the EIP1271 correctly.\n    // But it may also throw an exception in case the internet connection is lost.\n    // It is the caller's responsibility to handle the exception.\n    const result = await accountContract.isValidSignature(msgHash, signature);\n    return result == exports.EIP1271_MAGIC_VALUE;\n}\nasync function isSignatureCorrect(provider, address, msgHash, signature) {\n    let isContractAccount = false;\n    const code = await provider.getCode(address);\n    isContractAccount = ethers_1.ethers.utils.arrayify(code).length != 0;\n    if (!isContractAccount) {\n        return isECDSASignatureCorrect(address, msgHash, signature);\n    }\n    else {\n        return await isEIP1271SignatureCorrect(provider, address, msgHash, signature);\n    }\n}\n// Returns `true` or `false` depending on whether or not the account abstraction's\n// signature is correct. Note, that while currently it does not do any `async` actions.\n// in the future it will. That's why the `Promise<boolean>` is returned.\nasync function isMessageSignatureCorrect(provider, address, message, signature) {\n    const msgHash = ethers_1.ethers.utils.hashMessage(message);\n    return await isSignatureCorrect(provider, address, msgHash, signature);\n}\nexports.isMessageSignatureCorrect = isMessageSignatureCorrect;\n// Returns `true` or `false` depending on whether or not the account abstraction's\n// EIP712 signature is correct. Note, that while currently it does not do any `async` actions.\n// in the future it will. That's why the `Promise<boolean>` is returned.\nasync function isTypedDataSignatureCorrect(provider, address, domain, types, value, signature) {\n    const msgHash = ethers_1.ethers.utils._TypedDataEncoder.hash(domain, types, value);\n    return await isSignatureCorrect(provider, address, msgHash, signature);\n}\nexports.isTypedDataSignatureCorrect = isTypedDataSignatureCorrect;\nasync function estimateDefaultBridgeDepositL2Gas(providerL1, providerL2, token, amount, to, from, gasPerPubdataByte) {\n    // If the `from` address is not provided, we use a random address, because\n    // due to storage slot aggregation, the gas estimation will depend on the address\n    // and so estimation for the zero address may be smaller than for the sender.\n    from !== null && from !== void 0 ? from : (from = ethers_1.ethers.Wallet.createRandom().address);\n    if (token == exports.ETH_ADDRESS) {\n        return await providerL2.estimateL1ToL2Execute({\n            contractAddress: to,\n            gasPerPubdataByte: gasPerPubdataByte,\n            caller: from,\n            calldata: '0x',\n            l2Value: amount\n        });\n    }\n    else {\n        const l1ERC20BridgeAddresses = (await providerL2.getDefaultBridgeAddresses()).erc20L1;\n        const erc20BridgeAddress = (await providerL2.getDefaultBridgeAddresses()).erc20L2;\n        const calldata = await getERC20BridgeCalldata(token, from, to, amount, providerL1);\n        return await providerL2.estimateL1ToL2Execute({\n            caller: applyL1ToL2Alias(l1ERC20BridgeAddresses),\n            contractAddress: erc20BridgeAddress,\n            gasPerPubdataByte: gasPerPubdataByte,\n            calldata: calldata\n        });\n    }\n}\nexports.estimateDefaultBridgeDepositL2Gas = estimateDefaultBridgeDepositL2Gas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/src/wallet.js":
/*!******************************************************!*\
  !*** ./node_modules/zksync-web3/build/src/wallet.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Wallet = void 0;\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/zksync-web3/build/src/signer.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/zksync-web3/build/src/utils.js\");\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nconst adapters_1 = __webpack_require__(/*! ./adapters */ \"(ssr)/./node_modules/zksync-web3/build/src/adapters.js\");\nclass Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {\n    _providerL1() {\n        if (this.providerL1 == null) {\n            throw new Error('L1 provider missing: use `connectToL1` to specify');\n        }\n        return this.providerL1;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this.ethWallet();\n    }\n    _signerL2() {\n        return this;\n    }\n    ethWallet() {\n        return new ethers_1.ethers.Wallet(this._signingKey(), this._providerL1());\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    connect(provider) {\n        return new Wallet(this._signingKey(), provider, this.providerL1);\n    }\n    connectToL1(provider) {\n        return new Wallet(this._signingKey(), this.provider, provider);\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        const wallet = super.fromMnemonic(mnemonic, path, wordlist);\n        return new Wallet(wallet._signingKey());\n    }\n    static async fromEncryptedJson(json, password, callback) {\n        const wallet = await super.fromEncryptedJson(json, password, callback);\n        return new Wallet(wallet._signingKey());\n    }\n    static fromEncryptedJsonSync(json, password) {\n        const wallet = super.fromEncryptedJsonSync(json, password);\n        return new Wallet(wallet._signingKey());\n    }\n    static createRandom(options) {\n        const wallet = super.createRandom(options);\n        return new Wallet(wallet._signingKey());\n    }\n    constructor(privateKey, providerL2, providerL1) {\n        super(privateKey, providerL2);\n        if (this.provider != null) {\n            const chainId = this.getChainId();\n            // @ts-ignore\n            this.eip712 = new signer_1.EIP712Signer(this, chainId);\n        }\n        this.providerL1 = providerL1;\n    }\n    async populateTransaction(transaction) {\n        var _a, _b;\n        if (transaction.type == null && transaction.customData == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        transaction = await super.populateTransaction(transaction);\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return transaction;\n        }\n        transaction.type = utils_1.EIP712_TX_TYPE;\n        (_a = transaction.value) !== null && _a !== void 0 ? _a : (transaction.value = 0);\n        (_b = transaction.data) !== null && _b !== void 0 ? _b : (transaction.data = '0x');\n        transaction.customData = this._fillCustomData(transaction.customData);\n        transaction.gasPrice = await this.provider.getGasPrice();\n        return transaction;\n    }\n    async signTransaction(transaction) {\n        var _a;\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            if (transaction.type == 2 && transaction.maxFeePerGas == null) {\n                transaction.maxFeePerGas = await this.provider.getGasPrice();\n            }\n            return await super.signTransaction(transaction);\n        }\n        else {\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = this.address);\n            if (transaction.from.toLowerCase() != this.address.toLowerCase()) {\n                throw new Error('Transaction `from` address mismatch');\n            }\n            transaction.customData.customSignature = await this.eip712.sign(transaction);\n            return (0, utils_1.serialize)(transaction);\n        }\n    }\n    async sendTransaction(transaction) {\n        // Typescript isn't smart enough to recognise that wallet.sendTransaction\n        // calls provider.sendTransaction which returns our extended type and not ethers' one.\n        return (await super.sendTransaction(transaction));\n    }\n}\nexports.Wallet = Wallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvc3JjL3dhbGxldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsaUJBQWlCLG1CQUFPLENBQUMsc0VBQVU7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsb0VBQVM7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMsNERBQVE7QUFDakMsbUJBQW1CLG1CQUFPLENBQUMsMEVBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWN1bHQvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvc3JjL3dhbGxldC5qcz81ZTJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYWxsZXQgPSB2b2lkIDA7XG5jb25zdCBzaWduZXJfMSA9IHJlcXVpcmUoXCIuL3NpZ25lclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IGV0aGVyc18xID0gcmVxdWlyZShcImV0aGVyc1wiKTtcbmNvbnN0IGFkYXB0ZXJzXzEgPSByZXF1aXJlKFwiLi9hZGFwdGVyc1wiKTtcbmNsYXNzIFdhbGxldCBleHRlbmRzICgwLCBhZGFwdGVyc18xLkFkYXB0ZXJMMikoKDAsIGFkYXB0ZXJzXzEuQWRhcHRlckwxKShldGhlcnNfMS5ldGhlcnMuV2FsbGV0KSkge1xuICAgIF9wcm92aWRlckwxKCkge1xuICAgICAgICBpZiAodGhpcy5wcm92aWRlckwxID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTDEgcHJvdmlkZXIgbWlzc2luZzogdXNlIGBjb25uZWN0VG9MMWAgdG8gc3BlY2lmeScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyTDE7XG4gICAgfVxuICAgIF9wcm92aWRlckwyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcjtcbiAgICB9XG4gICAgX3NpZ25lckwxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ldGhXYWxsZXQoKTtcbiAgICB9XG4gICAgX3NpZ25lckwyKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZXRoV2FsbGV0KCkge1xuICAgICAgICByZXR1cm4gbmV3IGV0aGVyc18xLmV0aGVycy5XYWxsZXQodGhpcy5fc2lnbmluZ0tleSgpLCB0aGlzLl9wcm92aWRlckwxKCkpO1xuICAgIH1cbiAgICAvLyBhbiBhbGlhcyB3aXRoIGEgYmV0dGVyIG5hbWVcbiAgICBhc3luYyBnZXROb25jZShibG9ja1RhZykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvbkNvdW50KGJsb2NrVGFnKTtcbiAgICB9XG4gICAgY29ubmVjdChwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh0aGlzLl9zaWduaW5nS2V5KCksIHByb3ZpZGVyLCB0aGlzLnByb3ZpZGVyTDEpO1xuICAgIH1cbiAgICBjb25uZWN0VG9MMShwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh0aGlzLl9zaWduaW5nS2V5KCksIHRoaXMucHJvdmlkZXIsIHByb3ZpZGVyKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21NbmVtb25pYyhtbmVtb25pYywgcGF0aCwgd29yZGxpc3QpIHtcbiAgICAgICAgY29uc3Qgd2FsbGV0ID0gc3VwZXIuZnJvbU1uZW1vbmljKG1uZW1vbmljLCBwYXRoLCB3b3JkbGlzdCk7XG4gICAgICAgIHJldHVybiBuZXcgV2FsbGV0KHdhbGxldC5fc2lnbmluZ0tleSgpKTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGZyb21FbmNyeXB0ZWRKc29uKGpzb24sIHBhc3N3b3JkLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB3YWxsZXQgPSBhd2FpdCBzdXBlci5mcm9tRW5jcnlwdGVkSnNvbihqc29uLCBwYXNzd29yZCwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh3YWxsZXQuX3NpZ25pbmdLZXkoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tRW5jcnlwdGVkSnNvblN5bmMoanNvbiwgcGFzc3dvcmQpIHtcbiAgICAgICAgY29uc3Qgd2FsbGV0ID0gc3VwZXIuZnJvbUVuY3J5cHRlZEpzb25TeW5jKGpzb24sIHBhc3N3b3JkKTtcbiAgICAgICAgcmV0dXJuIG5ldyBXYWxsZXQod2FsbGV0Ll9zaWduaW5nS2V5KCkpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlUmFuZG9tKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgd2FsbGV0ID0gc3VwZXIuY3JlYXRlUmFuZG9tKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbmV3IFdhbGxldCh3YWxsZXQuX3NpZ25pbmdLZXkoKSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGVLZXksIHByb3ZpZGVyTDIsIHByb3ZpZGVyTDEpIHtcbiAgICAgICAgc3VwZXIocHJpdmF0ZUtleSwgcHJvdmlkZXJMMik7XG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSB0aGlzLmdldENoYWluSWQoKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuZWlwNzEyID0gbmV3IHNpZ25lcl8xLkVJUDcxMlNpZ25lcih0aGlzLCBjaGFpbklkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3ZpZGVyTDEgPSBwcm92aWRlckwxO1xuICAgIH1cbiAgICBhc3luYyBwb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09IG51bGwgJiYgdHJhbnNhY3Rpb24uY3VzdG9tRGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB1c2UgbGVnYWN5IHR4cyBieSBkZWZhdWx0XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi50eXBlID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2FjdGlvbiA9IGF3YWl0IHN1cGVyLnBvcHVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICAgICAgICBpZiAodHJhbnNhY3Rpb24uY3VzdG9tRGF0YSA9PSBudWxsICYmIHRyYW5zYWN0aW9uLnR5cGUgIT0gdXRpbHNfMS5FSVA3MTJfVFhfVFlQRSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zYWN0aW9uLnR5cGUgPSB1dGlsc18xLkVJUDcxMl9UWF9UWVBFO1xuICAgICAgICAoX2EgPSB0cmFuc2FjdGlvbi52YWx1ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHRyYW5zYWN0aW9uLnZhbHVlID0gMCk7XG4gICAgICAgIChfYiA9IHRyYW5zYWN0aW9uLmRhdGEpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICh0cmFuc2FjdGlvbi5kYXRhID0gJzB4Jyk7XG4gICAgICAgIHRyYW5zYWN0aW9uLmN1c3RvbURhdGEgPSB0aGlzLl9maWxsQ3VzdG9tRGF0YSh0cmFuc2FjdGlvbi5jdXN0b21EYXRhKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2FzUHJpY2UgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldEdhc1ByaWNlKCk7XG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgICB9XG4gICAgYXN5bmMgc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmN1c3RvbURhdGEgPT0gbnVsbCAmJiB0cmFuc2FjdGlvbi50eXBlICE9IHV0aWxzXzEuRUlQNzEyX1RYX1RZUEUpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09IDIgJiYgdHJhbnNhY3Rpb24ubWF4RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5tYXhGZWVQZXJHYXMgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldEdhc1ByaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIChfYSA9IHRyYW5zYWN0aW9uLmZyb20pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh0cmFuc2FjdGlvbi5mcm9tID0gdGhpcy5hZGRyZXNzKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbi5mcm9tLnRvTG93ZXJDYXNlKCkgIT0gdGhpcy5hZGRyZXNzLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zYWN0aW9uIGBmcm9tYCBhZGRyZXNzIG1pc21hdGNoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5jdXN0b21EYXRhLmN1c3RvbVNpZ25hdHVyZSA9IGF3YWl0IHRoaXMuZWlwNzEyLnNpZ24odHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLnNlcmlhbGl6ZSkodHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xuICAgICAgICAvLyBUeXBlc2NyaXB0IGlzbid0IHNtYXJ0IGVub3VnaCB0byByZWNvZ25pc2UgdGhhdCB3YWxsZXQuc2VuZFRyYW5zYWN0aW9uXG4gICAgICAgIC8vIGNhbGxzIHByb3ZpZGVyLnNlbmRUcmFuc2FjdGlvbiB3aGljaCByZXR1cm5zIG91ciBleHRlbmRlZCB0eXBlIGFuZCBub3QgZXRoZXJzJyBvbmUuXG4gICAgICAgIHJldHVybiAoYXdhaXQgc3VwZXIuc2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSk7XG4gICAgfVxufVxuZXhwb3J0cy5XYWxsZXQgPSBXYWxsZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/src/wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/typechain/IAllowListFactory.js":
/*!***********************************************************************!*\
  !*** ./node_modules/zksync-web3/build/typechain/IAllowListFactory.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IAllowListFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IAllowListFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IAllowListFactory = IAllowListFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"target\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"previousMode\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"newMode\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"UpdateAccessMode\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"caller\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"target\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes4\",\n                name: \"functionSig\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"status\",\n                type: \"bool\",\n            },\n        ],\n        name: \"UpdateCallPermission\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_functionSig\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"canCall\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n        ],\n        name: \"getAccessMode\",\n        outputs: [\n            {\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"getTokenDepositLimitData\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bool\",\n                        name: \"depositLimitation\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"depositCap\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IAllowList.Deposit\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_functionSig\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"hasSpecialAccessToCall\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"_accessMode\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"setAccessMode\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_targets\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"enum IAllowList.AccessMode[]\",\n                name: \"_accessMode\",\n                type: \"uint8[]\",\n            },\n        ],\n        name: \"setBatchAccessMode\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_callers\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"address[]\",\n                name: \"_targets\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"bytes4[]\",\n                name: \"_functionSigs\",\n                type: \"bytes4[]\",\n            },\n            {\n                internalType: \"bool[]\",\n                name: \"_enables\",\n                type: \"bool[]\",\n            },\n        ],\n        name: \"setBatchPermissionToCall\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_depositLimitation\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_depositCap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setDepositLimit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_functionSig\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_enable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setPermissionToCall\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/typechain/IAllowListFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js":
/*!***************************************************************************!*\
  !*** ./node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IERC20MetadataFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IERC20MetadataFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IERC20MetadataFactory = IERC20MetadataFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/typechain/IEthTokenFactory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/zksync-web3/build/typechain/IEthTokenFactory.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IEthTokenFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IEthTokenFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IEthTokenFactory = IEthTokenFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Mint\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Withdrawal\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFromTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n        ],\n        name: \"withdraw\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/typechain/IEthTokenFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IL1BridgeFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IL1BridgeFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IL1BridgeFactory = IL1BridgeFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimedFailedDeposit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DepositInitiated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"WithdrawalFinalized\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_depositSender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TxHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"claimFailedDeposit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l2Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2TxGasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2TxGasPerPubdataByte\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"deposit\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"txHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_message\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"finalizeWithdrawal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isWithdrawalFinalized\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l2TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IL2BridgeFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IL2BridgeFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IL2BridgeFactory = IL2BridgeFactory;\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Sender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l2Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"finalizeDeposit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Bridge\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TokenProxyBytecodeHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_governor\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"l1Bridge\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l2Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l1TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l2TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l2Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"withdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvdHlwZWNoYWluL0lMMkJyaWRnZUZhY3RvcnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGlCQUFpQixtQkFBTyxDQUFDLDREQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtY3VsdC8uL25vZGVfbW9kdWxlcy96a3N5bmMtd2ViMy9idWlsZC90eXBlY2hhaW4vSUwyQnJpZGdlRmFjdG9yeS5qcz81MmFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JTDJCcmlkZ2VGYWN0b3J5ID0gdm9pZCAwO1xuY29uc3QgZXRoZXJzXzEgPSByZXF1aXJlKFwiZXRoZXJzXCIpO1xuY2xhc3MgSUwyQnJpZGdlRmFjdG9yeSB7XG4gICAgc3RhdGljIGNvbm5lY3QoYWRkcmVzcywgc2lnbmVyT3JQcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IGV0aGVyc18xLkNvbnRyYWN0KGFkZHJlc3MsIF9hYmksIHNpZ25lck9yUHJvdmlkZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuSUwyQnJpZGdlRmFjdG9yeSA9IElMMkJyaWRnZUZhY3Rvcnk7XG5jb25zdCBfYWJpID0gW1xuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9sMVNlbmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wyUmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9sMVRva2VuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2RhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcImZpbmFsaXplRGVwb3NpdFwiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wxQnJpZGdlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfbDJUb2tlblByb3h5Qnl0ZWNvZGVIYXNoXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfZ292ZXJub3JcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiaW5pdGlhbGl6ZVwiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtdLFxuICAgICAgICBuYW1lOiBcImwxQnJpZGdlXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfbDJUb2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJsMVRva2VuQWRkcmVzc1wiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2wxVG9rZW5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwibDJUb2tlbkFkZHJlc3NcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9sMVJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfbDJUb2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJ3aXRoZHJhd1wiLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgIH0sXG5dO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/typechain/IZkSyncFactory.js":
/*!********************************************************************!*\
  !*** ./node_modules/zksync-web3/build/typechain/IZkSyncFactory.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IZkSyncFactory = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\");\nclass IZkSyncFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IZkSyncFactory = IZkSyncFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"commitment\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"BlockCommit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"commitment\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"BlockExecution\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBlocksCommitted\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBlocksVerified\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBlocksExecuted\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"BlocksRevert\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"previousLastVerifiedBlock\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"currentLastVerifiedBlock\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"BlocksVerification\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"CancelUpgradeProposal\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"EthWithdrawalFinalized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"proposalSalt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ExecuteUpgrade\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"Freeze\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isPorterAvailable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"IsPorterAvailableStatusUpdate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldGovernor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewGovernor\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"previousBytecodeHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"newBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"NewL2BootloaderBytecodeHash\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"previousBytecodeHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"newBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"NewL2DefaultAccountBytecodeHash\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldPendingGovernor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newPendingGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewPendingGovernor\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"txId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"txHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"expirationTimestamp\",\n                type: \"uint64\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"txType\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"from\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"to\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasPerPubdataByteLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"maxFeePerGas\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"maxPriorityFeePerGas\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"paymaster\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"nonce\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256[4]\",\n                        name: \"reserved\",\n                        type: \"uint256[4]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"factoryDeps\",\n                        type: \"uint256[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"paymasterInput\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"reservedDynamic\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IMailbox.L2CanonicalTransaction\",\n                name: \"transaction\",\n                type: \"tuple\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes[]\",\n                name: \"factoryDeps\",\n                type: \"bytes[]\",\n            },\n        ],\n        name: \"NewPriorityRequest\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"oldPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NewPriorityTxMaxGasLimit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldVerifier\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newVerifier\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewVerifier\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct VerifierParams\",\n                name: \"oldVerifierParams\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct VerifierParams\",\n                name: \"newVerifierParams\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"NewVerifierParams\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ProposeShadowUpgrade\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"proposalSalt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ProposeTransparentUpgrade\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"SecurityCouncilUpgradeApprove\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"Unfreeze\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"validatorAddress\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isActive\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ValidatorStatusUpdate\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"acceptGovernor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_proposedUpgradeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"cancelUpgradeProposal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo\",\n                name: \"_lastCommittedBlockData\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"timestamp\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"newStateRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initialStorageChanges\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"repeatedStorageChanges\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"l2Logs\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes[]\",\n                        name: \"l2ArbitraryLengthMessages\",\n                        type: \"bytes[]\",\n                    },\n                    {\n                        internalType: \"bytes[]\",\n                        name: \"factoryDeps\",\n                        type: \"bytes[]\",\n                    },\n                ],\n                internalType: \"struct IExecutor.CommitBlockInfo[]\",\n                name: \"_newBlocksData\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"commitBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo[]\",\n                name: \"_blocksData\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"executeBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"_diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_proposalSalt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"executeUpgrade\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_selector\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"facetAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"facet\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"facetAddresses\",\n        outputs: [\n            {\n                internalType: \"address[]\",\n                name: \"facets\",\n                type: \"address[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_facet\",\n                type: \"address\",\n            },\n        ],\n        name: \"facetFunctionSelectors\",\n        outputs: [\n            {\n                internalType: \"bytes4[]\",\n                name: \"\",\n                type: \"bytes4[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"facets\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"addr\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes4[]\",\n                        name: \"selectors\",\n                        type: \"bytes4[]\",\n                    },\n                ],\n                internalType: \"struct IGetters.Facet[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_message\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"finalizeEthWithdrawal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"freezeDiamond\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getCurrentProposalId\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getFirstUnprocessedPriorityTx\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getGovernor\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2BootloaderBytecodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2DefaultAccountBytecodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getPendingGovernor\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getPriorityQueueSize\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getProposedUpgradeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getProposedUpgradeTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSecurityCouncil\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBlocksCommitted\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBlocksExecuted\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBlocksVerified\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalPriorityTxs\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getUpgradeProposalState\",\n        outputs: [\n            {\n                internalType: \"enum UpgradeState\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getVerifier\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getVerifierParams\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct VerifierParams\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getpriorityTxMaxGasLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isApprovedBySecurityCouncil\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isDiamondStorageFrozen\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isEthWithdrawalFinalized\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_facet\",\n                type: \"address\",\n            },\n        ],\n        name: \"isFacetFreezable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"isFreezable\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_selector\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"isFunctionFreezable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"isValidator\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"l2LogsRootHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"hash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_gasPrice\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasPerPubdataByteLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"l2TransactionBaseCost\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"priorityQueueFrontOperation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"canonicalTxHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTimestamp\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint192\",\n                        name: \"layer2Tip\",\n                        type: \"uint192\",\n                    },\n                ],\n                internalType: \"struct PriorityOperation\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_proposalHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint40\",\n                name: \"_proposalId\",\n                type: \"uint40\",\n            },\n        ],\n        name: \"proposeShadowUpgrade\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"_diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"uint40\",\n                name: \"_proposalId\",\n                type: \"uint40\",\n            },\n        ],\n        name: \"proposeTransparentUpgrade\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo\",\n                name: \"_prevBlock\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo[]\",\n                name: \"_committedBlocks\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"recursiveAggregationInput\",\n                        type: \"uint256[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"serializedProof\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct IExecutor.ProofInput\",\n                name: \"_proof\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"proveBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TxHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n            {\n                internalType: \"enum TxStatus\",\n                name: \"_status\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"proveL1ToL2TransactionStatus\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"l2ShardId\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"isService\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"txNumberInBlock\",\n                        type: \"uint16\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"sender\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"key\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"value\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct L2Log\",\n                name: \"_log\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"proveL2LogInclusion\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint16\",\n                        name: \"txNumberInBlock\",\n                        type: \"uint16\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"sender\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct L2Message\",\n                name: \"_message\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"proveL2MessageInclusion\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_contractL2\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2Value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_calldata\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasPerPubdataByteLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes[]\",\n                name: \"_factoryDeps\",\n                type: \"bytes[]\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_refundRecipient\",\n                type: \"address\",\n            },\n        ],\n        name: \"requestL2Transaction\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"canonicalTxHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_newLastBlock\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"revertBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_upgradeProposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"securityCouncilUpgradeApprove\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_l2BootloaderBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"setL2BootloaderBytecodeHash\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_l2DefaultAccountBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"setL2DefaultAccountBytecodeHash\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_newPendingGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"setPendingGovernor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bool\",\n                name: \"_zkPorterIsAvailable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setPorterAvailability\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_newPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setPriorityTxMaxGasLimit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_active\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract Verifier\",\n                name: \"_newVerifier\",\n                type: \"address\",\n            },\n        ],\n        name: \"setVerifier\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct VerifierParams\",\n                name: \"_newVerifierParams\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"setVerifierParams\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"storedBlockHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"unfreezeDiamond\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"_diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_salt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"upgradeProposalHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/typechain/IZkSyncFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/build/typechain/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/zksync-web3/build/typechain/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IEthTokenFactory = exports.IAllowListFactory = exports.IL2BridgeFactory = exports.IL1BridgeFactory = exports.IERC20MetadataFactory = exports.IZkSyncFactory = void 0;\nvar IZkSyncFactory_1 = __webpack_require__(/*! ./IZkSyncFactory */ \"(ssr)/./node_modules/zksync-web3/build/typechain/IZkSyncFactory.js\");\nObject.defineProperty(exports, \"IZkSyncFactory\", ({ enumerable: true, get: function () { return IZkSyncFactory_1.IZkSyncFactory; } }));\nvar IERC20MetadataFactory_1 = __webpack_require__(/*! ./IERC20MetadataFactory */ \"(ssr)/./node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js\");\nObject.defineProperty(exports, \"IERC20MetadataFactory\", ({ enumerable: true, get: function () { return IERC20MetadataFactory_1.IERC20MetadataFactory; } }));\nvar IL1BridgeFactory_1 = __webpack_require__(/*! ./IL1BridgeFactory */ \"(ssr)/./node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js\");\nObject.defineProperty(exports, \"IL1BridgeFactory\", ({ enumerable: true, get: function () { return IL1BridgeFactory_1.IL1BridgeFactory; } }));\nvar IL2BridgeFactory_1 = __webpack_require__(/*! ./IL2BridgeFactory */ \"(ssr)/./node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js\");\nObject.defineProperty(exports, \"IL2BridgeFactory\", ({ enumerable: true, get: function () { return IL2BridgeFactory_1.IL2BridgeFactory; } }));\nvar IAllowListFactory_1 = __webpack_require__(/*! ./IAllowListFactory */ \"(ssr)/./node_modules/zksync-web3/build/typechain/IAllowListFactory.js\");\nObject.defineProperty(exports, \"IAllowListFactory\", ({ enumerable: true, get: function () { return IAllowListFactory_1.IAllowListFactory; } }));\nvar IEthTokenFactory_1 = __webpack_require__(/*! ./IEthTokenFactory */ \"(ssr)/./node_modules/zksync-web3/build/typechain/IEthTokenFactory.js\");\nObject.defineProperty(exports, \"IEthTokenFactory\", ({ enumerable: true, get: function () { return IEthTokenFactory_1.IEthTokenFactory; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemtzeW5jLXdlYjMvYnVpbGQvdHlwZWNoYWluL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLHlCQUF5QixHQUFHLHdCQUF3QixHQUFHLHdCQUF3QixHQUFHLDZCQUE2QixHQUFHLHNCQUFzQjtBQUNuSyx1QkFBdUIsbUJBQU8sQ0FBQyw0RkFBa0I7QUFDakQsa0RBQWlELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3BJLDhCQUE4QixtQkFBTyxDQUFDLDBHQUF5QjtBQUMvRCx5REFBd0QsRUFBRSxxQ0FBcUMseURBQXlELEVBQUM7QUFDekoseUJBQXlCLG1CQUFPLENBQUMsZ0dBQW9CO0FBQ3JELG9EQUFtRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQztBQUMxSSx5QkFBeUIsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDckQsb0RBQW1ELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQzFJLDBCQUEwQixtQkFBTyxDQUFDLGtHQUFxQjtBQUN2RCxxREFBb0QsRUFBRSxxQ0FBcUMsaURBQWlELEVBQUM7QUFDN0kseUJBQXlCLG1CQUFPLENBQUMsZ0dBQW9CO0FBQ3JELG9EQUFtRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1jdWx0Ly4vbm9kZV9tb2R1bGVzL3prc3luYy13ZWIzL2J1aWxkL3R5cGVjaGFpbi9pbmRleC5qcz9jMWM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JRXRoVG9rZW5GYWN0b3J5ID0gZXhwb3J0cy5JQWxsb3dMaXN0RmFjdG9yeSA9IGV4cG9ydHMuSUwyQnJpZGdlRmFjdG9yeSA9IGV4cG9ydHMuSUwxQnJpZGdlRmFjdG9yeSA9IGV4cG9ydHMuSUVSQzIwTWV0YWRhdGFGYWN0b3J5ID0gZXhwb3J0cy5JWmtTeW5jRmFjdG9yeSA9IHZvaWQgMDtcbnZhciBJWmtTeW5jRmFjdG9yeV8xID0gcmVxdWlyZShcIi4vSVprU3luY0ZhY3RvcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJWmtTeW5jRmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gSVprU3luY0ZhY3RvcnlfMS5JWmtTeW5jRmFjdG9yeTsgfSB9KTtcbnZhciBJRVJDMjBNZXRhZGF0YUZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL0lFUkMyME1ldGFkYXRhRmFjdG9yeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklFUkMyME1ldGFkYXRhRmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gSUVSQzIwTWV0YWRhdGFGYWN0b3J5XzEuSUVSQzIwTWV0YWRhdGFGYWN0b3J5OyB9IH0pO1xudmFyIElMMUJyaWRnZUZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL0lMMUJyaWRnZUZhY3RvcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJTDFCcmlkZ2VGYWN0b3J5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBJTDFCcmlkZ2VGYWN0b3J5XzEuSUwxQnJpZGdlRmFjdG9yeTsgfSB9KTtcbnZhciBJTDJCcmlkZ2VGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9JTDJCcmlkZ2VGYWN0b3J5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSUwyQnJpZGdlRmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gSUwyQnJpZGdlRmFjdG9yeV8xLklMMkJyaWRnZUZhY3Rvcnk7IH0gfSk7XG52YXIgSUFsbG93TGlzdEZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL0lBbGxvd0xpc3RGYWN0b3J5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSUFsbG93TGlzdEZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIElBbGxvd0xpc3RGYWN0b3J5XzEuSUFsbG93TGlzdEZhY3Rvcnk7IH0gfSk7XG52YXIgSUV0aFRva2VuRmFjdG9yeV8xID0gcmVxdWlyZShcIi4vSUV0aFRva2VuRmFjdG9yeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklFdGhUb2tlbkZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIElFdGhUb2tlbkZhY3RvcnlfMS5JRXRoVG9rZW5GYWN0b3J5OyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zksync-web3/build/typechain/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/ContractDeployer.json":
/*!************************************************************!*\
  !*** ./node_modules/zksync-web3/abi/ContractDeployer.json ***!
  \************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"accountAddress","type":"address"},{"indexed":false,"internalType":"enum IContractDeployer.AccountNonceOrdering","name":"nonceOrdering","type":"uint8"}],"name":"AccountNonceOrderingUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"accountAddress","type":"address"},{"indexed":false,"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"aaVersion","type":"uint8"}],"name":"AccountVersionUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"deployerAddress","type":"address"},{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractDeployed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"},{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"_aaVersion","type":"uint8"}],"name":"create2Account","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"},{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"_aaVersion","type":"uint8"}],"name":"createAccount","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"extendedAccountVersion","outputs":[{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bool","name":"callConstructor","type":"bool"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"}],"internalType":"struct ContractDeployer.ForceDeployment","name":"_deployment","type":"tuple"},{"internalType":"address","name":"_sender","type":"address"}],"name":"forceDeployOnAddress","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bool","name":"callConstructor","type":"bool"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"}],"internalType":"struct ContractDeployer.ForceDeployment[]","name":"_deployments","type":"tuple[]"}],"name":"forceDeployOnAddresses","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getAccountInfo","outputs":[{"components":[{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"supportedAAVersion","type":"uint8"},{"internalType":"enum IContractDeployer.AccountNonceOrdering","name":"nonceOrdering","type":"uint8"}],"internalType":"struct IContractDeployer.AccountInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_senderNonce","type":"uint256"}],"name":"getNewAddressCreate","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"getNewAddressCreate2","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum IContractDeployer.AccountAbstractionVersion","name":"_version","type":"uint8"}],"name":"updateAccountVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum IContractDeployer.AccountNonceOrdering","name":"_nonceOrdering","type":"uint8"}],"name":"updateNonceOrdering","outputs":[],"stateMutability":"nonpayable","type":"function"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/IERC1271.json":
/*!****************************************************!*\
  !*** ./node_modules/zksync-web3/abi/IERC1271.json ***!
  \****************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"view","type":"function"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/IERC20.json":
/*!**************************************************!*\
  !*** ./node_modules/zksync-web3/abi/IERC20.json ***!
  \**************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/IL1Bridge.json":
/*!*****************************************************!*\
  !*** ./node_modules/zksync-web3/abi/IL1Bridge.json ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"l1Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ClaimedFailedDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"l1Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"DepositInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"l1Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawalFinalized","type":"event"},{"inputs":[{"internalType":"address","name":"_depositSender","type":"address"},{"internalType":"address","name":"_l1Token","type":"address"},{"internalType":"bytes32","name":"_l2TxHash","type":"bytes32"},{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBlock","type":"uint16"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"name":"claimFailedDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_l2Receiver","type":"address"},{"internalType":"address","name":"_l1Token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_l2TxGasLimit","type":"uint256"},{"internalType":"uint256","name":"_l2TxGasPerPubdataByte","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBlock","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"name":"finalizeWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"}],"name":"isWithdrawalFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l1Token","type":"address"}],"name":"l2TokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/IL1Messenger.json":
/*!********************************************************!*\
  !*** ./node_modules/zksync-web3/abi/IL1Messenger.json ***!
  \********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"_hash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"_message","type":"bytes"}],"name":"L1MessageSent","type":"event"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendToL1","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/IL2Bridge.json":
/*!*****************************************************!*\
  !*** ./node_modules/zksync-web3/abi/IL2Bridge.json ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"l1Sender","type":"address"},{"indexed":true,"internalType":"address","name":"l2Receiver","type":"address"},{"indexed":true,"internalType":"address","name":"l2Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FinalizeDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"l2Sender","type":"address"},{"indexed":true,"internalType":"address","name":"l1Receiver","type":"address"},{"indexed":true,"internalType":"address","name":"l2Token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawalInitiated","type":"event"},{"inputs":[{"internalType":"address","name":"_l1Sender","type":"address"},{"internalType":"address","name":"_l2Receiver","type":"address"},{"internalType":"address","name":"_l1Token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"finalizeDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"l1Bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l2Token","type":"address"}],"name":"l1TokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l1Token","type":"address"}],"name":"l2TokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l1Receiver","type":"address"},{"internalType":"address","name":"_l2Token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/IPaymasterFlow.json":
/*!**********************************************************!*\
  !*** ./node_modules/zksync-web3/abi/IPaymasterFlow.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_minAllowance","type":"uint256"},{"internalType":"bytes","name":"_innerInput","type":"bytes"}],"name":"approvalBased","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"name":"general","outputs":[],"stateMutability":"nonpayable","type":"function"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/zksync-web3/abi/IZkSync.json":
/*!***************************************************!*\
  !*** ./node_modules/zksync-web3/abi/IZkSync.json ***!
  \***************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"blockNumber","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"commitment","type":"bytes32"}],"name":"BlockCommit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"blockNumber","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"commitment","type":"bytes32"}],"name":"BlockExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"totalBlocksCommitted","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBlocksVerified","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBlocksExecuted","type":"uint256"}],"name":"BlocksRevert","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"previousLastVerifiedBlock","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"currentLastVerifiedBlock","type":"uint256"}],"name":"BlocksVerification","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"proposalHash","type":"bytes32"}],"name":"CancelUpgradeProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EthWithdrawalFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"proposalHash","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"proposalSalt","type":"bytes32"}],"name":"ExecuteUpgrade","type":"event"},{"anonymous":false,"inputs":[],"name":"Freeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"isPorterAvailable","type":"bool"}],"name":"IsPorterAvailableStatusUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldGovernor","type":"address"},{"indexed":true,"internalType":"address","name":"newGovernor","type":"address"}],"name":"NewGovernor","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"previousBytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newBytecodeHash","type":"bytes32"}],"name":"NewL2BootloaderBytecodeHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"previousBytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newBytecodeHash","type":"bytes32"}],"name":"NewL2DefaultAccountBytecodeHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldPendingGovernor","type":"address"},{"indexed":true,"internalType":"address","name":"newPendingGovernor","type":"address"}],"name":"NewPendingGovernor","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"txId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"expirationTimestamp","type":"uint64"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256[4]","name":"reserved","type":"uint256[4]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256[]","name":"factoryDeps","type":"uint256[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"indexed":false,"internalType":"struct IMailbox.L2CanonicalTransaction","name":"transaction","type":"tuple"},{"indexed":false,"internalType":"bytes[]","name":"factoryDeps","type":"bytes[]"}],"name":"NewPriorityRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldPriorityTxMaxGasLimit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriorityTxMaxGasLimit","type":"uint256"}],"name":"NewPriorityTxMaxGasLimit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldVerifier","type":"address"},{"indexed":true,"internalType":"address","name":"newVerifier","type":"address"}],"name":"NewVerifier","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"bytes32","name":"recursionNodeLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionLeafLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionCircuitsSetVksHash","type":"bytes32"}],"indexed":false,"internalType":"struct VerifierParams","name":"oldVerifierParams","type":"tuple"},{"components":[{"internalType":"bytes32","name":"recursionNodeLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionLeafLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionCircuitsSetVksHash","type":"bytes32"}],"indexed":false,"internalType":"struct VerifierParams","name":"newVerifierParams","type":"tuple"}],"name":"NewVerifierParams","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"proposalHash","type":"bytes32"}],"name":"ProposeShadowUpgrade","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"facet","type":"address"},{"internalType":"enum Diamond.Action","name":"action","type":"uint8"},{"internalType":"bool","name":"isFreezable","type":"bool"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct Diamond.FacetCut[]","name":"facetCuts","type":"tuple[]"},{"internalType":"address","name":"initAddress","type":"address"},{"internalType":"bytes","name":"initCalldata","type":"bytes"}],"indexed":false,"internalType":"struct Diamond.DiamondCutData","name":"diamondCut","type":"tuple"},{"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"proposalSalt","type":"bytes32"}],"name":"ProposeTransparentUpgrade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"proposalId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"proposalHash","type":"bytes32"}],"name":"SecurityCouncilUpgradeApprove","type":"event"},{"anonymous":false,"inputs":[],"name":"Unfreeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validatorAddress","type":"address"},{"indexed":false,"internalType":"bool","name":"isActive","type":"bool"}],"name":"ValidatorStatusUpdate","type":"event"},{"inputs":[],"name":"acceptGovernor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_proposedUpgradeHash","type":"bytes32"}],"name":"cancelUpgradeProposal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBlockInfo","name":"_lastCommittedBlockData","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"bytes32","name":"newStateRoot","type":"bytes32"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes","name":"initialStorageChanges","type":"bytes"},{"internalType":"bytes","name":"repeatedStorageChanges","type":"bytes"},{"internalType":"bytes","name":"l2Logs","type":"bytes"},{"internalType":"bytes[]","name":"l2ArbitraryLengthMessages","type":"bytes[]"},{"internalType":"bytes[]","name":"factoryDeps","type":"bytes[]"}],"internalType":"struct IExecutor.CommitBlockInfo[]","name":"_newBlocksData","type":"tuple[]"}],"name":"commitBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBlockInfo[]","name":"_blocksData","type":"tuple[]"}],"name":"executeBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"facet","type":"address"},{"internalType":"enum Diamond.Action","name":"action","type":"uint8"},{"internalType":"bool","name":"isFreezable","type":"bool"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct Diamond.FacetCut[]","name":"facetCuts","type":"tuple[]"},{"internalType":"address","name":"initAddress","type":"address"},{"internalType":"bytes","name":"initCalldata","type":"bytes"}],"internalType":"struct Diamond.DiamondCutData","name":"_diamondCut","type":"tuple"},{"internalType":"bytes32","name":"_proposalSalt","type":"bytes32"}],"name":"executeUpgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"facetAddress","outputs":[{"internalType":"address","name":"facet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facetAddresses","outputs":[{"internalType":"address[]","name":"facets","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_facet","type":"address"}],"name":"facetFunctionSelectors","outputs":[{"internalType":"bytes4[]","name":"","type":"bytes4[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facets","outputs":[{"components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct IGetters.Facet[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBlock","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"name":"finalizeEthWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"freezeDiamond","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCurrentProposalId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFirstUnprocessedPriorityTx","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGovernor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL2BootloaderBytecodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL2DefaultAccountBytecodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPendingGovernor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriorityQueueSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProposedUpgradeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProposedUpgradeTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSecurityCouncil","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBlocksCommitted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBlocksExecuted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBlocksVerified","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalPriorityTxs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUpgradeProposalState","outputs":[{"internalType":"enum UpgradeState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVerifier","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVerifierParams","outputs":[{"components":[{"internalType":"bytes32","name":"recursionNodeLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionLeafLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionCircuitsSetVksHash","type":"bytes32"}],"internalType":"struct VerifierParams","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getpriorityTxMaxGasLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isApprovedBySecurityCouncil","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isDiamondStorageFrozen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"}],"name":"isEthWithdrawalFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_facet","type":"address"}],"name":"isFacetFreezable","outputs":[{"internalType":"bool","name":"isFreezable","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"isFunctionFreezable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isValidator","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"l2LogsRootHash","outputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gasPrice","type":"uint256"},{"internalType":"uint256","name":"_l2GasLimit","type":"uint256"},{"internalType":"uint256","name":"_l2GasPerPubdataByteLimit","type":"uint256"}],"name":"l2TransactionBaseCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"priorityQueueFrontOperation","outputs":[{"components":[{"internalType":"bytes32","name":"canonicalTxHash","type":"bytes32"},{"internalType":"uint64","name":"expirationTimestamp","type":"uint64"},{"internalType":"uint192","name":"layer2Tip","type":"uint192"}],"internalType":"struct PriorityOperation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_proposalHash","type":"bytes32"},{"internalType":"uint40","name":"_proposalId","type":"uint40"}],"name":"proposeShadowUpgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"facet","type":"address"},{"internalType":"enum Diamond.Action","name":"action","type":"uint8"},{"internalType":"bool","name":"isFreezable","type":"bool"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct Diamond.FacetCut[]","name":"facetCuts","type":"tuple[]"},{"internalType":"address","name":"initAddress","type":"address"},{"internalType":"bytes","name":"initCalldata","type":"bytes"}],"internalType":"struct Diamond.DiamondCutData","name":"_diamondCut","type":"tuple"},{"internalType":"uint40","name":"_proposalId","type":"uint40"}],"name":"proposeTransparentUpgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBlockInfo","name":"_prevBlock","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"uint64","name":"indexRepeatedStorageChanges","type":"uint64"},{"internalType":"uint256","name":"numberOfLayer1Txs","type":"uint256"},{"internalType":"bytes32","name":"priorityOperationsHash","type":"bytes32"},{"internalType":"bytes32","name":"l2LogsTreeRoot","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"internalType":"struct IExecutor.StoredBlockInfo[]","name":"_committedBlocks","type":"tuple[]"},{"components":[{"internalType":"uint256[]","name":"recursiveAggregationInput","type":"uint256[]"},{"internalType":"uint256[]","name":"serializedProof","type":"uint256[]"}],"internalType":"struct IExecutor.ProofInput","name":"_proof","type":"tuple"}],"name":"proveBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_l2TxHash","type":"bytes32"},{"internalType":"uint256","name":"_l2BlockNumber","type":"uint256"},{"internalType":"uint256","name":"_l2MessageIndex","type":"uint256"},{"internalType":"uint16","name":"_l2TxNumberInBlock","type":"uint16"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"},{"internalType":"enum TxStatus","name":"_status","type":"uint8"}],"name":"proveL1ToL2TransactionStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"},{"internalType":"uint256","name":"_index","type":"uint256"},{"components":[{"internalType":"uint8","name":"l2ShardId","type":"uint8"},{"internalType":"bool","name":"isService","type":"bool"},{"internalType":"uint16","name":"txNumberInBlock","type":"uint16"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"internalType":"struct L2Log","name":"_log","type":"tuple"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"name":"proveL2LogInclusion","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"},{"internalType":"uint256","name":"_index","type":"uint256"},{"components":[{"internalType":"uint16","name":"txNumberInBlock","type":"uint16"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct L2Message","name":"_message","type":"tuple"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"name":"proveL2MessageInclusion","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_contractL2","type":"address"},{"internalType":"uint256","name":"_l2Value","type":"uint256"},{"internalType":"bytes","name":"_calldata","type":"bytes"},{"internalType":"uint256","name":"_l2GasLimit","type":"uint256"},{"internalType":"uint256","name":"_l2GasPerPubdataByteLimit","type":"uint256"},{"internalType":"bytes[]","name":"_factoryDeps","type":"bytes[]"},{"internalType":"address","name":"_refundRecipient","type":"address"}],"name":"requestL2Transaction","outputs":[{"internalType":"bytes32","name":"canonicalTxHash","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newLastBlock","type":"uint256"}],"name":"revertBlocks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_upgradeProposalHash","type":"bytes32"}],"name":"securityCouncilUpgradeApprove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_l2BootloaderBytecodeHash","type":"bytes32"}],"name":"setL2BootloaderBytecodeHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_l2DefaultAccountBytecodeHash","type":"bytes32"}],"name":"setL2DefaultAccountBytecodeHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newPendingGovernor","type":"address"}],"name":"setPendingGovernor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_zkPorterIsAvailable","type":"bool"}],"name":"setPorterAvailability","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newPriorityTxMaxGasLimit","type":"uint256"}],"name":"setPriorityTxMaxGasLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_validator","type":"address"},{"internalType":"bool","name":"_active","type":"bool"}],"name":"setValidator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract Verifier","name":"_newVerifier","type":"address"}],"name":"setVerifier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"recursionNodeLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionLeafLevelVkHash","type":"bytes32"},{"internalType":"bytes32","name":"recursionCircuitsSetVksHash","type":"bytes32"}],"internalType":"struct VerifierParams","name":"_newVerifierParams","type":"tuple"}],"name":"setVerifierParams","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"storedBlockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unfreezeDiamond","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"facet","type":"address"},{"internalType":"enum Diamond.Action","name":"action","type":"uint8"},{"internalType":"bool","name":"isFreezable","type":"bool"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct Diamond.FacetCut[]","name":"facetCuts","type":"tuple[]"},{"internalType":"address","name":"initAddress","type":"address"},{"internalType":"bytes","name":"initCalldata","type":"bytes"}],"internalType":"struct Diamond.DiamondCutData","name":"_diamondCut","type":"tuple"},{"internalType":"uint256","name":"_proposalId","type":"uint256"},{"internalType":"bytes32","name":"_salt","type":"bytes32"}],"name":"upgradeProposalHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"}]}');

/***/ })

};
;