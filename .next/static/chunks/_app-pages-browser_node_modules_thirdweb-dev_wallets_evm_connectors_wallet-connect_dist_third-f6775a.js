"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb-dev_wallets_evm_connectors_wallet-connect_dist_third-f6775a"],{

/***/ "(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js ***!
  \*************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectConnector: function() { return /* binding */ WalletConnectConnector; }\n/* harmony export */ });\n/* harmony import */ var _dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../dist/defineProperty-350fc508.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/defineProperty-350fc508.browser.esm.js\");\n/* harmony import */ var _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../dist/errors-9edc08c8.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _dist_walletIds_dff6dced_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../dist/walletIds-dff6dced.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/walletIds-dff6dced.browser.esm.js\");\n/* harmony import */ var _dist_url_a45219bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../dist/url-a45219bd.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js\");\n/* harmony import */ var _dist_WagmiConnector_2f14002d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../dist/WagmiConnector-2f14002d.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(app-pages-browser)/./node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nclass WalletConnectConnector extends _dist_WagmiConnector_2f14002d_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.W {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"id\", _dist_walletIds_dff6dced_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__.w.walletConnect);\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"name\", \"WalletConnect\");\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"ready\", true);\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: ethers__WEBPACK_IMPORTED_MODULE_4__.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await this._storage.setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onDisconnect\", async () => {\n      await this._setRequestedChainsIds([]);\n      await this._storage.removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: this._provider\n      });\n    });\n    this._storage = config.options.storage;\n    this._createProvider();\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n    this.showWalletConnectModal = this.options.qrcode !== false;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await this._storage.getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      if (provider.session) {\n        await provider.disconnect();\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await this._setRequestedChainsIds(this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = ethers__WEBPACK_IMPORTED_MODULE_4__.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new ethers__WEBPACK_IMPORTED_MODULE_5__.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.U(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        this._removeListeners();\n        await this._setRequestedChainsIds([]);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      await this._createProvider();\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!this._provider) {\n      throw new Error(\"No provider found.\");\n    }\n    return this._provider;\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new ethers__WEBPACK_IMPORTED_MODULE_5__.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await this._isChainsStale();\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.S(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = this._getNamespaceChainsIds();\n      const namespaceMethods = this._getNamespaceMethods();\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: ethers__WEBPACK_IMPORTED_MODULE_7__.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: (0,_dist_url_a45219bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.g)(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await this._getRequestedChainsIds();\n        requestedChains.push(chainId);\n        await this._setRequestedChainsIds(requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: ethers__WEBPACK_IMPORTED_MODULE_7__.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.U(error);\n      }\n      throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.S(error);\n    }\n  }\n  async _createProvider() {\n    if (!this._initProviderPromise && \"object\" !== \"undefined\") {\n      this._initProviderPromise = this.initProvider();\n    }\n    return this._initProviderPromise;\n  }\n  async initProvider() {\n    const {\n      default: EthereumProvider,\n      OPTIONAL_EVENTS,\n      OPTIONAL_METHODS\n    } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_walletconnect_ethereum-provider_dist_index_es_js\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/ethereum-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\"));\n    const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      return chainId;\n    });\n    if (defaultChain) {\n      // EthereumProvider populates & deduplicates required methods and events internally\n      this._provider = await EthereumProvider.init({\n        showQrModal: this.showWalletConnectModal,\n        projectId: this.options.projectId,\n        methods: [\"eth_sendTransaction\", \"personal_sign\", \"eth_signTypedData_v4\"],\n        optionalMethods: OPTIONAL_METHODS,\n        optionalEvents: OPTIONAL_EVENTS,\n        chains: [defaultChain],\n        optionalChains: optionalChains,\n        metadata: {\n          name: this.options.dappMetadata.name,\n          description: this.options.dappMetadata.description || \"\",\n          url: this.options.dappMetadata.url,\n          icons: [this.options.dappMetadata.logoUrl || \"\"]\n        },\n        rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n        ])),\n        qrModalOptions: this.options.qrModalOptions\n      });\n    }\n  }\n\n  /**\n   * Checks if the target chains match the chains that were\n   * initially requested by the connector for the WalletConnect session.\n   * If there is a mismatch, this means that the chains on the connector\n   * are considered stale, and need to be revalidated at a later point (via\n   * connection).\n   *\n   * There may be a scenario where a dapp adds a chain to the\n   * connector later on, however, this chain will not have been approved or rejected\n   * by the wallet. In this case, the chain is considered stale.\n   *\n   * There are exceptions however:\n   * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n   *    then the chain is not considered stale.\n   * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n   *    not considered stale.\n   *\n   * For the above cases, chain validation occurs dynamically when the user\n   * attempts to switch chain.\n   *\n   * Also check that dapp supports at least 1 chain from previously approved session.\n   */\n  async _isChainsStale() {\n    const namespaceMethods = this._getNamespaceMethods();\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n      return false;\n    }\n    if (!this.options.isNewChainsStale) {\n      return false;\n    }\n    const requestedChains = await this._getRequestedChainsIds();\n    const connectorChains = this.filteredChains.map(_ref3 => {\n      let {\n        chainId\n      } = _ref3;\n      return chainId;\n    });\n    const namespaceChains = this._getNamespaceChainsIds();\n    if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n      return false;\n    }\n    return !connectorChains.every(id => requestedChains.includes(id));\n  }\n  async setupListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._removeListeners();\n    this._provider.on(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.on(\"chainChanged\", this.onChainChanged);\n    this._provider.on(\"disconnect\", this.onDisconnect);\n    this._provider.on(\"session_delete\", this.onDisconnect);\n    this._provider.on(\"display_uri\", this.onDisplayUri);\n    this._provider.on(\"connect\", this.onConnect);\n  }\n  _removeListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.removeListener(\"chainChanged\", this.onChainChanged);\n    this._provider.removeListener(\"disconnect\", this.onDisconnect);\n    this._provider.removeListener(\"session_delete\", this.onDisconnect);\n    this._provider.removeListener(\"display_uri\", this.onDisplayUri);\n    this._provider.removeListener(\"connect\", this.onConnect);\n  }\n  async _setRequestedChainsIds(chains) {\n    await this._storage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n  }\n  async _getRequestedChainsIds() {\n    const data = await this._storage.getItem(REQUESTED_CHAINS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  _getNamespaceChainsIds() {\n    if (!this._provider) {\n      return [];\n    }\n    const chainIds = this._provider.session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n  }\n  _getNamespaceMethods() {\n    if (!this._provider) {\n      return [];\n    }\n    const methods = this._provider.session?.namespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js\n"));

/***/ })

}]);