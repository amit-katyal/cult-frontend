"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb-dev_wallets_evm_connectors_blocto_dist_thirdweb-dev--60831e"],{

/***/ "(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/wallets/evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js ***!
  \*********************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BloctoConnector: function() { return /* binding */ BloctoConnector; }\n/* harmony export */ });\n/* harmony import */ var _dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../dist/defineProperty-350fc508.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/defineProperty-350fc508.browser.esm.js\");\n/* harmony import */ var _dist_WagmiConnector_2f14002d_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../dist/WagmiConnector-2f14002d.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js\");\n/* harmony import */ var _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../dist/errors-9edc08c8.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js\");\n/* harmony import */ var _blocto_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @blocto/sdk */ \"(app-pages-browser)/./node_modules/@blocto/sdk/dist/blocto-sdk.module.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _dist_walletIds_dff6dced_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../dist/walletIds-dff6dced.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/walletIds-dff6dced.browser.esm.js\");\n/* harmony import */ var _dist_url_a45219bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../dist/url-a45219bd.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js\");\n/* harmony import */ var _dist_normalizeChainId_1fb9aedf_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventemitter3 */ \"(app-pages-browser)/./node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\nclass BloctoConnector extends _dist_WagmiConnector_2f14002d_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__.W {\n  constructor(_ref) {\n    let {\n      chains,\n      options = {}\n    } = _ref;\n    super({\n      chains,\n      options\n    });\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__._)(this, \"id\", _dist_walletIds_dff6dced_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.w.blocto);\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__._)(this, \"name\", \"Blocto\");\n    (0,_dist_defineProperty_350fc508_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__._)(this, \"ready\", true);\n    this._onAccountsChangedBind = this.onAccountsChanged.bind(this);\n    this._onChainChangedBind = this.onChainChanged.bind(this);\n    this._onDisconnectBind = this.onDisconnect.bind(this);\n  }\n  async connect(config) {\n    try {\n      const provider = await this.getProvider(config);\n      this.setupListeners();\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = ethers__WEBPACK_IMPORTED_MODULE_5__.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      };\n    } catch (error) {\n      this._handleConnectReset();\n      if (this._isUserRejectedRequestError(error)) {\n        throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.U(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    await provider.request({\n      method: \"wallet_disconnect\"\n    });\n    this.removeListeners();\n    this._handleConnectReset();\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    const [address] = accounts || [];\n    if (!address) {\n      throw new Error(\"No accounts found\");\n    }\n    return address;\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = await provider.request({\n      method: \"eth_chainId\"\n    });\n    return (0,_dist_normalizeChainId_1fb9aedf_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)(chainId);\n  }\n  getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      const _chainId = chainId ?? this.chains[0]?.chainId ?? 1;\n      const _rpc = this.chains.find(x => x.chainId === _chainId)?.rpc[0];\n      this._provider = new _blocto_sdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n        ethereum: {\n          chainId: _chainId,\n          rpc: _rpc\n        },\n        appId: this.options.appId\n      })?.ethereum;\n    }\n    if (!this._provider) {\n      throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.a();\n    }\n    return Promise.resolve(this._provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n    return new ethers__WEBPACK_IMPORTED_MODULE_8__.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    return !!this._provider?._blocto?.sessionKeyEnv ?? false;\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const id = ethers__WEBPACK_IMPORTED_MODULE_9__.hexValue(chainId);\n    const chain = this.chains.find(x => x.chainId === chainId);\n    if (!chain) {\n      throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.S(new Error(\"chain not found on connector.\"));\n    }\n    const blocktoSupportedChainList = await provider.supportChainList();\n    const isBloctoSupportChain = blocktoSupportedChainList[`${chainId}`];\n    if (!isBloctoSupportChain) {\n      throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.S(new Error(`Blocto unsupported chain: ${id}`));\n    }\n    try {\n      await provider.request({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: id,\n          rpcUrls: (0,_dist_url_a45219bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.g)(chain) // no client id on purpose here\n        }]\n      });\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: id\n        }]\n      });\n      return chain;\n    } catch (error) {\n      if (this._isUserRejectedRequestError(error)) {\n        throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.U(error);\n      }\n      throw new _dist_errors_9edc08c8_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.S(error);\n    }\n  }\n  onAccountsChanged() {\n    // not supported yet\n  }\n  async onChainChanged(chain) {\n    const id = (0,_dist_normalizeChainId_1fb9aedf_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)(chain);\n    const unsupported = this.isChainUnsupported(id);\n    const account = await this.getAccount();\n    this.emit(\"change\", {\n      chain: {\n        id,\n        unsupported\n      },\n      account\n    });\n  }\n  onDisconnect() {\n    this.emit(\"disconnect\");\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    provider.on(\"accountsChanged\", this._onAccountsChangedBind);\n    provider.on(\"chainChanged\", this._onChainChangedBind);\n    provider.on(\"disconnect\", this._onDisconnectBind);\n  }\n  async removeListeners() {\n    const provider = await this.getProvider();\n    provider.off(\"accountsChanged\", this._onAccountsChangedBind);\n    provider.off(\"chainChanged\", this._onChainChangedBind);\n    provider.off(\"disconnect\", this._onDisconnectBind);\n  }\n  _isUserRejectedRequestError(error) {\n    return /(user rejected)/i.test(error.message);\n  }\n  _handleConnectReset() {\n    this._provider = undefined;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@thirdweb-dev/wallets/evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@blocto/sdk/dist/blocto-sdk.module.js":
/*!************************************************************!*\
  !*** ./node_modules/@blocto/sdk/dist/blocto-sdk.module.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ BloctoSDK; }\n/* harmony export */ });\n/* Version: 0.10.2 - May 3, 2024 04:32:29 */\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n// instead invariant from package, since all error will throw on production\nfunction invariant(condition, format) {\n    if (!condition) {\n        throw new Error(format);\n    }\n}\n\nvar KEY_SESSION;\n(function (KEY_SESSION) {\n    KEY_SESSION[\"prod\"] = \"BLOCTO_SDK\";\n    KEY_SESSION[\"dev\"] = \"BLOCTO_SDK_DEV\";\n    KEY_SESSION[\"staging\"] = \"BLOCTO_SDK_STAGING\";\n})(KEY_SESSION || (KEY_SESSION = {}));\nvar CHAIN;\n(function (CHAIN) {\n    CHAIN[\"ETHEREUM\"] = \"ethereum\";\n    CHAIN[\"APTOS\"] = \"aptos\";\n})(CHAIN || (CHAIN = {}));\n/* eth series constants begin */\nconst ETH_RPC_LIST = {\n    // This is the list of public RPC endpoints that we known to be working\n    // Used to help developers did not set up their own RPC endpoints\n    // BSC mainnet\n    56: 'https://bsc-dataseed1.binance.org',\n    // BSC testnet\n    97: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n    // Polygon Mainnet\n    137: 'https://rpc-mainnet.maticvigil.com/',\n    // Polygon Amoy Testnet\n    80002: 'https://rpc-amoy.polygon.technology/',\n    // Avalanche Mainnet\n    43114: 'https://api.avax.network/ext/bc/C/rpc',\n    // Avalanche Fuji Testnet\n    43113: 'https://api.avax-test.network/ext/bc/C/rpc',\n    // Arbitrum Mainnet\n    42161: 'https://arb1.arbitrum.io/rpc',\n    // Arbitrum Sepolia Testnet\n    421614: 'https://arbitrum-sepolia.blockpi.network/v1/rpc/public',\n    // Optimism Mainnet\n    10: 'https://mainnet.optimism.io',\n    // Optimism Sepolia Testnet\n    11155420: 'https://sepolia.optimism.io',\n    // Base Mainnet\n    8453: 'https://mainnet.base.org',\n    // Base Sepolia Testnet\n    84532: 'https://sepolia.base.org',\n    // Zora\n    7777777: 'https://rpc.zora.energy',\n    // Zora Sepolia Testnet\n    999999999: 'https://sepolia.rpc.zora.energy',\n    // Scroll\n    534352: 'https://rpc.scroll.io',\n    // Scroll Sepolia Testnet\n    534351: 'https://sepolia-rpc.scroll.io',\n    // Linea\n    59144: 'https://rpc.linea.build',\n    // zKatana Sepolia Testnet\n    1261120: 'https://rpc.startale.com/zkatana',\n    // Blast\n    81457: 'https://rpc.blast.io',\n    // Blast Sepolia Testnet\n    168587773: 'https://sepolia.blast.io'\n};\nconst ETH_ENV_WALLET_SERVER_MAPPING = {\n    prod: 'https://wallet-v2.blocto.app',\n    staging: 'https://wallet-v2-staging.blocto.app',\n    dev: 'https://wallet-v2-dev.blocto.app',\n};\nconst ETH_SESSION_KEY_MAPPING = {\n    prod: KEY_SESSION.prod,\n    staging: KEY_SESSION.staging,\n    dev: KEY_SESSION.dev,\n};\n/* eth series constants end */\n/* aptos constants begin */\nconst APT_SESSION_KEY_MAPPING = {\n    1: KEY_SESSION.prod,\n    2: KEY_SESSION.dev,\n    3: KEY_SESSION.dev,\n    4: KEY_SESSION.dev,\n    5: KEY_SESSION.staging,\n};\nconst APT_CHAIN_ID_SERVER_MAPPING = {\n    // MAINNET\n    1: 'https://wallet-v2.blocto.app',\n    // TESTNET\n    2: 'https://wallet-v2-dev.blocto.app',\n    // DEVNET\n    3: 'https://wallet-v2-dev.blocto.app',\n    // TESTING\n    4: 'https://wallet-v2-dev.blocto.app',\n    // PREMAINNET\n    5: 'https://wallet-v2-staging.blocto.app',\n};\nvar WalletAdapterNetwork;\n(function (WalletAdapterNetwork) {\n    WalletAdapterNetwork[\"Mainnet\"] = \"mainnet\";\n    WalletAdapterNetwork[\"Testnet\"] = \"testnet\";\n    WalletAdapterNetwork[\"Devnet\"] = \"devnet\";\n    WalletAdapterNetwork[\"Testing\"] = \"testing\";\n    WalletAdapterNetwork[\"Premainnet\"] = \"premainnet\";\n})(WalletAdapterNetwork || (WalletAdapterNetwork = {}));\nconst APT_CHAIN_ID_NAME_MAPPING = {\n    1: WalletAdapterNetwork.Mainnet,\n    2: WalletAdapterNetwork.Testnet,\n    3: WalletAdapterNetwork.Devnet,\n    4: WalletAdapterNetwork.Testing,\n    5: WalletAdapterNetwork.Premainnet,\n};\nconst APT_CHAIN_ID_RPC_MAPPING = {\n    1: 'https://fullnode.mainnet.aptoslabs.com/v1',\n    2: 'https://fullnode.testnet.aptoslabs.com/v1',\n    3: 'https://fullnode.devnet.aptoslabs.com/v1',\n    4: '',\n    5: 'https://premainnet.aptosdev.com/v1',\n};\n/* aptos constants end */\nconst EIP1193_EVENTS = [\n    'connect',\n    'disconnect',\n    'message',\n    'chainChanged',\n    'accountsChanged',\n];\n// Preserve login for 1 day\nconst LOGIN_PERSISTING_TIME = 86400 * 1000;\nconst DEFAULT_APP_ID = '00000000-0000-0000-0000-000000000000';\n// Will inject the version of the SDK by rollup versionInjector during build time\nconst SDK_VERSION = '0.10.2';\n\n// The root class for all providers\nclass BloctoProvider {\n    constructor() {\n        this.isBlocto = true;\n        this.isConnecting = false;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.eventListeners = {};\n        // alias removeListener\n        this.off = this.removeListener;\n        // init event listeners\n        EIP1193_EVENTS.forEach((event) => {\n            this.eventListeners[event] = [];\n        });\n        this.appId = DEFAULT_APP_ID;\n    }\n    // implement by children\n    // eslint-disable-next-line\n    request(payload) {\n        return __awaiter(this, void 0, void 0, function* () { });\n    }\n    on(event, listener) {\n        if (!EIP1193_EVENTS.includes(event))\n            return;\n        this.eventListeners[event].push(listener);\n    }\n    // @todo: implement it\n    // eslint-disable-next-line\n    once() { }\n    removeListener(event, listener) {\n        const listeners = this.eventListeners[event];\n        const index = listeners.findIndex((item) => item === listener);\n        if (index !== -1) {\n            this.eventListeners[event].splice(index, 1);\n        }\n    }\n}\n\nconst IFRAME_STYLE = 'width:100vw;height:100%;position:fixed;top:0;left:0;z-index:2147483646;border:none;box-sizing:border-box;color-scheme:light;inset:0px;display:block;pointer-events:auto;';\nfunction createFrame(url) {\n    const frame = document.createElement('iframe');\n    frame.setAttribute('src', url);\n    frame.setAttribute('style', IFRAME_STYLE);\n    return frame;\n}\nfunction attachFrame(frame) {\n    document.body.appendChild(frame);\n}\nfunction detatchFrame(frame) {\n    const parentNode = frame && frame.parentNode;\n    if (parentNode && parentNode.removeChild instanceof Function) {\n        parentNode.removeChild(frame);\n    }\n}\n\nvar addSelfRemovableHandler = (eventType, handler, target = window) => {\n    function listener(e) {\n        const removeEventListener = () => target.removeEventListener(eventType, listener);\n        handler(e, removeEventListener);\n    }\n    target.addEventListener(eventType, listener);\n};\n\nconst isStorageSupported = () => {\n    if (typeof window === 'undefined') {\n        return false;\n    }\n    try {\n        window.sessionStorage.setItem('local_storage_supported', '1');\n        const result = window.sessionStorage.getItem('local_storage_supported');\n        window.sessionStorage.removeItem('local_storage_supported');\n        return result === '1';\n    }\n    catch (error) {\n        return false;\n    }\n};\nclass MemoryStorage {\n    constructor() {\n        this.storage = {};\n    }\n    getItem(key) {\n        return this[key] || null;\n    }\n    setItem(key, value) {\n        this.storage[key] = value;\n    }\n    removeItem(key) {\n        delete this.storage[key];\n    }\n}\nconst memoryStorage = typeof window !== 'undefined' ? window.memoryStorage : new MemoryStorage();\n\nconst storage = isStorageSupported() ? window.sessionStorage : memoryStorage;\nconst getItem = (key, defaultValue = null) => {\n    const value = storage.getItem(key);\n    try {\n        return (value && JSON.parse(value)) || defaultValue;\n    }\n    catch (SyntaxError) {\n        return value || defaultValue;\n    }\n};\nconst setItem = (key, value) => storage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\nconst removeItem = (key) => {\n    setItem(key, ''); // Due to some versions of browser bug can't removeItem correctly.\n    storage.removeItem(key);\n};\n/**\n * @param {KEY_SESSION} key - key to retrieve the data\n * @returns {ProviderSession | null} ProviderSession | null\n * @description\n * Get ProviderSession from storage.\n * If the data is expired, will remove the data and return null\n */\nconst getAccountStorage = (key) => {\n    const rawAccountStorage = getItem(key, null);\n    if (!rawAccountStorage)\n        return null;\n    // compare the expiry time of the item with the current time\n    if (new Date().getTime() > rawAccountStorage.expiry ||\n        rawAccountStorage.v !== SDK_VERSION) {\n        removeItem(key);\n        return null;\n    }\n    return rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data;\n};\n/**\n  @param {KEY_SESSION} key - key to store the data\n  @param {ProviderSession} data - Only the part of ProviderSession that needs to be updated\n  @param {number} expiry - expiry time of the data\n*/\nconst setAccountStorage = (key, data, expiry) => {\n    var _a, _b, _c;\n    const rawAccountStorage = getItem(key);\n    const newAccountStorage = {\n        data: {\n            code: (data === null || data === void 0 ? void 0 : data.code) || ((_a = rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data) === null || _a === void 0 ? void 0 : _a.code),\n            accounts: Object.assign(Object.assign({}, (_b = rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data) === null || _b === void 0 ? void 0 : _b.accounts), data === null || data === void 0 ? void 0 : data.accounts),\n            evm: Object.assign(Object.assign({}, (_c = rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.data) === null || _c === void 0 ? void 0 : _c.evm), data === null || data === void 0 ? void 0 : data.evm),\n        },\n        expiry: expiry ||\n            (rawAccountStorage === null || rawAccountStorage === void 0 ? void 0 : rawAccountStorage.expiry) ||\n            new Date().getTime() + LOGIN_PERSISTING_TIME,\n        v: SDK_VERSION,\n    };\n    setItem(key, newAccountStorage);\n    return;\n};\nconst getChainAddress = (key, chain) => {\n    var _a, _b, _c;\n    if (!((_a = getAccountStorage(key)) === null || _a === void 0 ? void 0 : _a.code)) {\n        removeItem(key);\n        return null;\n    }\n    return ((_c = (_b = getAccountStorage(key)) === null || _b === void 0 ? void 0 : _b.accounts) === null || _c === void 0 ? void 0 : _c[chain]) || null;\n};\nconst setChainAddress = (key, chain, account) => {\n    setAccountStorage(key, { accounts: { [chain]: account } });\n    return;\n};\nconst removeChainAddress = (key, chain) => {\n    setAccountStorage(key, { accounts: { [chain]: undefined } });\n    return;\n};\nconst getEvmAddress = (key, chain) => {\n    var _a, _b, _c;\n    if (!((_a = getAccountStorage(key)) === null || _a === void 0 ? void 0 : _a.code)) {\n        removeItem(key);\n        return null;\n    }\n    return ((_c = (_b = getAccountStorage(key)) === null || _b === void 0 ? void 0 : _b.evm) === null || _c === void 0 ? void 0 : _c[chain]) || null;\n};\nconst setEvmAddress = (key, chain, accounts) => {\n    setAccountStorage(key, { evm: { [chain]: accounts } });\n    return;\n};\nconst removeAllEvmAddress = (key) => {\n    const newAccountStorage = getItem(key);\n    if (!newAccountStorage)\n        return;\n    newAccountStorage.data.evm = {};\n    setItem(key, newAccountStorage);\n    return;\n};\n\nfunction responseSessionGuard(response, key, disconnectHandler) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (response.status === 403 || response.status === 401) {\n            if (disconnectHandler) {\n                disconnectHandler();\n            }\n            removeItem(key);\n        }\n        if (!response.ok) {\n            const data = yield response.json();\n            const e = new Error((data === null || data === void 0 ? void 0 : data.message) || 'unknown error');\n            e.error_code = data === null || data === void 0 ? void 0 : data.error_code;\n            throw e;\n        }\n        return response.json();\n    });\n}\n\nconst isEmail = (value) => /\\S+@\\S+\\.\\S+/.test(value);\n\nvar ERROR_MESSAGE;\n(function (ERROR_MESSAGE) {\n    ERROR_MESSAGE[\"INVALID_TRANSACTION\"] = \"Invalid transaction\";\n    ERROR_MESSAGE[\"INVALID_TRANSACTIONS\"] = \"Invalid transactions\";\n    ERROR_MESSAGE[\"INVALID_TRANSACTION_VALUE\"] = \"Transaction params \\\"value\\\" should be hex-encoded string\";\n})(ERROR_MESSAGE || (ERROR_MESSAGE = {}));\n\nvar global$1 = (typeof global !== \"undefined\" ? global :\n  typeof self !== \"undefined\" ? self :\n  typeof window !== \"undefined\" ? window : {});\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62;\n  revLookup['_'.charCodeAt(0)] = 63;\n}\n\nfunction toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = (tmp >> 16) & 0xFF;\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[(tmp << 4) & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n    output += lookup[tmp >> 10];\n    output += lookup[(tmp >> 4) & 0x3F];\n    output += lookup[(tmp << 2) & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('')\n}\n\nfunction read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nvar toString = {}.toString;\n\nvar isArray = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined\n  ? global$1.TYPED_ARRAY_SUPPORT\n  : true;\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nkMaxLength();\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr\n};\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) ;\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n};\n\nfunction allocUnsafe (that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n};\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n};\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer\n};\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap (b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this\n};\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this\n};\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this\n};\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0;\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n};\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n};\n\nBuffer.prototype.inspect = function inspect () {\n  var str = '';\n  var max = INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>'\n};\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset;  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1);\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n};\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n};\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed;\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n};\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return fromByteArray(buf)\n  } else {\n    return fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    );\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset]\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | (this[offset + 1] << 8)\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return (this[offset] << 8) | this[offset + 1]\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n};\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | (this[offset + 1] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | (this[offset] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, true, 23, 4)\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, false, 23, 4)\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, true, 52, 8)\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, false, 52, 8)\n};\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 1] = (value >>> 8);\n    this[offset] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 3] = (value >>> 24);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4);\n  }\n  write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n};\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8);\n  }\n  write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    );\n  }\n\n  return len\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i];\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n\nconst isHexString = (hex) => typeof hex === 'string' && /^0x[0-9A-Fa-f]*$/.test(hex);\nconst utf8ToHex = (str) => {\n    return Buffer.from(str, 'utf8').toString('hex');\n};\n\nconst isValidTransaction = (transaction) => {\n    if (!transaction ||\n        typeof transaction !== 'object' ||\n        !('from' in transaction)) {\n        return { isValid: false, invalidMsg: ERROR_MESSAGE.INVALID_TRANSACTION };\n    }\n    if (transaction.value && !isHexString(transaction.value)) {\n        return {\n            isValid: false,\n            invalidMsg: ERROR_MESSAGE.INVALID_TRANSACTION_VALUE,\n        };\n    }\n    return { isValid: true };\n};\nconst isValidTransactions = (transactions) => {\n    if (!Array.isArray(transactions)) {\n        return { isValid: false, invalidMsg: ERROR_MESSAGE.INVALID_TRANSACTIONS };\n    }\n    for (let i = 0; i < transactions.length; i++) {\n        const { isValid, invalidMsg } = isValidTransaction(transactions[i]);\n        if (!isValid) {\n            return { isValid, invalidMsg };\n        }\n    }\n    return { isValid: true };\n};\n\nfunction getEvmSupport() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { networks } = yield fetch('https://api.blocto.app/networks/evm').then((response) => response.json());\n        const evmSupportMap = networks.reduce((a, v) => (Object.assign(Object.assign({}, a), { [v.chain_id]: v })), {});\n        return evmSupportMap;\n    });\n}\n\nvar dist = {};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct$1()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\n\nvar classes = {};\n\nvar fastSafeStringify = stringify;\nstringify[\"default\"] = stringify;\nstringify.stable = deterministicStringify;\nstringify.stableStringify = deterministicStringify;\nvar LIMIT_REPLACE_NODE = '[...]';\nvar CIRCULAR_REPLACE_NODE = '[Circular]';\nvar arr = [];\nvar replacerStack = [];\nfunction defaultOptions() {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  };\n}\n\n// Regular stringify\nfunction stringify(obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions();\n  }\n  decirc(obj, '', 0, [], undefined, 0, options);\n  var res;\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer);\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]');\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop();\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3]);\n      } else {\n        part[0][part[1]] = part[2];\n      }\n    }\n  }\n  return res;\n}\nfunction setReplace(replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, {\n        value: replace\n      });\n      arr.push([parent, k, val, propertyDescriptor]);\n    } else {\n      replacerStack.push([val, k, replace]);\n    }\n  } else {\n    parent[k] = replace;\n    arr.push([parent, k, val]);\n  }\n}\nfunction decirc(val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1;\n  var i;\n  if (_typeof(val) === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n        return;\n      }\n    }\n    if (typeof options.depthLimit !== 'undefined' && depth > options.depthLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    if (typeof options.edgesLimit !== 'undefined' && edgeIndex + 1 > options.edgesLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    stack.push(val);\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options);\n      }\n    } else {\n      var keys = Object.keys(val);\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        decirc(val[key], key, i, stack, val, depth, options);\n      }\n    }\n    stack.pop();\n  }\n}\n\n// Stable-stringify\nfunction compareFunction(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\nfunction deterministicStringify(obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions();\n  }\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj;\n  var res;\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer);\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]');\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop();\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3]);\n      } else {\n        part[0][part[1]] = part[2];\n      }\n    }\n  }\n  return res;\n}\nfunction deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1;\n  var i;\n  if (_typeof(val) === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n        return;\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return;\n      }\n    } catch (_) {\n      return;\n    }\n    if (typeof options.depthLimit !== 'undefined' && depth > options.depthLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    if (typeof options.edgesLimit !== 'undefined' && edgeIndex + 1 > options.edgesLimit) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n      return;\n    }\n    stack.push(val);\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options);\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {};\n      var keys = Object.keys(val).sort(compareFunction);\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        deterministicDecirc(val[key], key, i, stack, val, depth, options);\n        tmp[key] = val[key];\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val]);\n        parent[k] = tmp;\n      } else {\n        return tmp;\n      }\n    }\n    stack.pop();\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues(replacer) {\n  replacer = typeof replacer !== 'undefined' ? replacer : function (k, v) {\n    return v;\n  };\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i];\n        if (part[1] === key && part[0] === val) {\n          val = part[2];\n          replacerStack.splice(i, 1);\n          break;\n        }\n      }\n    }\n    return replacer.call(this, key, val);\n  };\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(classes, \"__esModule\", {\n  value: true\n});\nclasses.EthereumProviderError = classes.EthereumRpcError = void 0;\nvar fast_safe_stringify_1 = fastSafeStringify;\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nvar EthereumRpcError = /*#__PURE__*/function (_Error) {\n  _inherits(EthereumRpcError, _Error);\n  var _super = _createSuper(EthereumRpcError);\n  function EthereumRpcError(code, message, data) {\n    var _this;\n    _classCallCheck(this, EthereumRpcError);\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    _this = _super.call(this, message);\n    _this.code = code;\n    if (data !== undefined) {\n      _this.data = data;\n    }\n    return _this;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n  _createClass(EthereumRpcError, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var serialized = {\n        code: this.code,\n        message: this.message\n      };\n      if (this.data !== undefined) {\n        serialized.data = this.data;\n      }\n      if (this.stack) {\n        serialized.stack = this.stack;\n      }\n      return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return fast_safe_stringify_1[\"default\"](this.serialize(), stringifyReplacer, 2);\n    }\n  }]);\n  return EthereumRpcError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nclasses.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nvar EthereumProviderError = /*#__PURE__*/function (_EthereumRpcError) {\n  _inherits(EthereumProviderError, _EthereumRpcError);\n  var _super2 = _createSuper(EthereumProviderError);\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  function EthereumProviderError(code, message, data) {\n    _classCallCheck(this, EthereumProviderError);\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    return _super2.call(this, code, message, data);\n  }\n  return _createClass(EthereumProviderError);\n}(EthereumRpcError);\nclasses.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n  return value;\n}\n\nvar utils = {};\n\nvar errorConstants = {};\n\nObject.defineProperty(errorConstants, \"__esModule\", {\n  value: true\n});\nerrorConstants.errorValues = errorConstants.errorCodes = void 0;\nerrorConstants.errorCodes = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n    disconnected: 4900,\n    chainDisconnected: 4901\n  }\n};\nerrorConstants.errorValues = {\n  '-32700': {\n    standard: 'JSON RPC 2.0',\n    message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.'\n  },\n  '-32600': {\n    standard: 'JSON RPC 2.0',\n    message: 'The JSON sent is not a valid Request object.'\n  },\n  '-32601': {\n    standard: 'JSON RPC 2.0',\n    message: 'The method does not exist / is not available.'\n  },\n  '-32602': {\n    standard: 'JSON RPC 2.0',\n    message: 'Invalid method parameter(s).'\n  },\n  '-32603': {\n    standard: 'JSON RPC 2.0',\n    message: 'Internal JSON-RPC error.'\n  },\n  '-32000': {\n    standard: 'EIP-1474',\n    message: 'Invalid input.'\n  },\n  '-32001': {\n    standard: 'EIP-1474',\n    message: 'Resource not found.'\n  },\n  '-32002': {\n    standard: 'EIP-1474',\n    message: 'Resource unavailable.'\n  },\n  '-32003': {\n    standard: 'EIP-1474',\n    message: 'Transaction rejected.'\n  },\n  '-32004': {\n    standard: 'EIP-1474',\n    message: 'Method not supported.'\n  },\n  '-32005': {\n    standard: 'EIP-1474',\n    message: 'Request limit exceeded.'\n  },\n  '4001': {\n    standard: 'EIP-1193',\n    message: 'User rejected the request.'\n  },\n  '4100': {\n    standard: 'EIP-1193',\n    message: 'The requested account and/or method has not been authorized by the user.'\n  },\n  '4200': {\n    standard: 'EIP-1193',\n    message: 'The requested method is not supported by this Ethereum provider.'\n  },\n  '4900': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from all chains.'\n  },\n  '4901': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from the specified chain.'\n  }\n};\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\n  var error_constants_1 = errorConstants;\n  var classes_1 = classes;\n  var FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\n  var FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\n  var FALLBACK_ERROR = {\n    code: FALLBACK_ERROR_CODE,\n    message: getMessageFromCode(FALLBACK_ERROR_CODE)\n  };\n  exports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n  /**\n   * Gets the message for a given code, or a fallback message if the code has\n   * no corresponding message.\n   */\n  function getMessageFromCode(code) {\n    var fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n    if (Number.isInteger(code)) {\n      var codeString = code.toString();\n      if (hasKey(error_constants_1.errorValues, codeString)) {\n        return error_constants_1.errorValues[codeString].message;\n      }\n      if (isJsonRpcServerError(code)) {\n        return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n      }\n    }\n    return fallbackMessage;\n  }\n  exports.getMessageFromCode = getMessageFromCode;\n  /**\n   * Returns whether the given code is valid.\n   * A code is only valid if it has a message.\n   */\n  function isValidCode(code) {\n    if (!Number.isInteger(code)) {\n      return false;\n    }\n    var codeString = code.toString();\n    if (error_constants_1.errorValues[codeString]) {\n      return true;\n    }\n    if (isJsonRpcServerError(code)) {\n      return true;\n    }\n    return false;\n  }\n  exports.isValidCode = isValidCode;\n  /**\n   * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n   * Merely copies the given error's values if it is already compatible.\n   * If the given error is not fully compatible, it will be preserved on the\n   * returned object's data.originalError property.\n   */\n  function serializeError(error) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$fallbackError = _ref.fallbackError,\n      fallbackError = _ref$fallbackError === void 0 ? FALLBACK_ERROR : _ref$fallbackError,\n      _ref$shouldIncludeSta = _ref.shouldIncludeStack,\n      shouldIncludeStack = _ref$shouldIncludeSta === void 0 ? false : _ref$shouldIncludeSta;\n    var _a, _b;\n    if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n      throw new Error('Must provide fallback error with integer number code and string message.');\n    }\n    if (error instanceof classes_1.EthereumRpcError) {\n      return error.serialize();\n    }\n    var serialized = {};\n    if (error && _typeof(error) === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {\n      var _error = error;\n      serialized.code = _error.code;\n      if (_error.message && typeof _error.message === 'string') {\n        serialized.message = _error.message;\n        if (hasKey(_error, 'data')) {\n          serialized.data = _error.data;\n        }\n      } else {\n        serialized.message = getMessageFromCode(serialized.code);\n        serialized.data = {\n          originalError: assignOriginalError(error)\n        };\n      }\n    } else {\n      serialized.code = fallbackError.code;\n      var message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n      serialized.message = message && typeof message === 'string' ? message : fallbackError.message;\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n    var stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n    if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n      serialized.stack = stack;\n    }\n    return serialized;\n  }\n  exports.serializeError = serializeError;\n  // Internal\n  function isJsonRpcServerError(code) {\n    return code >= -32099 && code <= -32000;\n  }\n  function assignOriginalError(error) {\n    if (error && _typeof(error) === 'object' && !Array.isArray(error)) {\n      return Object.assign({}, error);\n    }\n    return error;\n  }\n  function hasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  }\n})(utils);\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar errors = {};\n\nObject.defineProperty(errors, \"__esModule\", {\n  value: true\n});\nerrors.ethErrors = void 0;\nvar classes_1 = classes;\nvar utils_1 = utils;\nvar error_constants_1 = errorConstants;\nerrors.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: function parse(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: function invalidRequest(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: function invalidParams(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: function methodNotFound(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: function internal(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg);\n    },\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: function server(opts) {\n      if (!opts || _typeof(opts) !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n      var code = opts.code;\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n      return getEthJsonRpcError(code, opts);\n    },\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: function invalidInput(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: function resourceNotFound(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: function resourceUnavailable(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: function transactionRejected(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: function methodNotSupported(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg);\n    },\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: function limitExceeded(arg) {\n      return getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg);\n    }\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: function userRejectedRequest(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: function unauthorized(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: function unsupportedMethod(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: function disconnected(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: function chainDisconnected(arg) {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: function custom(opts) {\n      if (!opts || _typeof(opts) !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n      var code = opts.code,\n        message = opts.message,\n        data = opts.data;\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n  var _parseOpts = parseOpts(arg),\n    _parseOpts2 = _slicedToArray(_parseOpts, 2),\n    message = _parseOpts2[0],\n    data = _parseOpts2[1];\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n  var _parseOpts3 = parseOpts(arg),\n    _parseOpts4 = _slicedToArray(_parseOpts3, 2),\n    message = _parseOpts4[0],\n    data = _parseOpts4[1];\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (_typeof(arg) === 'object' && !Array.isArray(arg)) {\n      var message = arg.message,\n        data = arg.data;\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message || undefined, data];\n    }\n  }\n  return [];\n}\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;\n  var classes_1 = classes;\n  Object.defineProperty(exports, \"EthereumRpcError\", {\n    enumerable: true,\n    get: function get() {\n      return classes_1.EthereumRpcError;\n    }\n  });\n  Object.defineProperty(exports, \"EthereumProviderError\", {\n    enumerable: true,\n    get: function get() {\n      return classes_1.EthereumProviderError;\n    }\n  });\n  var utils_1 = utils;\n  Object.defineProperty(exports, \"serializeError\", {\n    enumerable: true,\n    get: function get() {\n      return utils_1.serializeError;\n    }\n  });\n  Object.defineProperty(exports, \"getMessageFromCode\", {\n    enumerable: true,\n    get: function get() {\n      return utils_1.getMessageFromCode;\n    }\n  });\n  var errors_1 = errors;\n  Object.defineProperty(exports, \"ethErrors\", {\n    enumerable: true,\n    get: function get() {\n      return errors_1.ethErrors;\n    }\n  });\n  var error_constants_1 = errorConstants;\n  Object.defineProperty(exports, \"errorCodes\", {\n    enumerable: true,\n    get: function get() {\n      return error_constants_1.errorCodes;\n    }\n  });\n})(dist);\n\nvar _EthereumProvider_instances, _EthereumProvider_getBloctoProperties, _EthereumProvider_addToSwitchable, _EthereumProvider_checkNetworkMatched, _EthereumProvider_createAuthzFrame;\nfunction parseChainId(chainId) {\n    if (!chainId) {\n        return 1;\n    }\n    if (typeof chainId === 'number') {\n        return chainId;\n    }\n    else if (chainId.startsWith('0x')) {\n        return parseInt(chainId, 16);\n    }\n    return parseInt(chainId, 10);\n}\nclass EthereumProvider extends BloctoProvider {\n    get existedSDK() {\n        if (typeof window === 'undefined')\n            return undefined;\n        return window.ethereum;\n    }\n    constructor(config) {\n        var _a;\n        super();\n        _EthereumProvider_instances.add(this);\n        this.networkVersion = '1'; // same as chainId but in decimal\n        this.off = this.removeListener;\n        this.injectedWalletServer = config.walletServer;\n        this._blocto = {\n            sessionKeyEnv: KEY_SESSION.prod,\n            walletServer: this.injectedWalletServer || '',\n            blockchainName: '',\n            networkType: '',\n            switchableNetwork: {},\n        };\n        this.appId = config.appId || DEFAULT_APP_ID;\n        if ('chainId' in config) {\n            const { chainId, rpc } = config;\n            invariant(chainId, \"'chainId' is required\");\n            this.networkVersion = `${parseChainId(chainId)}`;\n            this.chainId = `0x${parseChainId(chainId).toString(16)}`;\n            // setup rpc\n            this.rpc = rpc || ETH_RPC_LIST[this.networkVersion];\n            invariant(this.rpc, \"'rpc' is required\");\n        }\n        else {\n            const { defaultChainId, switchableChains } = config;\n            invariant(defaultChainId, \"'defaultChainId' is required\");\n            this.networkVersion = `${parseChainId(defaultChainId)}`;\n            this.chainId = `0x${parseChainId(defaultChainId).toString(16)}`;\n            // get config from switchableChains array\n            const chainConfig = switchableChains.find((chain) => parseChainId(chain.chainId) === parseChainId(defaultChainId));\n            if (!chainConfig) {\n                throw dist.ethErrors.provider.custom({\n                    code: 1001,\n                    message: `Chain ${defaultChainId} is not in switchableChains list`,\n                });\n            }\n            this.rpc = ((_a = chainConfig.rpcUrls) === null || _a === void 0 ? void 0 : _a[0]) || ETH_RPC_LIST[this.networkVersion];\n            invariant(this.rpc, \"'rpc' is required\");\n            this._blocto.unloadedNetwork = switchableChains;\n        }\n    }\n    // DEPRECATED API: see https://docs.metamask.io/guide/ethereum-provider.html#ethereum-send-deprecated\n    send(methodOrPayload, paramsOrCallback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (true) {\n                // signature type 1: arg1 - JSON-RPC payload, arg2 - callback;\n                // ethereum.send(payload: JsonRpcRequest, callback: JsonRpcCallback): void;\n                // This signature is exactly like ethereum.sendAsync()\n                case paramsOrCallback instanceof Function:\n                    return this.sendAsync(methodOrPayload, paramsOrCallback);\n                // signature type 2: arg1 - JSON-RPC method name, arg2 - params array;\n                // ethereum.send(method: string, params?: Array<unknown>): Promise<JsonRpcResponse>;\n                // This signature is like an async ethereum.sendAsync() with method and params as arguments,\n                // instead of a JSON-RPC payload and callback\n                case typeof methodOrPayload === 'string' &&\n                    Array.isArray(paramsOrCallback):\n                    return this.sendAsync({\n                        jsonrpc: '2.0',\n                        method: methodOrPayload,\n                        params: paramsOrCallback,\n                    });\n                // signature type 3: arg1 - JSON-RPC payload(should be synchronous methods)\n                // ethereum.send(payload: JsonRpcRequest): unknown;\n                // This signature enables you to call some type of RPC methods synchronously\n                default:\n                    return this.sendAsync(methodOrPayload);\n            }\n        });\n    }\n    // DEPRECATED API: see https://docs.metamask.io/guide/ethereum-provider.html#legacy-methods implementation\n    // web3 v1.x BatchRequest still depends on it so we need to implement anyway ¯\\_(ツ)_/¯\n    sendAsync(payload, callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const separateRequests = (payload) => {\n                return payload.reduce((acc, request) => {\n                    var _a;\n                    if (request.method === 'eth_sendTransaction') {\n                        acc.sendRequests.push((_a = request.params) === null || _a === void 0 ? void 0 : _a[0]);\n                    }\n                    else {\n                        acc.otherRequests.push(this.request(request));\n                    }\n                    return acc;\n                }, { sendRequests: [], otherRequests: [] });\n            };\n            function createBaseResponse(item) {\n                return {\n                    id: String(item.id),\n                    jsonrpc: '2.0',\n                    method: item.method,\n                };\n            }\n            function processResponses(payload, responses) {\n                const processedResponses = [];\n                let responseIndex = 1;\n                payload.forEach((item) => {\n                    const baseResponse = createBaseResponse(item);\n                    if (item.method === 'eth_sendTransaction') {\n                        baseResponse.result = responses[0].value;\n                        baseResponse.error =\n                            responses[0].status !== 'fulfilled'\n                                ? responses[0].reason\n                                : undefined;\n                    }\n                    else {\n                        if (responseIndex < responses.length) {\n                            baseResponse.result = responses[responseIndex].value;\n                            baseResponse.error =\n                                responses[responseIndex].status !== 'fulfilled'\n                                    ? responses[responseIndex].reason\n                                    : undefined;\n                            responseIndex++;\n                        }\n                    }\n                    processedResponses.push(baseResponse);\n                });\n                return processedResponses;\n            }\n            const handleRequest = new Promise((resolve) => {\n                // web3 v1.x concat batched JSON-RPC requests to an array, handle it here\n                if (Array.isArray(payload)) {\n                    const { sendRequests, otherRequests } = separateRequests(payload);\n                    // collect transactions and send batch with custom method\n                    const batchReqPayload = {\n                        method: 'wallet_sendMultiCallTransaction',\n                        params: [sendRequests, false],\n                    };\n                    const isSendRequestsEmpty = sendRequests.length === 0;\n                    const idBase = Math.floor(Math.random() * 10000);\n                    const allPromise = isSendRequestsEmpty\n                        ? [...otherRequests]\n                        : [this.request(batchReqPayload), ...otherRequests];\n                    // resolve response when all request are executed\n                    Promise.allSettled(allPromise)\n                        .then((responses) => {\n                        if (isSendRequestsEmpty) {\n                            return resolve(responses.map((response, index) => {\n                                var _a;\n                                return {\n                                    id: String(((_a = payload[index]) === null || _a === void 0 ? void 0 : _a.id) || idBase + index + 1),\n                                    jsonrpc: '2.0',\n                                    method: payload[index].method,\n                                    result: response.status === 'fulfilled'\n                                        ? response.value\n                                        : undefined,\n                                    error: response.status !== 'fulfilled'\n                                        ? response.reason\n                                        : undefined,\n                                };\n                            }));\n                        }\n                        const originalLengthResponse = processResponses(payload, responses);\n                        return resolve(originalLengthResponse);\n                    })\n                        .catch((error) => {\n                        throw dist.ethErrors.rpc.internal(error === null || error === void 0 ? void 0 : error.message);\n                    });\n                }\n                else {\n                    this.request(Object.assign(Object.assign({}, payload), { id: Number(payload.id) })).then(resolve);\n                }\n            });\n            // execute callback or return promise, depdends on callback arg given or not\n            if (typeof callback === 'function') {\n                handleRequest\n                    .then((data) => {\n                    return callback(null, data);\n                })\n                    .catch((error) => callback(error));\n            }\n            else {\n                return handleRequest;\n            }\n        });\n    }\n    /**\n     * Sending userOperation using Blocto SDK.\n     * @param {IUserOperation} userOp - userOperation object\n     * @remarks No need to include nonce, initCode, and signature as parameters when using BloctoSDK to send userOperation.\n     * These parameters will be ignored.\n     * @returns {Promise<string>} - userOperation hash\n     */\n    sendUserOperation(userOp) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request({\n                method: 'eth_sendUserOperation',\n                params: [userOp],\n            });\n        });\n    }\n    request(payload) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        return __awaiter(this, void 0, void 0, function* () {\n            // web3.js v4 batch entry point\n            if (Array.isArray(payload)) {\n                return this.sendAsync(payload);\n            }\n            if (!(payload === null || payload === void 0 ? void 0 : payload.method))\n                throw dist.ethErrors.rpc.invalidRequest();\n            const { blockchainName, switchableNetwork, sessionKeyEnv } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            if ((_a = this.existedSDK) === null || _a === void 0 ? void 0 : _a.isBlocto) {\n                if (payload.method === 'wallet_switchEthereumChain') {\n                    if (!((_c = (_b = payload === null || payload === void 0 ? void 0 : payload.params) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.chainId)) {\n                        throw dist.ethErrors.rpc.invalidParams();\n                    }\n                    return this.existedSDK.request(payload).then(() => {\n                        var _a, _b, _c;\n                        this.networkVersion = `${parseChainId((_a = payload === null || payload === void 0 ? void 0 : payload.params) === null || _a === void 0 ? void 0 : _a[0].chainId)}`;\n                        this.chainId = `0x${parseChainId((_b = payload === null || payload === void 0 ? void 0 : payload.params) === null || _b === void 0 ? void 0 : _b[0].chainId).toString(16)}`;\n                        this.rpc = (_c = switchableNetwork === null || switchableNetwork === void 0 ? void 0 : switchableNetwork[this.networkVersion]) === null || _c === void 0 ? void 0 : _c.rpc_url;\n                        return null;\n                    });\n                }\n                return this.existedSDK.request(payload);\n            }\n            // method that doesn't require user to be connected\n            switch (payload.method) {\n                case 'eth_chainId': {\n                    return this.chainId;\n                }\n                case 'net_version': {\n                    return this.networkVersion;\n                }\n                case 'wallet_addEthereumChain': {\n                    return this.loadSwitchableNetwork((payload === null || payload === void 0 ? void 0 : payload.params) || []);\n                }\n                case 'eth_blockNumber':\n                case 'web3_clientVersion':\n                case 'eth_call': {\n                    const response = yield this.handleReadRequests(payload);\n                    if (!response || (response && !response.result && response.error)) {\n                        const errorMessage = ((_d = response === null || response === void 0 ? void 0 : response.error) === null || _d === void 0 ? void 0 : _d.message)\n                            ? response.error.message\n                            : 'Request failed';\n                        throw dist.ethErrors.rpc.internal(errorMessage);\n                    }\n                    if (typeof (payload === null || payload === void 0 ? void 0 : payload.callback) === 'function') {\n                        payload.callback(null, response.result);\n                    }\n                    return response.result;\n                }\n                case 'wallet_switchEthereumChain': {\n                    return this.handleSwitchChain((_f = (_e = payload === null || payload === void 0 ? void 0 : payload.params) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.chainId);\n                }\n                case 'wallet_disconnect': {\n                    return this.handleDisconnect();\n                }\n                case 'eth_accounts': {\n                    return getEvmAddress(sessionKeyEnv, blockchainName) || [];\n                }\n            }\n            // Method that requires user to be connected\n            if (!getEvmAddress(sessionKeyEnv, blockchainName)) {\n                const email = (_g = payload === null || payload === void 0 ? void 0 : payload.params) === null || _g === void 0 ? void 0 : _g[0];\n                if (payload.method === 'eth_requestAccounts' && isEmail(email)) {\n                    yield this.enable(email);\n                }\n                else {\n                    yield this.enable();\n                }\n            }\n            try {\n                let response = null;\n                let result = null;\n                switch (payload.method) {\n                    case 'eth_requestAccounts': {\n                        result = yield this.fetchAccounts();\n                        break;\n                    }\n                    // eslint-disable-next-line\n                    case 'eth_coinbase': {\n                        result = (_h = getEvmAddress(sessionKeyEnv, blockchainName)) === null || _h === void 0 ? void 0 : _h[0];\n                        break;\n                    }\n                    case 'eth_signTypedData_v3':\n                    case 'eth_signTypedData':\n                    case 'eth_signTypedData_v4':\n                    case 'personal_sign': {\n                        result = yield this.handleSign(payload);\n                        break;\n                    }\n                    case 'eth_sign':\n                        throw dist.ethErrors.rpc.methodNotFound('Method Not Supported: eth_sign has been disabled');\n                    case 'eth_sendTransaction':\n                        result = yield this.handleSendTransaction(payload);\n                        break;\n                    case 'wallet_sendMultiCallTransaction':\n                        result = yield this.handleSendBatchTransaction(payload);\n                        break;\n                    case 'eth_signTransaction':\n                    case 'eth_sendRawTransaction': {\n                        throw dist.ethErrors.rpc.methodNotSupported('Method Not Supported: ' + payload.method);\n                    }\n                    case 'eth_sendUserOperation':\n                        result = yield this.handleSendUserOperation(payload);\n                        break;\n                    case 'eth_estimateUserOperationGas':\n                    case 'eth_getUserOperationByHash':\n                    case 'eth_getUserOperationReceipt':\n                    case 'eth_supportedEntryPoints':\n                        result = yield this.handleBundler(payload);\n                        break;\n                    default:\n                        response = yield this.handleReadRequests(payload);\n                }\n                if (response && !response.result && response.error) {\n                    const errorMessage = response.error.message\n                        ? response.error.message\n                        : 'Request failed';\n                    throw dist.ethErrors.rpc.internal(errorMessage);\n                }\n                if (response)\n                    return response.result;\n                return result;\n            }\n            catch (error) {\n                throw dist.ethErrors.rpc.internal(error === null || error === void 0 ? void 0 : error.message);\n            }\n        });\n    }\n    bloctoApi(url, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { walletServer, blockchainName, sessionKeyEnv } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const sessionId = ((_a = getAccountStorage(sessionKeyEnv)) === null || _a === void 0 ? void 0 : _a.code) || '';\n            if (!sessionId) {\n                throw dist.ethErrors.provider.unauthorized();\n            }\n            return fetch(`${walletServer}/api/${blockchainName}${url}`, Object.assign({ headers: {\n                    'Content-Type': 'application/json',\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Session-Identifier': sessionId,\n                } }, options))\n                .then((response) => responseSessionGuard(response, sessionKeyEnv, () => {\n                var _a;\n                (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.disconnect.forEach((listener) => listener(dist.ethErrors.provider.disconnected()));\n            }))\n                .catch((e) => {\n                if ((e === null || e === void 0 ? void 0 : e.error_code) === 'unsupported_method') {\n                    throw dist.ethErrors.rpc.methodNotSupported('Method Not Supported: ' + e.message);\n                }\n                else {\n                    throw dist.ethErrors.rpc.server({\n                        code: -32005,\n                        message: `Blocto server error: ${e.message}`,\n                    });\n                }\n            });\n        });\n    }\n    responseListener(frame, objectKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { walletServer } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            return new Promise((resolve, reject) => addSelfRemovableHandler('message', (event, removeEventListener) => {\n                const e = event;\n                if (e.origin === walletServer &&\n                    e.data.type === 'ETH:FRAME:RESPONSE') {\n                    if (e.data.status === 'APPROVED') {\n                        removeEventListener();\n                        detatchFrame(frame);\n                        resolve(e.data[objectKey]);\n                    }\n                    if (e.data.status === 'DECLINED') {\n                        removeEventListener();\n                        detatchFrame(frame);\n                        if (e.data.errorCode === 'incorrect_session_id') {\n                            this.handleDisconnect();\n                        }\n                        reject(dist.ethErrors.provider.userRejectedRequest(e.data.errorMessage));\n                    }\n                }\n                if (e.data.type === 'ETH:FRAME:CLOSE') {\n                    removeEventListener();\n                    detatchFrame(frame);\n                    reject(dist.ethErrors.provider.userRejectedRequest('User declined the request'));\n                }\n            }));\n        });\n    }\n    setIframe(url, blockchain) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof window === 'undefined') {\n                throw dist.ethErrors.provider.custom({\n                    code: 1001,\n                    message: 'Blocto SDK only works in browser environment',\n                });\n            }\n            const { walletServer, blockchainName } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const frame = createFrame(`${walletServer}/${this.appId}/${blockchain || blockchainName}${url}`);\n            attachFrame(frame);\n            return frame;\n        });\n    }\n    // eip-1102 alias\n    // DEPRECATED API: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md\n    enable(email) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof window === 'undefined') {\n                throw dist.ethErrors.provider.custom({\n                    code: 1001,\n                    message: 'Blocto SDK only works in browser environment',\n                });\n            }\n            const { walletServer, blockchainName, sessionKeyEnv } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            if ((_a = this.existedSDK) === null || _a === void 0 ? void 0 : _a.isBlocto) {\n                if (this.existedSDK.chainId !== this.chainId) {\n                    yield this.existedSDK.request({\n                        method: 'wallet_addEthereumChain',\n                        params: [{ chainId: this.chainId }],\n                    });\n                    yield this.existedSDK.request({\n                        method: 'wallet_switchEthereumChain',\n                        params: [{ chainId: this.chainId }],\n                    });\n                    setEvmAddress(sessionKeyEnv, blockchainName, [this.existedSDK.address]);\n                }\n                return new Promise((resolve, reject) => \n                // add a small delay to make sure the network has been switched\n                setTimeout(() => this.existedSDK.enable().then(resolve).catch(reject), 10));\n            }\n            const address = getEvmAddress(sessionKeyEnv, blockchainName);\n            if (address) {\n                return new Promise((resolve) => {\n                    resolve(address);\n                });\n            }\n            const params = new URLSearchParams();\n            params.set('l6n', window.location.origin);\n            params.set('v', SDK_VERSION);\n            params.set('q', `${window.location.pathname}${window.location.search}`);\n            const emailParam = email && isEmail(email) ? `/${email}` : '';\n            const loginFrame = yield this.setIframe(`/authn${emailParam}?${params.toString()}`);\n            return new Promise((resolve, reject) => {\n                addSelfRemovableHandler('message', (event, removeListener) => {\n                    var _a, _b;\n                    const e = event;\n                    if (e.origin === walletServer) {\n                        if (e.data.type === 'ETH:FRAME:RESPONSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.connect.forEach((listener) => listener({ chainId: this.chainId }));\n                            setAccountStorage(sessionKeyEnv, {\n                                code: e.data.code,\n                                evm: {\n                                    [blockchainName]: [e.data.addr],\n                                },\n                            }, e.data.exp);\n                            if ((_b = e.data) === null || _b === void 0 ? void 0 : _b.isAccountChanged) {\n                                postMessage({\n                                    originChain: CHAIN.ETHEREUM,\n                                    type: 'BLOCTO_SDK:ACCOUNT_CHANGED',\n                                });\n                            }\n                            addSelfRemovableHandler('message', (event, removeListener) => {\n                                var _a, _b, _c;\n                                const messageEvent = event;\n                                const isAccountChanged = ((_a = messageEvent.data) === null || _a === void 0 ? void 0 : _a.type) === 'BLOCTO_SDK:ACCOUNT_CHANGED';\n                                const isAnotherChain = ((_b = messageEvent.data) === null || _b === void 0 ? void 0 : _b.originChain) !== CHAIN.ETHEREUM;\n                                if (isAccountChanged) {\n                                    (_c = this.eventListeners) === null || _c === void 0 ? void 0 : _c.accountsChanged.forEach((listener) => listener([e.data.addr]));\n                                }\n                                if (isAccountChanged && isAnotherChain) {\n                                    this.handleDisconnect();\n                                    removeListener();\n                                }\n                            });\n                            resolve([e.data.addr]);\n                        }\n                        if (e.data.type === 'ETH:FRAME:CLOSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            reject(dist.ethErrors.provider.userRejectedRequest());\n                        }\n                    }\n                });\n            });\n        });\n    }\n    fetchAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const { blockchainName, sessionKeyEnv } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const { accounts } = yield this.bloctoApi(`/accounts`);\n            setEvmAddress(sessionKeyEnv, blockchainName, accounts);\n            return accounts;\n        });\n    }\n    handleReadRequests(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            return fetch(this.rpc, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(Object.assign({ id: 1, jsonrpc: '2.0' }, payload)),\n            })\n                .then((response) => response.json())\n                .catch((e) => {\n                throw dist.ethErrors.rpc.internal(e);\n            });\n        });\n    }\n    handleSign({ method, params }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let message = '';\n            if (Array.isArray(params)) {\n                if (method === 'personal_sign') {\n                    message = isHexString(params[0])\n                        ? params[0].slice(2)\n                        : utf8ToHex(params[0]);\n                }\n                else if ([\n                    'eth_signTypedData',\n                    'eth_signTypedData_v3',\n                    'eth_signTypedData_v4',\n                ].includes(method)) {\n                    message = params[1];\n                    const { domain } = JSON.parse(message);\n                    if (isHexString(domain.chainId)) {\n                        throw dist.ethErrors.rpc.invalidParams(`Provided chainId \"${domain.chainId}\" must be a number`);\n                    }\n                    if (parseChainId(domain.chainId) !== parseChainId(this.chainId)) {\n                        throw dist.ethErrors.rpc.invalidParams(`Provided chainId \"${domain.chainId}\" must match the active chainId \"${parseChainId(this.chainId)}\"`);\n                    }\n                }\n            }\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const { signatureId } = yield this.bloctoApi(`/user-signature`, { method: 'POST', body: JSON.stringify({ method, message }) });\n            const signFrame = yield this.setIframe(`/user-signature/${signatureId}`);\n            return this.responseListener(signFrame, 'signature');\n        });\n    }\n    handleSwitchChain(targetChainId) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!targetChainId) {\n                throw dist.ethErrors.rpc.invalidParams();\n            }\n            const { walletServer, blockchainName, sessionKeyEnv, switchableNetwork } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            const oldAccount = (_a = getEvmAddress(sessionKeyEnv, blockchainName)) === null || _a === void 0 ? void 0 : _a[0];\n            const oldChainId = parseChainId(this.chainId);\n            const newChainId = parseChainId(targetChainId);\n            if (oldChainId === newChainId) {\n                return null;\n            }\n            if (!switchableNetwork[newChainId]) {\n                throw dist.ethErrors.provider.custom({\n                    code: 4902,\n                    message: `Unrecognized chain ID \"${newChainId}\". Try adding the chain using wallet_addEthereumChain first.`,\n                });\n            }\n            this.networkVersion = `${newChainId}`;\n            this.chainId = `0x${newChainId.toString(16)}`;\n            this.rpc = switchableNetwork[newChainId].rpc_url;\n            this._blocto = Object.assign(Object.assign({}, this._blocto), { blockchainName: '', networkType: '' });\n            if (!oldAccount) {\n                (_b = this.eventListeners) === null || _b === void 0 ? void 0 : _b.chainChanged.forEach((listener) => listener(this.chainId));\n                yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n                return null;\n            }\n            // Go login flow when switching to a different blocto server\n            if (switchableNetwork[newChainId].wallet_web_url !==\n                switchableNetwork[oldChainId].wallet_web_url) {\n                return this.enable()\n                    .then(([newAccount]) => {\n                    var _a;\n                    if (newAccount !== oldAccount) {\n                        (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.accountsChanged.forEach((listener) => listener([newAccount]));\n                    }\n                    this.eventListeners.chainChanged.forEach((listener) => listener(this.chainId));\n                    return null;\n                })\n                    .catch((error) => {\n                    this.networkVersion = `${oldChainId}`;\n                    this.chainId = `0x${oldChainId.toString(16)}`;\n                    this.rpc = switchableNetwork[oldChainId].rpc_url;\n                    this._blocto = Object.assign(Object.assign({}, this._blocto), { blockchainName: '', networkType: '' });\n                    __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n                    throw error;\n                });\n            }\n            const switchChainFrame = yield this.setIframe(`/switch-chain?to=${switchableNetwork[newChainId].name}`, switchableNetwork[oldChainId].name);\n            return new Promise((resolve, reject) => {\n                addSelfRemovableHandler('message', (event, removeListener) => {\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    const e = event;\n                    if (e.origin === walletServer) {\n                        if (e.data.type === 'ETH:FRAME:RESPONSE') {\n                            removeListener();\n                            detatchFrame(switchChainFrame);\n                            if (((_a = e.data) === null || _a === void 0 ? void 0 : _a.addr) && oldAccount) {\n                                setAccountStorage(sessionKeyEnv, {\n                                    code: (_b = e.data) === null || _b === void 0 ? void 0 : _b.code,\n                                    evm: {\n                                        [switchableNetwork[newChainId].name]: [e.data.addr],\n                                    },\n                                }, (_c = e.data) === null || _c === void 0 ? void 0 : _c.exp);\n                                if (e.data.addr !== oldAccount) {\n                                    (_d = this.eventListeners) === null || _d === void 0 ? void 0 : _d.accountsChanged.forEach((listener) => listener([e.data.addr]));\n                                }\n                            }\n                            (_e = this.eventListeners) === null || _e === void 0 ? void 0 : _e.chainChanged.forEach((listener) => listener(this.chainId));\n                            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n                            resolve(null);\n                        }\n                        if (e.data.type === 'ETH:FRAME:CLOSE') {\n                            removeListener();\n                            detatchFrame(switchChainFrame);\n                            if ((_f = e.data) === null || _f === void 0 ? void 0 : _f.hasApprovedSwitchChain) {\n                                (_g = this.eventListeners) === null || _g === void 0 ? void 0 : _g.chainChanged.forEach((listener) => listener(this.chainId));\n                                removeAllEvmAddress(sessionKeyEnv);\n                                (_h = this.eventListeners) === null || _h === void 0 ? void 0 : _h.disconnect.forEach((listener) => listener(dist.ethErrors.provider.disconnected()));\n                                __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n                                resolve(null);\n                            }\n                            else {\n                                this.networkVersion = `${oldChainId}`;\n                                this.chainId = `0x${oldChainId.toString(16)}`;\n                                this.rpc = switchableNetwork[oldChainId].rpc_url;\n                                this._blocto = Object.assign(Object.assign({}, this._blocto), { blockchainName: '', networkType: '' });\n                                __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n                                reject(dist.ethErrors.provider.userRejectedRequest());\n                            }\n                        }\n                    }\n                });\n            });\n        });\n    }\n    handleSendTransaction(payload) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const { isValid, invalidMsg } = isValidTransaction((_a = payload.params) === null || _a === void 0 ? void 0 : _a[0]);\n            if (!isValid) {\n                throw dist.ethErrors.rpc.invalidParams(invalidMsg);\n            }\n            return __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_createAuthzFrame).call(this, payload.params);\n        });\n    }\n    handleSendBatchTransaction(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            let originalParams, revertFlag;\n            if (Array.isArray(payload.params) && payload.params.length >= 2) {\n                [originalParams, revertFlag] = payload.params;\n            }\n            else {\n                originalParams = payload.params;\n                revertFlag = false;\n            }\n            const revert = revertFlag ? revertFlag : false;\n            const { isValid, invalidMsg } = isValidTransactions(originalParams);\n            if (!isValid) {\n                throw dist.ethErrors.rpc.invalidParams(invalidMsg);\n            }\n            return __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_createAuthzFrame).call(this, originalParams, revert);\n        });\n    }\n    handleSendUserOperation(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            const { authorizationId } = yield this.bloctoApi(`/user-operation`, {\n                method: 'POST',\n                body: JSON.stringify(payload.params),\n            });\n            const userOPFrame = yield this.setIframe(`/user-operation/${authorizationId}`);\n            return this.responseListener(userOPFrame, 'userOpHash');\n        });\n    }\n    handleBundler(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_checkNetworkMatched).call(this);\n            return this.bloctoApi(`/rpc/bundler`, {\n                method: 'POST',\n                body: JSON.stringify(Object.assign({ id: 1, jsonrpc: '2.0' }, payload)),\n            });\n        });\n    }\n    handleDisconnect() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((_a = this.existedSDK) === null || _a === void 0 ? void 0 : _a.isBlocto) {\n                return this.existedSDK.request({ method: 'wallet_disconnect' });\n            }\n            const { sessionKeyEnv } = yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n            removeAllEvmAddress(sessionKeyEnv);\n            (_b = this.eventListeners) === null || _b === void 0 ? void 0 : _b.disconnect.forEach((listener) => listener(dist.ethErrors.provider.disconnected()));\n        });\n    }\n    loadSwitchableNetwork(networkList) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // setup switchable list if user set networkList\n            if (networkList === null || networkList === void 0 ? void 0 : networkList.length) {\n                const listToAdd = networkList.map(({ chainId, rpcUrls }) => {\n                    if (!chainId)\n                        throw dist.ethErrors.rpc.invalidParams('Empty chainId');\n                    const parsedChainId = `${parseChainId(chainId)}`;\n                    // skip if chainId already exists\n                    if (this._blocto.switchableNetwork[parsedChainId])\n                        return null;\n                    const parsedRpc = (rpcUrls === null || rpcUrls === void 0 ? void 0 : rpcUrls[0]) || ETH_RPC_LIST[parsedChainId];\n                    if (!parsedRpc)\n                        throw dist.ethErrors.rpc.invalidParams('rpcUrls required');\n                    return __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_addToSwitchable).call(this, {\n                        chainId: parsedChainId,\n                        rpcUrls: [parsedRpc],\n                    });\n                });\n                return Promise.all(listToAdd).then(() => null);\n            }\n            else {\n                throw dist.ethErrors.rpc.invalidParams('Empty networkList');\n            }\n        });\n    }\n    supportChainList() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const supportNetworkList = yield getEvmSupport().catch((e) => {\n                throw dist.ethErrors.provider.custom({\n                    code: 1001,\n                    message: `Get blocto server failed: ${e.message}`,\n                });\n            });\n            return Object.keys(supportNetworkList).map((chainId) => {\n                const { display_name } = supportNetworkList[chainId];\n                return {\n                    chainId,\n                    chainName: display_name,\n                };\n            });\n        });\n    }\n    on(event, listener) {\n        var _a;\n        if ((_a = this.existedSDK) === null || _a === void 0 ? void 0 : _a.isBlocto)\n            this.existedSDK.on(event, listener);\n        super.on(event, listener);\n    }\n    removeListener(event, listener) {\n        var _a;\n        if ((_a = this.existedSDK) === null || _a === void 0 ? void 0 : _a.isBlocto)\n            this.existedSDK.off(event, listener);\n        super.removeListener(event, listener);\n    }\n}\n_EthereumProvider_instances = new WeakSet(), _EthereumProvider_getBloctoProperties = function _EthereumProvider_getBloctoProperties() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        if ((_a = this._blocto) === null || _a === void 0 ? void 0 : _a.unloadedNetwork) {\n            yield this.loadSwitchableNetwork(this._blocto.unloadedNetwork);\n            delete this._blocto.unloadedNetwork;\n        }\n        if (this._blocto.sessionKeyEnv &&\n            this._blocto.walletServer &&\n            this._blocto.blockchainName &&\n            this._blocto.networkType &&\n            this._blocto.switchableNetwork) {\n            return this._blocto;\n        }\n        const supportNetworkList = yield getEvmSupport().catch((e) => {\n            throw dist.ethErrors.provider.custom({\n                code: 1001,\n                message: `Get blocto server failed: ${e.message}`,\n            });\n        });\n        const { chain_id, name, network_type, blocto_service_environment, display_name, } = (_b = supportNetworkList[this.networkVersion]) !== null && _b !== void 0 ? _b : {};\n        if (!chain_id) {\n            throw dist.ethErrors.provider.unsupportedMethod(`Get support chain failed: ${this.networkVersion} might not be supported yet.`);\n        }\n        const walletServer = this.injectedWalletServer ||\n            ETH_ENV_WALLET_SERVER_MAPPING[blocto_service_environment];\n        this._blocto = Object.assign(Object.assign({}, this._blocto), { sessionKeyEnv: ETH_SESSION_KEY_MAPPING[blocto_service_environment], walletServer, blockchainName: name, networkType: network_type, switchableNetwork: Object.assign(Object.assign({}, this._blocto.switchableNetwork), { [chain_id]: {\n                    name,\n                    display_name,\n                    network_type,\n                    wallet_web_url: walletServer,\n                    rpc_url: this.rpc,\n                } }) });\n        return this._blocto;\n    });\n}, _EthereumProvider_addToSwitchable = function _EthereumProvider_addToSwitchable({ chainId, rpcUrls, }) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        yield __classPrivateFieldGet(this, _EthereumProvider_instances, \"m\", _EthereumProvider_getBloctoProperties).call(this);\n        const supportNetworkList = yield getEvmSupport().catch((e) => {\n            throw dist.ethErrors.provider.custom({\n                code: 1001,\n                message: `Get blocto server failed: ${e.message}`,\n            });\n        });\n        const { chain_id, name, display_name, network_type, blocto_service_environment, } = (_a = supportNetworkList[chainId]) !== null && _a !== void 0 ? _a : {};\n        if (!chain_id)\n            throw dist.ethErrors.provider.unsupportedMethod(`Get support chain failed: ${chainId} might not be supported yet.`);\n        const wallet_web_url = ETH_ENV_WALLET_SERVER_MAPPING[blocto_service_environment];\n        this._blocto.switchableNetwork[chain_id] = {\n            name,\n            display_name,\n            network_type,\n            wallet_web_url,\n            rpc_url: rpcUrls[0],\n        };\n    });\n}, _EthereumProvider_checkNetworkMatched = function _EthereumProvider_checkNetworkMatched() {\n    var _a;\n    if (((_a = this.existedSDK) === null || _a === void 0 ? void 0 : _a.isBlocto) &&\n        parseChainId(this.existedSDK.chainId) !== parseChainId(this.chainId)) {\n        throw dist.ethErrors.provider.chainDisconnected();\n    }\n}, _EthereumProvider_createAuthzFrame = function _EthereumProvider_createAuthzFrame(params, revert = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { authorizationId } = yield this.bloctoApi(`/authz`, {\n            method: 'POST',\n            body: JSON.stringify([params, revert]),\n        });\n        const iframeParams = new URLSearchParams();\n        iframeParams.set('l6n', window.location.origin);\n        iframeParams.set('q', `${window.location.pathname}${window.location.search}`);\n        const authzFrame = yield this.setIframe(`/authz/${authorizationId}?${iframeParams.toString()}`);\n        return this.responseListener(authzFrame, 'txHash');\n    });\n};\n\nconst checkMessagePayloadFormat = (payload) => {\n    var _a, _b;\n    const formattedPayload = Object.assign({}, payload);\n    const { message, nonce, address, application, chainId } = payload;\n    if (typeof message !== 'string') {\n        formattedPayload.message = (_a = String(message)) !== null && _a !== void 0 ? _a : '';\n    }\n    if (typeof nonce !== 'string') {\n        formattedPayload.nonce = (_b = String(nonce)) !== null && _b !== void 0 ? _b : '';\n    }\n    if (address && typeof address !== 'boolean') {\n        formattedPayload.address = !!address;\n    }\n    if (application && typeof application !== 'boolean') {\n        formattedPayload.application = !!application;\n    }\n    if (chainId && typeof chainId !== 'boolean') {\n        formattedPayload.chainId = !!chainId;\n    }\n    return formattedPayload;\n};\nclass AptosProvider extends BloctoProvider {\n    get existedSDK() {\n        if (typeof window === 'undefined')\n            return undefined;\n        return window.bloctoAptos;\n    }\n    constructor({ chainId, server, appId }) {\n        super();\n        this.publicKey = [];\n        this.authKey = '';\n        this.off = this.removeListener;\n        invariant(chainId, \"'chainId' is required\");\n        invariant(appId, 'It is necessary to interact with Blocto wallet via your app id. Please visit https://developers.blocto.app for more details.');\n        this.chainId = chainId;\n        this.networkName = APT_CHAIN_ID_NAME_MAPPING[chainId];\n        this.api = APT_CHAIN_ID_RPC_MAPPING[chainId];\n        this.sessionKey = APT_SESSION_KEY_MAPPING[chainId];\n        const defaultServer = APT_CHAIN_ID_SERVER_MAPPING[chainId];\n        this.appId = appId || DEFAULT_APP_ID;\n        this.server = server || defaultServer || '';\n    }\n    get publicAccount() {\n        var _a;\n        return {\n            address: ((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a[0]) || null,\n            publicKey: this.publicKey.length ? this.publicKey : null,\n            // @todo: provide authkey\n            authKey: null,\n            minKeysRequired: 2,\n        };\n    }\n    network() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                name: this.networkName,\n                api: this.api,\n                chainId: this.chainId.toString(),\n            };\n        });\n    }\n    isConnected() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return !!((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length);\n        });\n    }\n    signTransaction(transaction) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.existedSDK) {\n                return this.existedSDK.signTransaction(transaction);\n            }\n            const hasConnected = yield this.isConnected();\n            if (!hasConnected) {\n                yield this.connect();\n            }\n            if (!((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length)) {\n                throw new Error('Fail to get account');\n            }\n            throw new Error('signTransaction method not supported.');\n        });\n    }\n    disconnect() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.existedSDK) {\n                yield this.existedSDK.disconnect();\n                return;\n            }\n            removeChainAddress(this.sessionKey, CHAIN.APTOS);\n            (_a = this.eventListeners) === null || _a === void 0 ? void 0 : _a.disconnect.forEach((listener) => listener({\n                code: 4900,\n                message: 'Wallet disconnected',\n            }));\n        });\n    }\n    signAndSubmitTransaction(transaction, txOptions = {}) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.existedSDK) {\n                return this.existedSDK.signAndSubmitTransaction(transaction, txOptions);\n            }\n            const hasConnected = yield this.isConnected();\n            if (!hasConnected) {\n                yield this.connect();\n            }\n            if (!((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length)) {\n                throw new Error('Fail to get account');\n            }\n            const sessionId = ((_b = getAccountStorage(this.sessionKey)) === null || _b === void 0 ? void 0 : _b.code) || '';\n            const { authorizationId } = yield fetch(`${this.server}/api/aptos/authz`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n                body: JSON.stringify(Object.assign(Object.assign({}, transaction), txOptions)),\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            if (typeof window === 'undefined') {\n                throw new Error('Currently only supported in browser');\n            }\n            const authzFrame = createFrame(`${this.server}/${this.appId}/aptos/authz/${authorizationId}`);\n            attachFrame(authzFrame);\n            return new Promise((resolve, reject) => addSelfRemovableHandler('message', (event, removeEventListener) => {\n                const e = event;\n                if (e.origin === this.server &&\n                    e.data.type === 'APTOS:FRAME:RESPONSE') {\n                    if (e.data.status === 'APPROVED') {\n                        removeEventListener();\n                        detatchFrame(authzFrame);\n                        resolve({ hash: e.data.txHash });\n                    }\n                    if (e.data.status === 'DECLINED') {\n                        removeEventListener();\n                        detatchFrame(authzFrame);\n                        if (e.data.errorCode === 'incorrect_session_id') {\n                            this.disconnect();\n                        }\n                        reject(new Error(e.data.errorMessage));\n                    }\n                }\n            }));\n        });\n    }\n    signMessage(payload) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const formattedPayload = checkMessagePayloadFormat(payload);\n            if (this.existedSDK) {\n                return this.existedSDK.signMessage(formattedPayload);\n            }\n            const hasConnected = yield this.isConnected();\n            if (!hasConnected) {\n                yield this.connect();\n            }\n            if (!((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length)) {\n                throw new Error('Fail to get account');\n            }\n            if (typeof window === 'undefined') {\n                throw new Error('Currently only supported in browser');\n            }\n            const sessionId = ((_b = getAccountStorage(this.sessionKey)) === null || _b === void 0 ? void 0 : _b.code) || '';\n            const { signatureId } = yield fetch(`${this.server}/api/aptos/user-signature`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n                body: JSON.stringify(formattedPayload),\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            const url = `${this.server}/${this.appId}/aptos/user-signature/${signatureId}`;\n            const signFrame = createFrame(url);\n            attachFrame(signFrame);\n            return new Promise((resolve, reject) => addSelfRemovableHandler('message', (event, removeEventListener) => {\n                const e = event;\n                if (e.origin === this.server &&\n                    e.data.type === 'APTOS:FRAME:RESPONSE') {\n                    if (e.data.status === 'APPROVED') {\n                        removeEventListener();\n                        detatchFrame(signFrame);\n                        resolve(e.data);\n                    }\n                    if (e.data.status === 'DECLINED') {\n                        removeEventListener();\n                        detatchFrame(signFrame);\n                        if (e.data.errorCode === 'incorrect_session_id') {\n                            this.disconnect();\n                        }\n                        reject(new Error(e.data.errorMessage));\n                    }\n                }\n            }));\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.existedSDK) {\n                return new Promise((resolve, reject) => \n                // add a small delay to make sure the network has been switched\n                setTimeout(() => this.existedSDK.connect().then(resolve).catch(reject), 10));\n            }\n            return new Promise((resolve, reject) => {\n                var _a, _b;\n                if (typeof window === 'undefined') {\n                    return reject('Currently only supported in browser');\n                }\n                if ((_a = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _a === void 0 ? void 0 : _a.length) {\n                    return resolve({\n                        address: ((_b = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _b === void 0 ? void 0 : _b[0]) || null,\n                        publicKey: this.publicKey,\n                        authKey: null,\n                        minKeysRequired: 2,\n                    });\n                }\n                const location = encodeURIComponent(window.location.origin);\n                const loginFrame = createFrame(`${this.server}/${this.appId}/aptos/authn?l6n=${location}&v=${SDK_VERSION}}`);\n                attachFrame(loginFrame);\n                addSelfRemovableHandler('message', (event, removeListener) => __awaiter(this, void 0, void 0, function* () {\n                    var _c, _d, _e, _f;\n                    const e = event;\n                    if (e.origin === this.server) {\n                        if (e.data.type === 'APTOS:FRAME:RESPONSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            setAccountStorage(this.sessionKey, {\n                                code: e.data.code,\n                                accounts: {\n                                    [CHAIN.APTOS]: [e.data.addr],\n                                },\n                            }, e.data.exp);\n                            if ((_c = e.data) === null || _c === void 0 ? void 0 : _c.isAccountChanged) {\n                                postMessage({\n                                    originChain: CHAIN.APTOS,\n                                    type: 'BLOCTO_SDK:ACCOUNT_CHANGED',\n                                });\n                            }\n                            addSelfRemovableHandler('message', (event, removeListener) => {\n                                var _a, _b;\n                                const messageEvent = event;\n                                if (((_a = messageEvent.data) === null || _a === void 0 ? void 0 : _a.type) === 'BLOCTO_SDK:ACCOUNT_CHANGED' &&\n                                    ((_b = messageEvent.data) === null || _b === void 0 ? void 0 : _b.originChain) !== CHAIN.APTOS) {\n                                    this.disconnect();\n                                    removeListener();\n                                }\n                            });\n                            if ((_d = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _d === void 0 ? void 0 : _d.length) {\n                                try {\n                                    const { public_keys: publicKeys } = yield fetch(`${this.server}/blocto/aptos/accounts/${(_e = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _e === void 0 ? void 0 : _e[0]}`).then((response) => response.json());\n                                    this.publicKey = publicKeys || [];\n                                    resolve({\n                                        address: ((_f = getChainAddress(this.sessionKey, CHAIN.APTOS)) === null || _f === void 0 ? void 0 : _f[0]) || '',\n                                        publicKey: this.publicKey,\n                                        authKey: null,\n                                        minKeysRequired: 2,\n                                    });\n                                }\n                                catch (err) {\n                                    return reject(e);\n                                }\n                            }\n                            else {\n                                // @todo: better error\n                                return reject();\n                            }\n                        }\n                        if (e.data.type === 'APTOS:FRAME:CLOSE') {\n                            removeListener();\n                            detatchFrame(loginFrame);\n                            reject(new Error('User declined the login request'));\n                        }\n                    }\n                }));\n            });\n        });\n    }\n    fetchAddress() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const sessionId = ((_a = getAccountStorage(this.sessionKey)) === null || _a === void 0 ? void 0 : _a.code) || '';\n            const { accounts } = yield fetch(`${this.server}/api/aptos/accounts`, {\n                headers: {\n                    // We already check the existence in the constructor\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    'Blocto-Application-Identifier': this.appId,\n                    'Blocto-Session-Identifier': sessionId,\n                },\n            }).then((response) => responseSessionGuard(response, this.sessionKey));\n            setChainAddress(this.sessionKey, CHAIN.APTOS, accounts);\n            return (accounts === null || accounts === void 0 ? void 0 : accounts[0]) || '';\n        });\n    }\n    on(event, listener) {\n        if (this.existedSDK)\n            this.existedSDK.on(event, listener);\n        super.on(event, listener);\n    }\n    removeListener(event, listener) {\n        if (this.existedSDK)\n            this.existedSDK.off(event, listener);\n        super.removeListener(event, listener);\n    }\n}\n\nclass BloctoSDK {\n    constructor({ appId, ethereum, aptos }) {\n        if (ethereum) {\n            this.ethereum = new EthereumProvider(Object.assign(Object.assign({}, ethereum), { appId }));\n        }\n        if (aptos) {\n            this.aptos = new AptosProvider(Object.assign(Object.assign({}, aptos), { appId }));\n        }\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@blocto/sdk/dist/blocto-sdk.module.js\n"));

/***/ })

}]);